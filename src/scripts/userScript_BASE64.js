export const userScriptBase64 = `!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__webpack_require__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__webpack_require__.t=function(value,mode){if(1&mode&&(value=__webpack_require__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__webpack_require__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=42)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(/*! ./cjs/react.production.min.js */ 67);\n} else {}\n\n\n//# sourceURL=webpack:///./node_modules/react/index.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export ServerStyleSheet */\n/* unused harmony export StyleSheetConsumer */\n/* unused harmony export StyleSheetContext */\n/* unused harmony export StyleSheetManager */\n/* unused harmony export ThemeConsumer */\n/* unused harmony export ThemeContext */\n/* unused harmony export ThemeProvider */\n/* unused harmony export __PRIVATE__ */\n/* unused harmony export createGlobalStyle */\n/* unused harmony export css */\n/* unused harmony export isStyledComponent */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return We; });\n/* unused harmony export useTheme */\n/* unused harmony export version */\n/* unused harmony export withTheme */\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-is */ 9);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! shallowequal */ 31);\n/* harmony import */ var shallowequal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/stylis */ 32);\n/* harmony import */ var _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/unitless */ 33);\n/* harmony import */ var _emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/is-prop-valid */ 19);\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hoist-non-react-statics */ 8);\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6__);\nfunction v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var g=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!Object(react_is__WEBPACK_IMPORTED_MODULE_0__["typeOf"])(t)},w=Object.freeze([]),E=Object.freeze({});function b(e){return"function"==typeof e}function _(e){return false||e.displayName||e.name||"Component"}function N(e){return e&&"string"==typeof e.styledComponentId}var A="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",C="5.2.1",I="undefined"!=typeof window&&"HTMLElement"in window,P=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY?"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:"production"!=="production"),O={},R= false?undefined:{};function D(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t)})),e}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw true?new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):"")):undefined}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\\n";return t},e}(),k=new Map,x=new Map,V=1,B=function(e){if(k.has(e))return k.get(e);for(;x.has(V);)V++;var t=V++;return false&&false,k.set(e,t),x.set(t,e),t},M=function(e){return x.get(e)},z=function(e,t){k.set(e,t),x.set(t,e)},L="style["+A+\'][data-styled-version="5.2.1"]\',G=new RegExp("^"+A+\'\\\\.g(\\\\d+)\\\\[id="([\\\\w\\\\d-]+)"\\\\].*?"([^"]*)\'),F=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r)},Y=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(G);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(z(u,c),F(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(i)}}},q=function(){return true?__webpack_require__.nc:undefined},H=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(A,"active"),r.setAttribute("data-styled-version","5.2.1");var i=q();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},$=function(){function e(e){var t=this.element=H(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W=function(){function e(e){var t=this.element=H(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I,X={isServer:!I,useCSSOMInjection:!P},Z=function(){function e(e,t,n){void 0===e&&(e=E),void 0===t&&(t={}),this.options=v({},X,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&I&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(L),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A)&&(Y(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return B(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U(o):r?new $(o):new W(o),new T(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(B(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=M(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(void 0!==i&&0!==a.length){var c=A+".g"+o+\'[id="\'+s+\'"]\',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+a+c+\'{content:"\'+u+\'"}/*!sc*/\\n\'}}}return r}(this)},e}(),K=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return(Q(t%52)+n).replace(K,"$1-$2")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b(n)&&!N(n))return!1}return!0}var oe=ne("5.2.1"),se=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic= true&&(void 0===n||n.isStatic)&&re(e),this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var s=Ne(this.rules,e,t,n).join(""),i=ee(te(this.baseHash,s.length)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a)}o.push(i),this.staticRulesId=i}else{for(var c=this.rules.length,u=te(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h, false&&(false);else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te(u,f+d),l+=f}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(" ")},e}(),ie=/^\\s*\\/\\/.*$/gm,ae=[":","[",".","#"];function ce(e){var t,n,r,o,s=void 0===e?E:e,i=s.options,a=void 0===i?E:i,c=s.plugins,u=void 0===c?w:c,l=new _emotion_stylis__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](a),d=[],h=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,s){return 0===r&&ae.includes(s[n.length])||s.match(o)?e:"."+t};function m(e,s,i,a){void 0===a&&(a="&");var c=e.replace(ie,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\\\"+n+"\\\\b","g"),o=new RegExp("(\\\\"+n+"\\\\b){2,}"),l(i||!s?"":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j(15),te(e,t.name)}),5381).toString():"",m}var ue=react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),le=ue.Consumer,de=react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),he=(de.Consumer,new Z),pe=ce();function fe(){return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ue)||he}function me(){return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(de)||pe}function ye(e){var t=Object(react__WEBPACK_IMPORTED_MODULE_1__["useState"])(e.stylisPlugins),n=t[0],s=t[1],c=fe(),u=Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])((function(){var t=c;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])((function(){return ce({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return Object(react__WEBPACK_IMPORTED_MODULE_1__["useEffect"])((function(){shallowequal__WEBPACK_IMPORTED_MODULE_2___default()(n,e.stylisPlugins)||s(e.stylisPlugins)}),[e.stylisPlugins]),react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ue.Provider,{value:u},react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(de.Provider,{value:l}, false?undefined:e.children))}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return"-"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)""!==(s=Ne(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(_e(e))return"";if(N(e))return"."+e.styledComponentId;if(b(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return false&&false,Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!_e(t[i])&&(S(t[i])?s.push.apply(s,e(t[i],i)):b(t[i])?s.push(be(i)+":",t[i],";"):s.push(be(i)+": "+(r=i,null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in _emotion_unitless__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}function Ae(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b(e)||S(e)?Ne(g(w,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ne(g(e,n))}var Ce=/invalid hook call/i,Ie=new Set,Pe=function(e,t){if(false){ var n; }},Oe=function(e,t,n){return void 0===n&&(n=E),e.theme!==n.theme&&e.theme||t||n.theme},Re=/[!"#$%&\'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g,De=/(^-|-$)/g;function je(e){return e.replace(Re,"-").replace(De,"")}var Te=function(e){return ee(ne(e)>>>0)};function ke(e){return"string"==typeof e&&( true||false)}var xe=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ve=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Be(e,t,n){var r=e[n];xe(t)&&xe(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(xe(i))for(var a in i)Ve(a)&&Be(e,i[a],a)}return e}var ze=react__WEBPACK_IMPORTED_MODULE_1___default.a.createContext(),Le=ze.Consumer;function Ge(e){var t=Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ze),n=Object(react__WEBPACK_IMPORTED_MODULE_1__["useMemo"])((function(){return function(e,t){if(!e)return j(14);if(b(e)){var n=e(t);return true?n:undefined}return Array.isArray(e)||"object"!=typeof e?j(8):t?v({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ze.Provider,{value:n},e.children):null}var Fe={};function Ye(e,t,n){var o=N(e),i=!ke(e),a=t.attrs,c=void 0===a?w:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":je(e);Fe[n]=(Fe[n]||0)+1;var r=n+"-"+Te("5.2.1"+n+Fe[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?"styled."+e:"Styled("+_(e)+")"}(e):p,g=t.displayName&&t.componentId?je(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r){return e.shouldForwardProp(n,r)&&t.shouldForwardProp(n,r)}:e.shouldForwardProp);var C,I=new se(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target; false&&false;var f=function(e,t,n){void 0===e&&(e=E);var r=v({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in b(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t]})),[r,o]}(Oe(t,Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ze),a)||E,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),s=me(),i=t?e.generateAndInjectStyles(E,o,s):e.generateAndInjectStyles(n,o,s);return false&&false, false&&false,i}(i,r,y, false?undefined:void 0),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]):!N||Object(_emotion_is_prop_valid__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,Object(react__WEBPACK_IMPORTED_MODULE_1__["createElement"])(_,C)}(C,e,t,P)};return O.displayName=f,(C=react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=r&&r+"-"+(ke(e)?e:je(_(e)));return Ye(e,v({},o,{attrs:S,componentId:s}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t}}), false&&(false),C.toString=function(){return"."+C.styledComponentId},i&&hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var qe=function(e){return function e(t,r,o){if(void 0===o&&(o=E),!Object(react_is__WEBPACK_IMPORTED_MODULE_0__["isValidElementType"])(r))return j(1,String(r));var s=function(){return t(r,o,Ae.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,v({},o,{},n))},s.attrs=function(n){return e(t,r,v({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(Ye,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){qe[e]=qe(e)}));var He=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&Z.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=Ae.apply(void 0,[e].concat(n)),a="sc-global-"+Te(JSON.stringify(i)),u=new He(i,a);function l(e){var t=fe(),n=me(),o=Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ze),l=Object(react__WEBPACK_IMPORTED_MODULE_1__["useRef"])(t.allocateGSInstance(a)).current;return false&&false, false&&false,Object(react__WEBPACK_IMPORTED_MODULE_1__["useLayoutEffect"])((function(){return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O,n,o);else{var s=v({},t,{theme:Oe(t,r,l.defaultProps)});u.renderStyles(e,s,n,o)}}return false&&false,react__WEBPACK_IMPORTED_MODULE_1___default.a.memo(l)}function We(e){ false&&false;for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ae.apply(void 0,[e].concat(n)).join(""),s=Te(o);return new ve(s,o)}var Ue=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=q();return"<style "+[n&&\'nonce="\'+n+\'"\',A+\'="true"\',\'data-styled-version="5.2.1"\'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return j(2);var n=((t={})[A]="",t["data-styled-version"]="5.2.1",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=q();return o&&(n.nonce=o),[react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("style",v({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Z({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?j(2):react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ye,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return j(3)},e}(),Je=function(e){var t=react__WEBPACK_IMPORTED_MODULE_1___default.a.forwardRef((function(t,n){var o=Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ze),i=e.defaultProps,a=Oe(t,o,i);return false&&false,react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(e,v({},t,{theme:a,ref:n}))}));return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_6___default()(t,e),t.displayName="WithTheme("+_(e)+")",t},Xe=function(){return Object(react__WEBPACK_IMPORTED_MODULE_1__["useContext"])(ze)},Ze={StyleSheet:Z,masterSheet:he}; false&&false, false&&(false);/* harmony default export */ __webpack_exports__["a"] = (qe);\n//# sourceMappingURL=styled-components.browser.esm.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ 11)))\n\n//# sourceURL=webpack:///./node_modules/styled-components/dist/styled-components.browser.esm.js?')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony default export */ __webpack_exports__["a"] = ({\n  analyticsUrl: "https://unidlapi.ru/stat/",\n  getUtmUrl: "https://unidownloader.com/user",\n  branch: "HEAD",\n  hash: "9059465",\n  version: "0.7.9",\n  type: "udl-usrscr",\n  analytics: "https://reqapi.ru/analytics/",\n  default: {\n    attempts: 20,\n  },\n});\n\n\n//# sourceURL=webpack:///./src/config.js?')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! config */ 2);\n\n\n// it\'s kind of utils or something\nconst ctx = {\n  // properties\n  window,\n\n  // methods\n  getServiceUrl(url, lang) {\n    const base64String = Buffer.from(url).toString("base64");\n    const modifiedBase64String = base64String.replace("/", "_").replace("+", "-");\n    const encodedString = encodeURIComponent(modifiedBase64String);\n    return `https://unidownloader.com/${lang || "en"}/vid/${encodedString}`;\n  },\n\n  getNthAncestor(node, n) {\n    let res = node;\n    let counter = n;\n    while (counter > 0) {\n      res = res.parentElement;\n      if (res !== null) {\n        counter -= 1;\n      } else {\n        break;\n      }\n    }\n    return res;\n  },\n\n  log(service, message) {\n    try {\n      const data = {\n        type: "unidownloader_userscript",\n        version: config__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].version,\n        service,\n        message,\n      };\n      const xhr = new XMLHttpRequest();\n      xhr.open("POST", config__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].analytics, true);\n      // const payload = Object.keys(data).reduce((acc, key) => `${acc}&${key}=${encodeURIComponent(data[key])}`, "");\n      // xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");\n      // xhr.send(payload);\n      xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");\n      xhr.send(JSON.stringify(data));\n    } catch (e) {\n    }\n  },\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (ctx);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ 43).Buffer))\n\n//# sourceURL=webpack:///./src/utils/ctx.js?')},function(module,exports,__webpack_require__){"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(/*! ./cjs/react-dom.production.min.js */ 72);\n} else {}\n\n\n//# sourceURL=webpack:///./node_modules/react-dom/index.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _inheritsLoose; });\n/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ 12);\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  Object(_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(subClass, superClass);\n}\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js?')},,function(module,exports,__webpack_require__){"use strict";eval("\n\nvar reactIs = __webpack_require__(/*! react-is */ 9);\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n\n\n//# sourceURL=webpack:///./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js?")},function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.production.min.js */ 70);\n} else {}\n\n\n//# sourceURL=webpack:///./node_modules/react-is/index.js?")},function(module,exports,__webpack_require__){eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = __webpack_require__(/*! ./factoryWithThrowingShims */ 68)();\n}\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/index.js?")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _setPrototypeOf; });\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js?')},function(module,exports){eval('function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js?')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright 2014 Simon Lydell\r\n// X11 (“MIT”) Licensed. (See LICENSE.)\r\n\r\nvoid (function(root, factory) {\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n  } else {}\r\n}(this, function() {\r\n\r\n  function resolveUrl(/* ...urls */) {\r\n    var numUrls = arguments.length\r\n\r\n    if (numUrls === 0) {\r\n      throw new Error("resolveUrl requires at least one argument; got none.")\r\n    }\r\n\r\n    var base = document.createElement("base")\r\n    base.href = arguments[0]\r\n\r\n    if (numUrls === 1) {\r\n      return base.href\r\n    }\r\n\r\n    var head = document.getElementsByTagName("head")[0]\r\n    head.insertBefore(base, head.firstChild)\r\n\r\n    var a = document.createElement("a")\r\n    var resolved\r\n\r\n    for (var index = 1; index < numUrls; index++) {\r\n      a.href = arguments[index]\r\n      resolved = a.href\r\n      base.href = resolved\r\n    }\r\n\r\n    head.removeChild(base)\r\n\r\n    return resolved\r\n  }\r\n\r\n  return resolveUrl\r\n\r\n}));\r\n\n\n//# sourceURL=webpack:///./node_modules/resolve-url/resolve-url.js?')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ponyfill.js */ 30);\n/* global window */\n\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (true) {\n  root = module;\n} else {}\n\nvar result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(root);\n/* harmony default export */ __webpack_exports__[\"a\"] = (result);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 14), __webpack_require__(/*! ./../../webpack/buildin/harmony-module.js */ 71)(module)))\n\n//# sourceURL=webpack:///./node_modules/symbol-observable/es/index.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ 6);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ 10);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nvar MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nfunction getUniqueId() {\n  var key = '__global_unique_id__';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = '__create-react-context-' + getUniqueId() + '__';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (false) {}\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"]);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])(Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"]);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}\n\nvar index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (index);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 14)))\n\n//# sourceURL=webpack:///./node_modules/mini-create-react-context/dist/esm/index.js?")},function(module,exports,__webpack_require__){eval("var isarray = __webpack_require__(/*! isarray */ 75)\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\n\n//# sourceURL=webpack:///./node_modules/path-to-regexp/index.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js\nfunction memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\n/* harmony default export */ var memoize_browser_esm = (memoize);\n\n// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js\n\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar index = memoize_browser_esm(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\n/* harmony default export */ var is_prop_valid_browser_esm = __webpack_exports__["a"] = (index);\n\n\n//# sourceURL=webpack:///./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js_+_1_modules?')},,function(module,exports){eval("let logging = false;\n\nexports.logging = logging;\n\nexports.setLogging = (_logging) => {\n  logging = _logging;\n};\n\nexports.log = (...args) => (logging ? console.log.apply(this, args) : null);\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/utils/log.js?")},function(module,exports){eval("module.exports = (prefix, cnt) => (\n  `${prefix}-${cnt}-${Math.random().toString(16).slice(3, 8)}`\n);\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/utils/getId.js?")},function(module,exports,__webpack_require__){"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n//# sourceURL=webpack:///./node_modules/object-assign/index.js?")},function(module,exports){eval("module.exports = {\n\tMODE_NUMBER :\t\t1 << 0,\n\tMODE_ALPHA_NUM : \t1 << 1,\n\tMODE_8BIT_BYTE : \t1 << 2,\n\tMODE_KANJI :\t\t1 << 3\n};\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/mode.js?")},function(module,exports){eval("module.exports = {\n\tL : 1,\n\tM : 0,\n\tQ : 3,\n\tH : 2\n};\n\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/ErrorCorrectLevel.js?")},function(module,exports,__webpack_require__){eval('var math = __webpack_require__(/*! ./math */ 27);\n\nfunction QRPolynomial(num, shift) {\n\n\tif (num.length == undefined) {\n\t\tthrow new Error(num.length + "/" + shift);\n\t}\n\n\tvar offset = 0;\n\n\twhile (offset < num.length && num[offset] == 0) {\n\t\toffset++;\n\t}\n\n\tthis.num = new Array(num.length - offset + shift);\n\tfor (var i = 0; i < num.length - offset; i++) {\n\t\tthis.num[i] = num[i + offset];\n\t}\n}\n\nQRPolynomial.prototype = {\n\n\tget : function(index) {\n\t\treturn this.num[index];\n\t},\n\t\n\tgetLength : function() {\n\t\treturn this.num.length;\n\t},\n\t\n\tmultiply : function(e) {\n\t\n\t\tvar num = new Array(this.getLength() + e.getLength() - 1);\n\t\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tfor (var j = 0; j < e.getLength(); j++) {\n\t\t\t\tnum[i + j] ^= math.gexp(math.glog(this.get(i) ) + math.glog(e.get(j) ) );\n\t\t\t}\n\t\t}\n\t\n\t\treturn new QRPolynomial(num, 0);\n\t},\n\t\n\tmod : function(e) {\n\t\n\t\tif (this.getLength() - e.getLength() < 0) {\n\t\t\treturn this;\n\t\t}\n\t\n\t\tvar ratio = math.glog(this.get(0) ) - math.glog(e.get(0) );\n\t\n\t\tvar num = new Array(this.getLength() );\n\t\t\n\t\tfor (var i = 0; i < this.getLength(); i++) {\n\t\t\tnum[i] = this.get(i);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < e.getLength(); i++) {\n\t\t\tnum[i] ^= math.gexp(math.glog(e.get(i) ) + ratio);\n\t\t}\n\t\n\t\t// recursive call\n\t\treturn new QRPolynomial(num, 0).mod(e);\n\t}\n};\n\nmodule.exports = QRPolynomial;\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/Polynomial.js?')},function(module,exports){eval('var QRMath = {\n\n\tglog : function(n) {\n\t\n\t\tif (n < 1) {\n\t\t\tthrow new Error("glog(" + n + ")");\n\t\t}\n\t\t\n\t\treturn QRMath.LOG_TABLE[n];\n\t},\n\t\n\tgexp : function(n) {\n\t\n\t\twhile (n < 0) {\n\t\t\tn += 255;\n\t\t}\n\t\n\t\twhile (n >= 256) {\n\t\t\tn -= 255;\n\t\t}\n\t\n\t\treturn QRMath.EXP_TABLE[n];\n\t},\n\t\n\tEXP_TABLE : new Array(256),\n\t\n\tLOG_TABLE : new Array(256)\n\n};\n\t\nfor (var i = 0; i < 8; i++) {\n\tQRMath.EXP_TABLE[i] = 1 << i;\n}\nfor (var i = 8; i < 256; i++) {\n\tQRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]\n\t\t^ QRMath.EXP_TABLE[i - 5]\n\t\t^ QRMath.EXP_TABLE[i - 6]\n\t\t^ QRMath.EXP_TABLE[i - 8];\n}\nfor (var i = 0; i < 255; i++) {\n\tQRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;\n}\n\nmodule.exports = QRMath;\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/math.js?')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst EventEmitter = __webpack_require__(/*! eventemitter3 */ 47);\nconst p_timeout_1 = __webpack_require__(/*! p-timeout */ 48);\nconst priority_queue_1 = __webpack_require__(/*! ./priority-queue */ 50);\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst empty = () => { };\nconst timeoutError = new p_timeout_1.TimeoutError();\n/**\nPromise queue with concurrency control.\n*/\nclass PQueue extends EventEmitter {\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        this._intervalCount = 0;\n        this._intervalEnd = 0;\n        this._pendingCount = 0;\n        this._resolveEmpty = empty;\n        this._resolveIdle = empty;\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default }, options);\n        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {\n            throw new TypeError(`Expected \\`intervalCap\\` to be a number from 1 and up, got \\`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\\` (${typeof options.intervalCap})`);\n        }\n        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {\n            throw new TypeError(`Expected \\`interval\\` to be a finite number >= 0, got \\`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\\` (${typeof options.interval})`);\n        }\n        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;\n        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;\n        this._intervalCap = options.intervalCap;\n        this._interval = options.interval;\n        this._queue = new options.queueClass();\n        this._queueClass = options.queueClass;\n        this.concurrency = options.concurrency;\n        this._timeout = options.timeout;\n        this._throwOnTimeout = options.throwOnTimeout === true;\n        this._isPaused = options.autoStart === false;\n    }\n    get _doesIntervalAllowAnother() {\n        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;\n    }\n    get _doesConcurrentAllowAnother() {\n        return this._pendingCount < this._concurrency;\n    }\n    _next() {\n        this._pendingCount--;\n        this._tryToStartAnother();\n        this.emit('next');\n    }\n    _resolvePromises() {\n        this._resolveEmpty();\n        this._resolveEmpty = empty;\n        if (this._pendingCount === 0) {\n            this._resolveIdle();\n            this._resolveIdle = empty;\n            this.emit('idle');\n        }\n    }\n    _onResumeInterval() {\n        this._onInterval();\n        this._initializeIntervalIfNeeded();\n        this._timeoutId = undefined;\n    }\n    _isIntervalPaused() {\n        const now = Date.now();\n        if (this._intervalId === undefined) {\n            const delay = this._intervalEnd - now;\n            if (delay < 0) {\n                // Act as the interval was done\n                // We don't need to resume it here because it will be resumed on line 160\n                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;\n            }\n            else {\n                // Act as the interval is pending\n                if (this._timeoutId === undefined) {\n                    this._timeoutId = setTimeout(() => {\n                        this._onResumeInterval();\n                    }, delay);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _tryToStartAnother() {\n        if (this._queue.size === 0) {\n            // We can clear the interval (\"pause\")\n            // Because we can redo it later (\"resume\")\n            if (this._intervalId) {\n                clearInterval(this._intervalId);\n            }\n            this._intervalId = undefined;\n            this._resolvePromises();\n            return false;\n        }\n        if (!this._isPaused) {\n            const canInitializeInterval = !this._isIntervalPaused();\n            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {\n                this.emit('active');\n                this._queue.dequeue()();\n                if (canInitializeInterval) {\n                    this._initializeIntervalIfNeeded();\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    _initializeIntervalIfNeeded() {\n        if (this._isIntervalIgnored || this._intervalId !== undefined) {\n            return;\n        }\n        this._intervalId = setInterval(() => {\n            this._onInterval();\n        }, this._interval);\n        this._intervalEnd = Date.now() + this._interval;\n    }\n    _onInterval() {\n        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {\n            clearInterval(this._intervalId);\n            this._intervalId = undefined;\n        }\n        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;\n        this._processQueue();\n    }\n    /**\n    Executes all queued functions until it reaches the limit.\n    */\n    _processQueue() {\n        // eslint-disable-next-line no-empty\n        while (this._tryToStartAnother()) { }\n    }\n    get concurrency() {\n        return this._concurrency;\n    }\n    set concurrency(newConcurrency) {\n        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {\n            throw new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${newConcurrency}\\` (${typeof newConcurrency})`);\n        }\n        this._concurrency = newConcurrency;\n        this._processQueue();\n    }\n    /**\n    Adds a sync or async task to the queue. Always returns a promise.\n    */\n    async add(fn, options = {}) {\n        return new Promise((resolve, reject) => {\n            const run = async () => {\n                this._pendingCount++;\n                this._intervalCount++;\n                try {\n                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : p_timeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {\n                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {\n                            reject(timeoutError);\n                        }\n                        return undefined;\n                    });\n                    resolve(await operation);\n                }\n                catch (error) {\n                    reject(error);\n                }\n                this._next();\n            };\n            this._queue.enqueue(run, options);\n            this._tryToStartAnother();\n            this.emit('add');\n        });\n    }\n    /**\n    Same as `.add()`, but accepts an array of sync or async functions.\n\n    @returns A promise that resolves when all functions are resolved.\n    */\n    async addAll(functions, options) {\n        return Promise.all(functions.map(async (function_) => this.add(function_, options)));\n    }\n    /**\n    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)\n    */\n    start() {\n        if (!this._isPaused) {\n            return this;\n        }\n        this._isPaused = false;\n        this._processQueue();\n        return this;\n    }\n    /**\n    Put queue execution on hold.\n    */\n    pause() {\n        this._isPaused = true;\n    }\n    /**\n    Clear the queue.\n    */\n    clear() {\n        this._queue = new this._queueClass();\n    }\n    /**\n    Can be called multiple times. Useful if you for example add additional items at a later time.\n\n    @returns A promise that settles when the queue becomes empty.\n    */\n    async onEmpty() {\n        // Instantly resolve if the queue is empty\n        if (this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveEmpty;\n            this._resolveEmpty = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.\n\n    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.\n    */\n    async onIdle() {\n        // Instantly resolve if none pending and if nothing else is queued\n        if (this._pendingCount === 0 && this._queue.size === 0) {\n            return;\n        }\n        return new Promise(resolve => {\n            const existingResolve = this._resolveIdle;\n            this._resolveIdle = () => {\n                existingResolve();\n                resolve();\n            };\n        });\n    }\n    /**\n    Size of the queue.\n    */\n    get size() {\n        return this._queue.size;\n    }\n    /**\n    Size of the queue, filtered by the given options.\n\n    For example, this can be used to find the number of items remaining in the queue with a specific priority level.\n    */\n    sizeBy(options) {\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        return this._queue.filter(options).length;\n    }\n    /**\n    Number of pending promises.\n    */\n    get pending() {\n        return this._pendingCount;\n    }\n    /**\n    Whether the queue is currently paused.\n    */\n    get isPaused() {\n        return this._isPaused;\n    }\n    get timeout() {\n        return this._timeout;\n    }\n    /**\n    Set the timeout for future operations.\n    */\n    set timeout(milliseconds) {\n        this._timeout = milliseconds;\n    }\n}\nexports.default = PQueue;\n\n\n//# sourceURL=webpack:///./node_modules/p-queue/dist/index.js?")},function(module,exports,__webpack_require__){eval("__webpack_require__(/*! regenerator-runtime/runtime */ 52);\nconst { logging, setLogging } = __webpack_require__(/*! ./utils/log */ 21);\nconst createWorker = __webpack_require__(/*! ./createWorker */ 53);\n\nmodule.exports = {\n  logging,\n  setLogging,\n  createWorker,\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/index.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return symbolObservablePonyfill; });\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n//# sourceURL=webpack:///./node_modules/symbol-observable/es/ponyfill.js?")},function(module,exports){eval('//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A\'s keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\n//# sourceURL=webpack:///./node_modules/shallowequal/index.js?')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("function stylis_min (W) {\n  function M(d, c, e, h, a) {\n    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {\n      g = e.charCodeAt(l);\n      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);\n\n      if (0 === b + n + v + m) {\n        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {\n          switch (g) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              f += e.charAt(l);\n          }\n\n          g = 59;\n        }\n\n        switch (g) {\n          case 123:\n            f = f.trim();\n            q = f.charCodeAt(0);\n            k = 1;\n\n            for (t = ++l; l < B;) {\n              switch (g = e.charCodeAt(l)) {\n                case 123:\n                  k++;\n                  break;\n\n                case 125:\n                  k--;\n                  break;\n\n                case 47:\n                  switch (g = e.charCodeAt(l + 1)) {\n                    case 42:\n                    case 47:\n                      a: {\n                        for (u = l + 1; u < J; ++u) {\n                          switch (e.charCodeAt(u)) {\n                            case 47:\n                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                              break;\n\n                            case 10:\n                              if (47 === g) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                          }\n                        }\n\n                        l = u;\n                      }\n\n                  }\n\n                  break;\n\n                case 91:\n                  g++;\n\n                case 40:\n                  g++;\n\n                case 34:\n                case 39:\n                  for (; l++ < J && e.charCodeAt(l) !== g;) {\n                  }\n\n              }\n\n              if (0 === k) break;\n              l++;\n            }\n\n            k = e.substring(t, l);\n            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < r && (f = f.replace(N, ''));\n                g = f.charCodeAt(1);\n\n                switch (g) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                k = M(c, r, k, g, a + 1);\n                t = k.length;\n                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));\n                if (0 < t) switch (g) {\n                  case 115:\n                    f = f.replace(da, ea);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    k = f + '{' + k + '}';\n                    break;\n\n                  case 107:\n                    f = f.replace(fa, '$1 $2');\n                    k = f + '{' + k + '}';\n                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;\n                    break;\n\n                  default:\n                    k = f + k, 112 === h && (k = (p += k, ''));\n                } else k = '';\n                break;\n\n              default:\n                k = M(c, X(c, f, I), k, h, a + 1);\n            }\n\n            F += k;\n            k = I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n            break;\n\n          case 125:\n          case 59:\n            f = (0 < r ? f.replace(N, '') : f).trim();\n            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\\x00\\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {\n              case 0:\n                break;\n\n              case 64:\n                if (105 === g || 99 === g) {\n                  G += f + e.charAt(l);\n                  break;\n                }\n\n              default:\n                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));\n            }\n            I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n        }\n      }\n\n      switch (g) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\\x00');\n          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);\n          z = 1;\n          D++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + n + v + m) {\n            z++;\n            break;\n          }\n\n        default:\n          z++;\n          y = e.charAt(l);\n\n          switch (g) {\n            case 9:\n            case 32:\n              if (0 === n + m + b) switch (x) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  y = '';\n                  break;\n\n                default:\n                  32 !== g && (y = ' ');\n              }\n              break;\n\n            case 0:\n              y = '\\\\0';\n              break;\n\n            case 12:\n              y = '\\\\f';\n              break;\n\n            case 11:\n              y = '\\\\v';\n              break;\n\n            case 38:\n              0 === n + b + m && (r = I = 1, y = '\\f' + y);\n              break;\n\n            case 108:\n              if (0 === n + b + m + E && 0 < u) switch (l - u) {\n                case 2:\n                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);\n\n                case 8:\n                  111 === K && (E = K);\n              }\n              break;\n\n            case 58:\n              0 === n + b + m && (u = l);\n              break;\n\n            case 44:\n              0 === b + v + n + m && (r = 1, y += '\\r');\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (n = n === g ? 0 : 0 === n ? g : n);\n              break;\n\n            case 91:\n              0 === n + b + v && m++;\n              break;\n\n            case 93:\n              0 === n + b + v && m--;\n              break;\n\n            case 41:\n              0 === n + b + m && v--;\n              break;\n\n            case 40:\n              if (0 === n + b + m) {\n                if (0 === q) switch (2 * x + 3 * K) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                v++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + v + n + m + u + k && (k = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < n + m + v)) switch (b) {\n                case 0:\n                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = l, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);\n              }\n          }\n\n          0 === b && (f += y);\n      }\n\n      K = x;\n      x = g;\n      l++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;\n      p = r.join(',') + '{' + p + '}';\n\n      if (0 !== w * E) {\n        2 !== w || L(p, 2) || (E = 0);\n\n        switch (E) {\n          case 111:\n            p = p.replace(ha, ':-moz-$1') + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;\n        }\n\n        E = 0;\n      }\n    }\n\n    return G + p + F;\n  }\n\n  function X(d, c, e) {\n    var h = c.trim().split(ia);\n    c = h;\n    var a = h.length,\n        m = d.length;\n\n    switch (m) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {\n          c[b] = Z(d, c[b], e).trim();\n        }\n\n        break;\n\n      default:\n        var v = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var n = 0; n < m; ++n) {\n            c[v++] = Z(d[n] + ' ', h[b], e).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, e) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, '$1' + d.trim());\n\n      case 58:\n        return d.trim() + c.replace(F, '$1' + d.trim());\n\n      default:\n        if (0 < 1 * e && 0 < c.indexOf('\\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, e, h) {\n    var a = d + ';',\n        m = 2 * c + 3 * e + 4 * h;\n\n    if (944 === m) {\n      d = a.indexOf(':', 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + ';';\n      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;\n    }\n\n    if (0 === w || 2 === w && !L(a, 1)) return a;\n\n    switch (m) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return '-webkit-' + a + a;\n\n      case 978:\n        return '-webkit-' + a + '-moz-' + a + a;\n\n      case 1019:\n      case 983:\n        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;\n\n      case 883:\n        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;\n        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;\n        break;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;\n\n          case 98:\n            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;\n        }\n        return '-webkit-' + a + '-ms-' + a + a;\n\n      case 964:\n        return '-webkit-' + a + '-ms-flex-' + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');\n        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf('-') + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, 'tb');\n            break;\n\n          case 232:\n            b = a.replace(G, 'tb-rl');\n            break;\n\n          case 220:\n            b = a.replace(G, 'lr');\n            break;\n\n          default:\n            return a;\n        }\n\n        return '-webkit-' + a + '-ms-' + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf('sticky', 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();\n\n        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, '-webkit-' + b) + ';' + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;\n        }\n\n        return a + ';';\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;\n\n          default:\n            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;\n        break;\n\n      case 962:\n        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var e = d.indexOf(1 === c ? ':' : '{'),\n        h = d.substring(0, 3 !== c ? e : 10);\n    e = d.substring(e + 1, d.length - 1);\n    return R(2 !== c ? h : h.replace(na, '$1'), e, c);\n  }\n\n  function ea(d, c) {\n    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';\n  }\n\n  function H(d, c, e, h, a, m, b, v, n, q) {\n    for (var g = 0, x = c, w; g < A; ++g) {\n      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          x = w;\n      }\n    }\n\n    if (x !== c) return x;\n  }\n\n  function T(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        A = S.length = 0;\n        break;\n\n      default:\n        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {\n          T(d[c]);\n        } else Y = !!d | 0;\n    }\n\n    return T;\n  }\n\n  function U(d) {\n    d = d.prefix;\n    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);\n    return U;\n  }\n\n  function B(d, c) {\n    var e = d;\n    33 > e.charCodeAt(0) && (e = e.trim());\n    V = e;\n    e = [V];\n\n    if (0 < A) {\n      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);\n      void 0 !== h && 'string' === typeof h && (c = h);\n    }\n\n    var a = M(O, e, c, 0, 0);\n    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    V = '';\n    E = 0;\n    z = D = 1;\n    return a;\n  }\n\n  var ca = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ia = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      fa = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ha = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      da = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      ja = /([^-])(image-set\\()/,\n      z = 1,\n      D = 1,\n      E = 0,\n      w = 1,\n      O = [],\n      S = [],\n      A = 0,\n      R = null,\n      Y = 0,\n      V = '';\n  B.use = T;\n  B.set = U;\n  void 0 !== W && U(W);\n  return B;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (stylis_min);\n\n\n//# sourceURL=webpack:///./node_modules/@emotion/stylis/dist/stylis.browser.esm.js?")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\n/* harmony default export */ __webpack_exports__["a"] = (unitlessKeys);\n\n\n//# sourceURL=webpack:///./node_modules/@emotion/unitless/dist/unitless.browser.esm.js?')},function(module,exports,__webpack_require__){eval('var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ 76);\n\nvar iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ 77);\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 78);\n\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ 80);\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js?')},function(module,exports){eval('function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js?')},function(module,exports){eval('function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/createClass.js?')},function(module,exports,__webpack_require__){eval('!function(e,t){if(true)module.exports=t();else { var r, n; }}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=1)}([function(e,t){e.exports=__webpack_require__(/*! react */ 0)},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r);function u(e){const[t,n]=Object(r.useState)(!0),[o,u]=Object(r.useState)();return Object(r.useEffect)(()=>{let t=!0;return async function(){const r=e();if(null===r)return;n(!0),u(void 0);const o=await r;t&&(u(o),n(!1))}(),()=>{t=!1}},[e]),{isFetching:t,data:o}}const c={};function i(e,t){const[n,o]=Object(r.useState)(0),i=Object(r.useMemo)(()=>"string"==typeof t?t:t(),[t]),f=Object(r.useCallback)(e=>{c[i]=Promise.resolve(e),o(Date.now())},[i]),a=Object(r.useCallback)(()=>{delete c[i],o(Date.now())},[i]),s=Object(r.useCallback)(()=>{let t=c[i];if(void 0===t){const n=e();if(null===n)return null;t=c[i]=n}return t},[i,n]),{data:l,isFetching:d}=u(s);return{isFetching:d,data:l,updateCache:f,removeCache:a}}const f=Object(r.createContext)({});function a(){return Object(r.useContext)(f)}function s({store:e,children:t}){const[n,u]=Object(r.useState)({});const c=Object.keys(e).reduce((t,n)=>{const o=e[n];return t[n]=(...e)=>{const t=[n,...e].join("_"),c=i(()=>o(...e),t);return Object(r.useEffect)(()=>{!function(e,t){u(n=>({...n,[e]:t}))}(t,c.removeCache)},[t,c.removeCache]),c},t},{clearCache(...e){!function(e){const t=n[e];t&&t()}([...e].join("_"))}}),a=f;return o.a.createElement(a.Provider,{value:c},t)}n.d(t,"useCache",(function(){return i})),n.d(t,"usePromise",(function(){return u})),n.d(t,"useStore",(function(){return a})),n.d(t,"StoreProvider",(function(){return s})),n.d(t,"StoreContext",(function(){return f}))}])}));\n\n//# sourceURL=webpack:///./node_modules/react-use-cache/dist/index.js?')},function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar React = __webpack_require__(/*! react */ 0);\n\nvar PropTypes = __webpack_require__(/*! prop-types */ 10); // qr.js doesn\'t handle error level of zero (M) so we need to do it right,\n// thus the deep require.\n\n\nvar QRCodeImpl = __webpack_require__(/*! qr.js/lib/QRCode */ 81);\n\nvar ErrorCorrectLevel = __webpack_require__(/*! qr.js/lib/ErrorCorrectLevel */ 25); // TODO: pull this off of the QRCode class type so it matches.\n\n\n// Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.\n// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we\'d do more\n// detection and not resort to byte-mode if possible, but we\'re trading off\n// a smaller library for a smaller amount of data we can potentially encode.\n// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\nfunction convertStr(str) {\n  var out = \'\';\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n\n    if (charcode < 0x0080) {\n      out += String.fromCharCode(charcode);\n    } else if (charcode < 0x0800) {\n      out += String.fromCharCode(0xc0 | charcode >> 6);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      out += String.fromCharCode(0xe0 | charcode >> 12);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else {\n      // This is a surrogate pair, so we\'ll reconsitute the pieces and work\n      // from that\n      i++;\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      out += String.fromCharCode(0xf0 | charcode >> 18);\n      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    }\n  }\n\n  return out;\n}\n\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: \'L\',\n  bgColor: \'#FFFFFF\',\n  fgColor: \'#000000\',\n  includeMargin: false\n};\nvar PROP_TYPES =  false ? undefined : {};\nvar MARGIN_SIZE = 4; // This is *very* rough estimate of max amount of QRCode allowed to be covered.\n// It is "wrong" in a lot of ways (area is a terrible way to estimate, it\n// really should be number of modules covered), but if for some reason we don\'t\n// get an explicit height or width, I\'d rather default to something than throw.\n\nvar DEFAULT_IMG_SCALE = 0.1;\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push("M".concat(start + margin, " ").concat(y + margin, "h").concat(x - start, "v1H").concat(start + margin, "z"));\n        start = null;\n        return;\n      } // end of row, clean up or skip\n\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return;\n        }\n\n        if (start === null) {\n          // Just a single dark module.\n          ops.push("M".concat(x + margin, ",").concat(y + margin, " h1v1H").concat(x + margin, "z"));\n        } else {\n          // Otherwise finish the current line.\n          ops.push("M".concat(start + margin, ",").concat(y + margin, " h").concat(x + 1 - start, "v1H").concat(start + margin, "z"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\'\');\n} // We could just do this in generatePath, except that we want to support\n// non-Path2D canvas, so we need to keep it an explicit step.\n\n\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map(function (row, y) {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n\n    return row.map(function (cell, x) {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n\n      return false;\n    });\n  });\n}\n\nfunction getImageSettings(props, cells) {\n  var imageSettings = props.imageSettings,\n      size = props.size,\n      includeMargin = props.includeMargin;\n\n  if (imageSettings == null) {\n    return null;\n  }\n\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  var scale = numCells / size;\n  var w = (imageSettings.width || defaultSize) * scale;\n  var h = (imageSettings.height || defaultSize) * scale;\n  var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  var excavation = null;\n\n  if (imageSettings.excavate) {\n    var floorX = Math.floor(x);\n    var floorY = Math.floor(y);\n    var ceilW = Math.ceil(w + x - floorX);\n    var ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n\n  return {\n    x: x,\n    y: y,\n    h: h,\n    w: w,\n    excavation: excavation\n  };\n} // For canvas we\'re going to switch our drawing mode based on whether or not\n// the environment supports Path2D. We only need the constructor to be\n// supported, but Edge doesn\'t actually support the path (string) type\n// argument. Luckily it also doesn\'t support the addPath() method. We can\n// treat that as the same thing.\n\n\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}();\n\nvar QRCodeCanvas =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(QRCodeCanvas, _React$PureComponent);\n\n  function QRCodeCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QRCodeCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), "_canvas", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_image", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "state", {\n      imgLoaded: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "handleImageLoad", function () {\n      _this.setState({\n        imgLoaded: true\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(QRCodeCanvas, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      if (this._image && this._image.complete) {\n        this.handleImageLoad();\n      }\n\n      this.update();\n    }\n  }, {\n    key: "componentWillReceiveProps",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props$imageSett, _nextProps$imageSetti;\n\n      var currentSrc = (_this$props$imageSett = this.props.imageSettings) === null || _this$props$imageSett === void 0 ? void 0 : _this$props$imageSett.src;\n      var nextSrc = (_nextProps$imageSetti = nextProps.imageSettings) === null || _nextProps$imageSetti === void 0 ? void 0 : _nextProps$imageSetti.src;\n\n      if (currentSrc !== nextSrc) {\n        this.setState({\n          imgLoaded: false\n        });\n      }\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          size = _this$props.size,\n          level = _this$props.level,\n          bgColor = _this$props.bgColor,\n          fgColor = _this$props.fgColor,\n          includeMargin = _this$props.includeMargin,\n          imageSettings = _this$props.imageSettings; // We\'ll use type===-1 to force QRCode to automatically pick the best type\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n\n      if (this._canvas != null) {\n        var canvas = this._canvas;\n        var ctx = canvas.getContext(\'2d\');\n\n        if (!ctx) {\n          return;\n        }\n\n        var cells = qrcode.modules;\n\n        if (cells === null) {\n          return;\n        }\n\n        var margin = includeMargin ? MARGIN_SIZE : 0;\n        var numCells = cells.length + margin * 2;\n        var calculatedImageSettings = getImageSettings(this.props, cells);\n\n        if (imageSettings != null && calculatedImageSettings != null) {\n          if (calculatedImageSettings.excavation != null) {\n            cells = excavateModules(cells, calculatedImageSettings.excavation);\n          }\n        } // We\'re going to scale this so that the number of drawable units\n        // matches the number of cells. This avoids rounding issues, but does\n        // result in some potentially unwanted single pixel issues between\n        // blocks, only in environments that don\'t support Path2D.\n\n\n        var pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        var scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale); // Draw solid background, only paint dark modules.\n\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n\n        if (SUPPORTS_PATH2D) {\n          // $FlowFixMe: Path2D c\'tor doesn\'t support args yet.\n          ctx.fill(new Path2D(generatePath(cells, margin)));\n        } else {\n          cells.forEach(function (row, rdx) {\n            row.forEach(function (cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n\n        if (this.state.imgLoaded && this._image && calculatedImageSettings != null) {\n          ctx.drawImage(this._image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n        }\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          size = _this$props2.size,\n          level = _this$props2.level,\n          bgColor = _this$props2.bgColor,\n          fgColor = _this$props2.fgColor,\n          style = _this$props2.style,\n          includeMargin = _this$props2.includeMargin,\n          imageSettings = _this$props2.imageSettings,\n          otherProps = _objectWithoutProperties(_this$props2, ["value", "size", "level", "bgColor", "fgColor", "style", "includeMargin", "imageSettings"]);\n\n      var canvasStyle = _objectSpread({\n        height: size,\n        width: size\n      }, style);\n\n      var img = null;\n      var imgSrc = imageSettings && imageSettings.src;\n\n      if (imageSettings != null && imgSrc != null) {\n        img = React.createElement("img", {\n          src: imgSrc,\n          style: {\n            display: \'none\'\n          },\n          onLoad: this.handleImageLoad,\n          ref: function ref(_ref) {\n            return _this2._image = _ref;\n          }\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement("canvas", _extends({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: function ref(_ref2) {\n          return _this2._canvas = _ref2;\n        }\n      }, otherProps)), img);\n    }\n  }]);\n\n  return QRCodeCanvas;\n}(React.PureComponent);\n\n_defineProperty(QRCodeCanvas, "defaultProps", DEFAULT_PROPS);\n\nif (false) {}\n\nvar QRCodeSVG =\n/*#__PURE__*/\nfunction (_React$PureComponent2) {\n  _inherits(QRCodeSVG, _React$PureComponent2);\n\n  function QRCodeSVG() {\n    _classCallCheck(this, QRCodeSVG);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));\n  }\n\n  _createClass(QRCodeSVG, [{\n    key: "render",\n    value: function render() {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          size = _this$props3.size,\n          level = _this$props3.level,\n          bgColor = _this$props3.bgColor,\n          fgColor = _this$props3.fgColor,\n          includeMargin = _this$props3.includeMargin,\n          imageSettings = _this$props3.imageSettings,\n          otherProps = _objectWithoutProperties(_this$props3, ["value", "size", "level", "bgColor", "fgColor", "includeMargin", "imageSettings"]); // We\'ll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return null;\n      }\n\n      var margin = includeMargin ? MARGIN_SIZE : 0;\n      var numCells = cells.length + margin * 2;\n      var calculatedImageSettings = getImageSettings(this.props, cells);\n      var image = null;\n\n      if (imageSettings != null && calculatedImageSettings != null) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n\n        image = React.createElement("image", {\n          xlinkHref: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: "none"\n        });\n      } // Drawing strategy: instead of a rect per module, we\'re going to create a\n      // single path for the dark modules and layer that on top of a light rect,\n      // for a total of 2 DOM nodes. We pay a bit more in string concat but that\'s\n      // way faster than DOM ops.\n      // For level 1, 441 nodes -> 2\n      // For level 40, 31329 -> 2\n\n\n      var fgPath = generatePath(cells, margin);\n      return React.createElement("svg", _extends({\n        shapeRendering: "crispEdges",\n        height: size,\n        width: size,\n        viewBox: "0 0 ".concat(numCells, " ").concat(numCells)\n      }, otherProps), React.createElement("path", {\n        fill: bgColor,\n        d: "M0,0 h".concat(numCells, "v").concat(numCells, "H0z")\n      }), React.createElement("path", {\n        fill: fgColor,\n        d: fgPath\n      }), image);\n    }\n  }]);\n\n  return QRCodeSVG;\n}(React.PureComponent);\n\n_defineProperty(QRCodeSVG, "defaultProps", DEFAULT_PROPS);\n\nif (false) {}\n\nvar QRCode = function QRCode(props) {\n  var renderAs = props.renderAs,\n      otherProps = _objectWithoutProperties(props, ["renderAs"]);\n\n  var Component = renderAs === \'svg\' ? QRCodeSVG : QRCodeCanvas;\n  return React.createElement(Component, otherProps);\n};\n\nQRCode.defaultProps = _objectSpread({\n  renderAs: \'canvas\'\n}, DEFAULT_PROPS);\nmodule.exports = QRCode;\n\n//# sourceURL=webpack:///./node_modules/qrcode.react/lib/index.js?')},function(module,exports){eval('function _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports["default"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n\n    module.exports["default"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/typeof.js?')},function(module){eval('module.exports = JSON.parse("{\\"language\\":\\"Language\\",\\"auto_detect\\":\\"Auto Detect\\",\\"download\\":\\"Download\\",\\"live_stream\\":\\"Live Stream\\",\\"live_stream_tooltip\\":\\"You can\'t download Live Streams yet, but we are working on it :)\\",\\"return_to_the_previous_screen\\":\\"Back\\",\\"settings\\":\\"Settings\\",\\"settings_show_formats_available_via_udl\\":\\"Show formats available via UDL Client\\",\\"settings_show_formats_required_online_conversion\\":\\"Show formats required online conversion\\",\\"settings_show_snapshot_button\\":\\"Show the video ​snapshot button\\",\\"settings_warn_before_converting\\":\\"Warn before converting\\",\\"confirm_conversion_title\\":\\"The selected file format requires conversion!\\",\\"confirm_conversion_message\\":\\"Conversion actively uses hardware resources, this may cause a temporary decrease in the speed of the browser, including in other tabs.\\",\\"do_not_show_on_load\\":\\"Don\'t show on load\\",\\"cancel\\":\\"Cancel\\",\\"continue\\":\\"Continue\\",\\"formats_for_download\\":\\"Formats for download\\",\\"all_formats_for_download\\":\\"All formats for download\\",\\"more_formats\\":\\"More formats\\",\\"conversion_required\\":\\"Conversion required\\",\\"udl_portal\\":\\"UDL Portal\\",\\"download_via_unidownloader\\":\\"Download the required format via unidownloader.com\\",\\"download_via_unidownloader_tooltip\\":\\"Download via unidownloader.com\\",\\"udl_client\\":\\"UDL Client\\",\\"download_using_udl\\":\\"Download the required format using UDL Client\\",\\"download_using_udl_tooltip\\":\\"Download using UDL Client\\",\\"qr_code_tooltip\\":\\"Get QR Code\\",\\"copy_link_to_clipboard_tooltip\\":\\"Copy link to clipboard\\",\\"copy_link_to_clipboard_notification_message\\":\\"Link copied to clipboard\\",\\"active_download_warning_notification_message\\":\\"Everything\'s under control!\\",\\"active_download_warning_notification_description\\":\\"You have left the page with an active download, it will continue in the background.\\",\\"cancel_conversion\\":\\"Cancel conversion\\",\\"cancel_download\\":\\"Cancel download\\",\\"take_screenshot_tooltip\\":\\"Take screenshot\\",\\"drop_us_a_line\\":\\"Didn\'t find an answer? Drop us a line ;)\\",\\"help\\":\\"Help\\",\\"help_articles\\":[{\\"title\\":\\"How to download?\\",\\"article\\":\\"You can download the default format by clicking on the <b>UDL Helper</b> button below the video. Also you can choose the desired format in the drop-down list.\\"},{\\"title\\":\\"Which video format should I choose?\\",\\"article\\":\\"The best quality is available in <b>FullHD (1080p)</b>, <b>2K (1440p)</b>, <b>4K (2160p)</b> and <b>8K (4320p)</b>. The general recommendation is that the higher your screen resolution the better the video quality should be. However, you have to consider other factors as well: download speed, amount of free space, and the device performance during playback.\\"},{\\"title\\":\\"Why does a browser/computer freezes while downloading?\\",\\"article\\":\\"The browser/computer should not completely freeze! If this happens please report it through the feedback form, indicating the video link. Unfortunately, some video formats cannot be downloaded from YouTube directly. Therefore, we have added the possibility to convert small videos online to the desired format in <b>UDL Helper</b>. In some cases this process uses computer resources too actively.\\"},{\\"title\\":\\"Why I can\'t download a video in the desired format directly?\\",\\"article\\":\\"Some video file formats can not be downloaded directly due to certain technical properties of YouTube. Hence, the <b>UDL Helper</b> has an additional feature to convert online short videos into the desired format. Large videos (longer and/or high quality) require many resources for online conversion, which sometimes can freeze your browser/computer. Therefore, it is suggested to upload these videos through the <b><a href=\\\\\\"https://unidownloader.com/{%lang%}/udl-client-youtube-downloader-and-converter\\\\\\" target=\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\">UDL Client for Windows</a></b>.\\"},{\\"title\\":\\"How can I get a video/audio download link?\\",\\"article\\":\\"Direct download link is available only for those formats that do not require conversion. To do so, click on the icon&nbsp;\x3c!--[img-copy]--\x3e in a line with appropriate download option, and then paste it as text where necessary.\\"},{\\"title\\":\\"How to download 60 fps video?\\",\\"article\\":\\"It\'s enough to choose corresponding download option, which can be identified by the icon&nbsp;\x3c!--[img-fps-60]--\x3e. However, such options are not always available. First of all, the original video must have at least 60 FPS. Also, it must be available for viewing in the YouTube player with 60 FPS rate.\\"},{\\"title\\":\\"How to download an audio track (music) in MP3?\\",\\"article\\":\\"Unfortunately, it\'s not possible to download MP3 format directly at the moment. YouTube does not support it, and the required online conversion is unstable. Use our <b><a href=\\\\\\"https://unidownloader.com/{%lang%}/udl-client-youtube-downloader-and-converter\\\\\\" target=\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\">UDL Client for Windows</a></b> that can convert video files to MP3. Or select any other audio format from the list (indicated by the icon&nbsp;\x3c!--[img-sound-on]--\x3e).\\"},{\\"title\\":\\"How to take a screenshot?\\",\\"article\\":\\"Make sure that in the <a data-unidownloader-page=\\\\\\"settings\\\\\\">settings</a> there is a checkbox opposite the item <b>\\\\\\"Show the video ​snapshot button\\\\\\"</b>. In the lower right corner of the player to the left of the <b>\\\\\\"Settings\\\\\\"</b> icon, the <b>\\\\\\"Take screenshot\\\\\\"</b> icon&nbsp;\x3c!--[img-camera]--\x3e should appear, by clicking on which the current frame from the video will be saved to your computer in jpeg format.\\"},{\\"title\\":\\"How to display the interface on click the download button, not on hover over it?\\",\\"article\\":\\"You can choose a button style in the <a data-unidownloader-page=\\\\\\"settings\\\\\\">settings</a>: <ul><li><b>modern</b> (interface appears on mouse over)</li><li><b>classic</b> (interface appears on click)</li></ul>\\"},{\\"title\\":\\"Why you need QR codes?\\",\\"article\\":\\"Using QR codes you can get a direct link to video or audio on any device with a camera. Make sure the <b>\\\\\\"Display QR Codes\\\\\\"</b> item is enabled in the <a data-unidownloader-page=\\\\\\"settings\\\\\\">UDL Helper settings</a>. Some download options will have a \\\\\\"Get QR Code\\\\\\" icon&nbsp;\x3c!--[img-qr-code]--\x3e, by clicking on which you will see a QR code and instructions for your phone or tablet.\\"}],\\"settings_title_app_button_style\\":\\"Button style\\",\\"settings_app_button_style_solid\\":\\"Modern (interface appears on mouse over)\\",\\"settings_app_button_style_split\\":\\"Classic (interface appears on click)\\",\\"settings_display_qr_codes\\":\\"Display QR Codes\\",\\"qr_code_title\\":\\"QR code for mobile device\\",\\"qr_code_description\\":\\"It\'s easy to send the direct download link to your smartphone or tablet - just launch a QR code scanner and hover over the image above.\\",\\"qr_code_error\\":\\"QR-code service is unavailabel for now. Please try again later.\\",\\"show_yandex_market_adviser\\":\\"Show Yandex.Market Adviser - best deals price comparison widget\\",\\"warning\\":\\"Warning!\\",\\"yandex_market_adviser_notification_description\\":\\"Changes will take effect after reloading the page with the Yandex.Market Adviser widget.\\",\\"social_media_sharing_title\\":\\"Just a moment please!\\",\\"social_media_sharing_message\\":\\"With our browser extension you have {%already%}downloaded {%downloadsCount%} {%video%} :)\\\\nTo keep UDL Helper free we need your help - tell about us on social networks or messengers!\\",\\"social_media_sharing_button_ok\\":\\"Share with friends\\",\\"social_media_sharing_button_cancel\\":\\"Not now\\",\\"already\\":\\"already\\",\\"plural_video\\":\\"video,videos\\",\\"direct_links_unavailable\\":\\"Direct links are temporarily unavailable. <a data-unidownloader-function=\\\\\\"reload\\\\\\">Try to reload the page (F5 key)</a>\\"}");\n\n//# sourceURL=webpack:///./src/widget/i18n/en/translation.json?')},function(module){eval('module.exports = JSON.parse("{\\"language\\":\\"Язык\\",\\"auto_detect\\":\\"Автоопределение\\",\\"download\\":\\"Скачать\\",\\"live_stream\\":\\"Трансляция\\",\\"live_stream_tooltip\\":\\"Трансляции скачивать ещё нельзя, но мы уже работаем над этим :)\\",\\"return_to_the_previous_screen\\":\\"Назад\\",\\"settings\\":\\"Настройки\\",\\"settings_show_formats_available_via_udl\\":\\"Отображать форматы, доступные через UDL Client\\",\\"settings_show_formats_required_online_conversion\\":\\"Отображать форматы, требующие онлайн-конвертации\\",\\"settings_show_snapshot_button\\":\\"Отображать кнопку сохранения скриншота из видео\\",\\"settings_warn_before_converting\\":\\"Предупреждать при конвертации\\",\\"confirm_conversion_title\\":\\"Выбранный формат файла требует конвертации!\\",\\"confirm_conversion_message\\":\\"Конвертация активно использует ресурсы компьютера, что может вызвать временное снижение скорости работы браузера, в том числе и в других вкладках.\\",\\"do_not_show_on_load\\":\\"Не показывать при загрузке\\",\\"cancel\\":\\"Отмена\\",\\"continue\\":\\"Продолжить\\",\\"formats_for_download\\":\\"Варианты загрузки\\",\\"all_formats_for_download\\":\\"Все доступные форматы\\",\\"more_formats\\":\\"Больше форматов\\",\\"conversion_required\\":\\"нужна конвертация\\",\\"udl_portal\\":\\"UDL Portal\\",\\"download_via_unidownloader\\":\\"Скачать в нужном формате через unidownloader.com\\",\\"download_via_unidownloader_tooltip\\":\\"Скачать через unidownloader.com\\",\\"udl_client\\":\\"UDL Client\\",\\"download_using_udl\\":\\"Скачать в нужном формате через UDL Client\\",\\"download_using_udl_tooltip\\":\\"Cкачать c помощью UDL Client\\",\\"qr_code_tooltip\\":\\"Получить QR-код\\",\\"copy_link_to_clipboard_tooltip\\":\\"Копировать ссылку\\",\\"copy_link_to_clipboard_notification_message\\":\\"Ссылка скопирована в буфер обмена\\",\\"active_download_warning_notification_message\\":\\"Все под контролем!\\",\\"active_download_warning_notification_description\\":\\"Вы ушли со страницы с активным скачиванием, оно продолжится в фоновом режиме.\\",\\"cancel_conversion\\":\\"Прекратить конвертацию\\",\\"cancel_download\\":\\"Прекратить скачивание\\",\\"take_screenshot_tooltip\\":\\"Сохранить кадр\\",\\"drop_us_a_line\\":\\"Не нашли ответа? Напишите нам ;)\\",\\"help\\":\\"Помощь\\",\\"help_articles\\":[{\\"title\\":\\"Как здесь качать?\\",\\"article\\":\\"Вы можете использовать формат по умолчанию, просто нажав по кнопке <b>UDL Helper</b> под видео. Или кликните на нужный формат в списке доступных для скачивания.\\"},{\\"title\\":\\"Какой формат видео выбрать?\\",\\"article\\":\\"Наилучшее качество имеют форматы <b>FullHD (1080p)</b>, <b>2K (1440p)</b>, <b>4K (2160p)</b> и <b>8K (4320p)</b>. Общая рекомендация состоит в том, что чем больше разрешение вашего экрана, тем лучше должно быть качество видео. Однако вам следует учесть и другие факторы: скорость скачивания, количество свободного места, а также производительность устройства при проигрывании.\\"},{\\"title\\":\\"Почему браузер/компьютер зависает при загрузке?\\",\\"article\\":\\"Полностью зависать браузер/компьютер не должен! Если это произошло, просьба сообщить об этом через форму обратной связи, указав ссылку на видео. К сожалению, видео в некоторых форматах нельзя скачать с YouTube напрямую. Поэтому мы добавили в <b>UDL Helper</b> возможность онлайн-конвертации небольших видео в нужный формат. В отдельных случаях этот процесс слишком активно использует ресурсы компьютера.\\"},{\\"title\\":\\"Почему я не могу скачать видео в нужном формате напрямую?\\",\\"article\\":\\"В силу технических особенностей YouTube, видео в некоторых форматах нельзя скачать напрямую. Поэтому в <b>UDL Helper</b> добавлена возможность онлайн-конвертации небольших видео в нужный формат. Большие видео (продолжительные и/или высокого качества) требуют для онлайн-конвертации слишком много ресурсов, что порой приводит к зависанию браузера/компьютера. Поэтому их предлагается скачивать через <b><a href=\\\\\\"https://unidownloader.com/{%lang%}/udl-client-youtube-downloader-and-converter\\\\\\" target=\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\">UDL Client для Windows</a></b>.\\"},{\\"title\\":\\"Как получить ссылку на видео/аудио?\\",\\"article\\":\\"Прямая ссылка на файл доступна только для форматов, которые не требуют конвертации. Для этого нажмите на иконку&nbsp;\x3c!--[img-copy]--\x3e в строке с подходящим вариантом скачивания. А затем вставьте её в виде текста туда, где необходимо.\\"},{\\"title\\":\\"Как скачать видео с 60 FPS?\\",\\"article\\":\\"Достаточно выбрать соответствующий вариант скачивания — определить его можно по иконке&nbsp;\x3c!--[img-fps-60]--\x3e. Однако не всегда такие варианты имеются. Прежде всего, само исходное видео должно иметь частоту кадров не меньше, чем 60. И оно должно быть доступно к просмотру в плеере YouTube с 60 FPS.\\"},{\\"title\\":\\"Как скачать аудиодорожку (музыку) в MP3?\\",\\"article\\":\\"К сожалению, в данный момент нельзя скачать в формате MP3 напрямую — YouTube его не поддерживает, а необходимая онлайн-конвертация работает нестабильно. Воспользуйтесь нашим <b><a href=\\\\\\"https://unidownloader.com/{%lang%}/udl-client-youtube-downloader-and-converter\\\\\\" target=\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\">UDL Client для Windows</a></b>, который поддерживает конвертацию видео в формат MP3. Или выберите в списке один из альтернативных аудиоформатов (обозначены иконкой&nbsp;\x3c!--[img-sound-on]--\x3e).\\"},{\\"title\\":\\"Как сохранить кадр из видео?\\",\\"article\\":\\"Убедитесь, что в <a data-unidownloader-page=\\\\\\"settings\\\\\\">настройках</a> отмечен пункт <b>«Отображать кнопку сохранения скриншота из видео»</b>. В правом нижнем углу плеера левее иконки <b>«Настройки»</b> должна появиться иконка&nbsp;\x3c!--[img-camera]--\x3e, по нажатию на которую текущий кадр из видео будет сохранён на ваш компьютер в формате jpeg.\\"},{\\"title\\":\\"Как отображать интерфейс по клику на кнопку скачивания, а не при наведении на неё?\\",\\"article\\":\\"В <a data-unidownloader-page=\\\\\\"settings\\\\\\">настройках</a> вы можете выбрать внешний вид кнопки: <ul><li><b>современный</b> (интерфейс выводится при наведении)</li><li><b>классический</b> (интерфейс выводится при клике)</li></ul>\\"},{\\"title\\":\\"Зачем нужны QR-коды?\\",\\"article\\":\\"С помощью QR-кодов вы можете получить прямую ссылку на видео или аудио на любом устройстве с камерой. Убедитесь, что в <a data-unidownloader-page=\\\\\\"settings\\\\\\">настройках UDL Helper</a> включен пункт <b>«Отображать QR-коды»</b>. У некоторых вариантов загрузки появится иконка&nbsp;\x3c!--[img-qr-code]--\x3e, по нажатию на которую вы увидите QR-код и инструкцию для телефона или планшета.\\"}],\\"settings_title_app_button_style\\":\\"Внешний вид кнопки\\",\\"settings_app_button_style_solid\\":\\"Современный (интерфейс выводится при наведении)\\",\\"settings_app_button_style_split\\":\\"Классический (интерфейс выводится при клике)\\",\\"settings_display_qr_codes\\":\\"Отображать QR-коды\\",\\"qr_code_title\\":\\"QR-код для мобильного устройства\\",\\"qr_code_description\\":\\"Передать прямую ссылку для загрузки на ваш смартфон или планшет теперь просто — запустите сканер QR-кодов и наведите на изображение выше.\\",\\"qr_code_error\\":\\"Сервис QR-кодов сейчас недоступен. Пожалуйста, попробуйте позже.\\",\\"show_yandex_market_adviser\\":\\"Отображать Яндекс.Советник — виджет сравнения цен для выгодных покупок\\",\\"warning\\":\\"Внимание!\\",\\"yandex_market_adviser_notification_description\\":\\"Изменения вступят в силу после перезагрузки страницы с виджетом Яндекс.Советника.\\",\\"social_media_sharing_title\\":\\"Минуточку внимания!\\",\\"social_media_sharing_message\\":\\"С помощью нашего браузерного расширения вы загрузили {%already%}{%downloadsCount%} {%video%} :)\\\\nДля того, чтобы UDL Helper оставался бесплатным, нам нужна ваша помощь — расскажите о нас в социальных сетях или месенджерах!\\",\\"social_media_sharing_button_ok\\":\\"Поделиться с друзьями\\",\\"social_media_sharing_button_cancel\\":\\"Мне сложно это сделать сейчас\\",\\"already\\":\\"уже\\",\\"plural_video\\":\\"видеоролик,видеоролика,видеороликов\\",\\"direct_links_unavailable\\":\\"Прямые ссылки временно недоступны. <a data-unidownloader-function=\\\\\\"reload\\\\\\">Попробуйте перезагрузить страницу (клавиша F5)</a>\\"}");\n\n//# sourceURL=webpack:///./src/widget/i18n/ru/translation.json?')},function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(/*! ./src/webext/content-script-userscript.js */88);\n\n\n//# sourceURL=webpack:///multi_./src/webext/content-script-userscript.js?")},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ 44)\nvar ieee754 = __webpack_require__(/*! ieee754 */ 45)\nvar isArray = __webpack_require__(/*! isarray */ 46)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ 14)))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?")},function(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?")},function(module,exports){eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?")},function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/buffer/node_modules/isarray/index.js?")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n//# sourceURL=webpack:///./node_modules/eventemitter3/index.js?")},function(module,exports,__webpack_require__){"use strict";eval("\n\nconst pFinally = __webpack_require__(/*! p-finally */ 49);\n\nclass TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst pTimeout = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {\n\tif (typeof milliseconds !== 'number' || milliseconds < 0) {\n\t\tthrow new TypeError('Expected `milliseconds` to be a positive number');\n\t}\n\n\tif (milliseconds === Infinity) {\n\t\tresolve(promise);\n\t\treturn;\n\t}\n\n\tconst timer = setTimeout(() => {\n\t\tif (typeof fallback === 'function') {\n\t\t\ttry {\n\t\t\t\tresolve(fallback());\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;\n\t\tconst timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n\t\tif (typeof promise.cancel === 'function') {\n\t\t\tpromise.cancel();\n\t\t}\n\n\t\treject(timeoutError);\n\t}, milliseconds);\n\n\t// TODO: Use native `finally` keyword when targeting Node.js 10\n\tpFinally(\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\tpromise.then(resolve, reject),\n\t\t() => {\n\t\t\tclearTimeout(timer);\n\t\t}\n\t);\n});\n\nmodule.exports = pTimeout;\n// TODO: Remove this for the next major release\nmodule.exports.default = pTimeout;\n\nmodule.exports.TimeoutError = TimeoutError;\n\n\n//# sourceURL=webpack:///./node_modules/p-timeout/index.js?")},function(module,exports,__webpack_require__){"use strict";eval("\nmodule.exports = (promise, onFinally) => {\n\tonFinally = onFinally || (() => {});\n\n\treturn promise.then(\n\t\tval => new Promise(resolve => {\n\t\t\tresolve(onFinally());\n\t\t}).then(() => val),\n\t\terr => new Promise(resolve => {\n\t\t\tresolve(onFinally());\n\t\t}).then(() => {\n\t\t\tthrow err;\n\t\t})\n\t);\n};\n\n\n//# sourceURL=webpack:///./node_modules/p-finally/index.js?")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nconst lower_bound_1 = __webpack_require__(/*! ./lower-bound */ 51);\nclass PriorityQueue {\n    constructor() {\n        this._queue = [];\n    }\n    enqueue(run, options) {\n        options = Object.assign({ priority: 0 }, options);\n        const element = {\n            priority: options.priority,\n            run\n        };\n        if (this.size && this._queue[this.size - 1].priority >= options.priority) {\n            this._queue.push(element);\n            return;\n        }\n        const index = lower_bound_1.default(this._queue, element, (a, b) => b.priority - a.priority);\n        this._queue.splice(index, 0, element);\n    }\n    dequeue() {\n        const item = this._queue.shift();\n        return item === null || item === void 0 ? void 0 : item.run;\n    }\n    filter(options) {\n        return this._queue.filter((element) => element.priority === options.priority).map((element) => element.run);\n    }\n    get size() {\n        return this._queue.length;\n    }\n}\nexports.default = PriorityQueue;\n\n\n//# sourceURL=webpack:///./node_modules/p-queue/dist/priority-queue.js?')},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nfunction lowerBound(array, value, comparator) {\n    let first = 0;\n    let count = array.length;\n    while (count > 0) {\n        const step = (count / 2) | 0;\n        let it = first + step;\n        if (comparator(array[it], value) <= 0) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\nexports.default = lowerBound;\n\n\n//# sourceURL=webpack:///./node_modules/p-queue/dist/lower-bound.js?')},function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n\n\n//# sourceURL=webpack:///./node_modules/regenerator-runtime/runtime.js?')},function(module,exports,__webpack_require__){eval("const createJob = __webpack_require__(/*! ./createJob */ 54);\nconst { log } = __webpack_require__(/*! ./utils/log */ 21);\nconst getId = __webpack_require__(/*! ./utils/getId */ 22);\nconst parseProgress = __webpack_require__(/*! ./utils/parseProgress */ 55);\nconst resolvePaths = __webpack_require__(/*! ./utils/resolvePaths */ 56);\nconst getTransferables = __webpack_require__(/*! ./utils/getTransferables */ 59);\nconst {\n  defaultOptions,\n  spawnWorker,\n  onMessage,\n  fetchFile,\n} = __webpack_require__(/*! ./worker/node */ 60);\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    progress,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      const packet = {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      };\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      /*\n       * By using Transferable in postMessage, we are able\n       * to send large files to worker\n       * @ref: https://github.com/ffmpegjs/ffmpeg.js/issues/8#issuecomment-572230128\n       */\n      worker.postMessage(packet, getTransferables(packet));\n    })\n  );\n\n  const load = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const write = async (path, data, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'writeFile',\n        args: [path, await fetchFile(data)],\n      },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'writeFile',\n        args: [path, text],\n      },\n    }))\n  );\n\n  const read = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'readFile',\n        args: [path],\n      },\n    }))\n  );\n\n  const remove = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'unlink',\n        args: [path],\n      },\n    }))\n  );\n\n  const run = (args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'run',\n      payload: {\n        args,\n      },\n    }))\n  );\n\n  const ls = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'readdir',\n        args: [path],\n      },\n    }))\n  );\n\n  const transcode = (input, output, opts = '', jobId) => (\n    run(\n      `-i ${input} ${opts} ${output}`,\n      jobId,\n    )\n  );\n\n  const trim = (input, output, from, to, opts = '', jobId) => (\n    run(\n      `-i ${input} -ss ${from} -to ${to} ${opts} ${output}`,\n      jobId,\n    )\n  );\n\n  const concatDemuxer = async (input, output, opts = '', jobId) => {\n    const text = input.reduce((acc, path) => `${acc}\\nfile ${path}`, '');\n    await writeText('concat_list.txt', text);\n    return run(`-f concat -safe 0 -i concat_list.txt ${opts} ${output}`, jobId);\n  };\n\n  const terminate = async (jobId) => {\n    if (worker !== null) {\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      worker.terminate();\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, action, status, payload,\n  }) => {\n    if (status === 'resolve') {\n      const { message, data } = payload;\n      log(`[${workerId}]: Complete ${jobId}`);\n      resolves[action]({\n        workerId,\n        jobId,\n        message,\n        data,\n      });\n    } else if (status === 'reject') {\n      rejects[action](payload);\n      throw Error(payload);\n    } else if (status === 'progress') {\n      parseProgress(payload, progress);\n      logger(payload);\n    }\n  });\n\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    write,\n    writeText,\n    read,\n    remove,\n    ls,\n    run,\n    transcode,\n    trim,\n    concatDemuxer,\n    terminate,\n  };\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/createWorker.js?")},function(module,exports,__webpack_require__){eval("const getId = __webpack_require__(/*! ./utils/getId */ 22);\n\nlet jobCounter = 0;\n\nmodule.exports = ({\n  id: _id,\n  action,\n  payload = {},\n}) => {\n  let id = _id;\n  if (typeof id === 'undefined') {\n    id = getId('Job', jobCounter);\n    jobCounter += 1;\n  }\n\n  return {\n    id,\n    action,\n    payload,\n  };\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/createJob.js?")},function(module,exports){eval("let duration = 0;\n\nconst ts2sec = (ts) => {\n  const [h, m, s] = ts.split(':');\n  return (parseFloat(h) * 60 * 60) + (parseFloat(m) * 60) + parseFloat(s);\n};\n\nmodule.exports = ({ message }, progress) => {\n  if (typeof message === 'string') {\n    if (message.startsWith('  Duration')) {\n      const ts = message.split(', ')[0].split(': ')[1];\n      const d = ts2sec(ts);\n      if (duration === 0 || duration > d) {\n        duration = d;\n      }\n    } else if (message.startsWith('frame')) {\n      const ts = message.split('time=')[1].split(' ')[0];\n      const t = ts2sec(ts);\n      progress({ ratio: t / duration });\n    } else if (message.startsWith('video:')) {\n      progress({ ratio: 1 });\n    }\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/utils/parseProgress.js?")},function(module,exports,__webpack_require__){eval("const isBrowser = __webpack_require__(/*! ./getEnvironment */ 57)('type') === 'browser';\nconst resolveURL = isBrowser ? __webpack_require__(/*! resolve-url */ 15) : s => s; // eslint-disable-line\n\nmodule.exports = (options) => {\n  const opts = { ...options };\n  ['corePath', 'workerPath'].forEach((key) => {\n    if (typeof options[key] !== 'undefined') {\n      opts[key] = resolveURL(opts[key]);\n    }\n  });\n  return opts;\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/utils/resolvePaths.js?")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {const isElectron = __webpack_require__(/*! is-electron */ 58);\n\nmodule.exports = (key) => {\n  const env = {};\n\n  if (isElectron()) {\n    env.type = 'electron';\n  } else if (typeof window === 'object') {\n    env.type = 'browser';\n  } else if (typeof importScripts === 'function') {\n    env.type = 'webworker';\n  } else if (typeof process === 'object' && \"function\" === 'function') {\n    env.type = 'node';\n  }\n\n  if (typeof key === 'undefined') {\n    return env;\n  }\n\n  return env[key];\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ 11)))\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/utils/getEnvironment.js?")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to true\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ 11)))\n\n//# sourceURL=webpack:///./node_modules/is-electron/index.js?")},function(module,exports){eval("module.exports = (packet) => {\n  const transferables = [];\n  const check = (b) => {\n    if (b instanceof Uint8Array) {\n      transferables.push(b.buffer);\n    } else if (b instanceof ArrayBuffer) {\n      transferables.push(b);\n    }\n  };\n  const { payload: { args, data } } = packet;\n  check(data);\n  if (Array.isArray(args)) {\n    args.forEach((arg) => check(arg));\n  }\n  return transferables;\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/utils/getTransferables.js?")},function(module,exports,__webpack_require__){eval("/**\n *\n * Tesseract Worker adapter for browser\n *\n * @fileoverview Tesseract Worker adapter for browser\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nconst defaultOptions = __webpack_require__(/*! ./defaultOptions */ 61);\nconst spawnWorker = __webpack_require__(/*! ./spawnWorker */ 64);\nconst onMessage = __webpack_require__(/*! ./onMessage */ 65);\nconst fetchFile = __webpack_require__(/*! ./fetchFile */ 66);\n\nmodule.exports = {\n  defaultOptions,\n  spawnWorker,\n  onMessage,\n  fetchFile,\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/worker/browser/index.js?")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(process) {const resolveURL = __webpack_require__(/*! resolve-url */ 15);\nconst { version, dependencies } = __webpack_require__(/*! ../../../package.json */ 62);\nconst defaultOptions = __webpack_require__(/*! ../../constants/defaultOptions */ 63);\n\n/*\n * Default options for browser worker\n */\nmodule.exports = {\n  ...defaultOptions,\n  workerPath: (typeof process !== 'undefined' && process.env.FFMPEG_ENV === 'development')\n    ? resolveURL(`/dist/worker.dev.js?nocache=${Math.random().toString(36).slice(3)}`)\n    : `https://unpkg.com/@ffmpeg/ffmpeg@v${version}/dist/worker.min.js`,\n  corePath: `https://unpkg.com/@ffmpeg/core@v${dependencies['@ffmpeg/core'].substring(1)}/ffmpeg-core.js`,\n  workerBlobURL: true,\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../process/browser.js */ 11)))\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/worker/browser/defaultOptions.js?")},function(module){eval('module.exports = JSON.parse("{\\"_args\\":[[\\"@ffmpeg/ffmpeg@0.6.1\\",\\"/app/user-script-build\\"]],\\"_from\\":\\"@ffmpeg/ffmpeg@0.6.1\\",\\"_id\\":\\"@ffmpeg/ffmpeg@0.6.1\\",\\"_inBundle\\":false,\\"_integrity\\":\\"sha512-LB+1ZkDg5eHH7vDjw6YgepX1W99cNBmBPiAWwPltx400BIbnRCwx1p175WwArC7BOJ+GvsWLFdlJvtNTYSYn2A==\\",\\"_location\\":\\"/@ffmpeg/ffmpeg\\",\\"_phantomChildren\\":{},\\"_requested\\":{\\"type\\":\\"version\\",\\"registry\\":true,\\"raw\\":\\"@ffmpeg/ffmpeg@0.6.1\\",\\"name\\":\\"@ffmpeg/ffmpeg\\",\\"escapedName\\":\\"@ffmpeg%2fffmpeg\\",\\"scope\\":\\"@ffmpeg\\",\\"rawSpec\\":\\"0.6.1\\",\\"saveSpec\\":null,\\"fetchSpec\\":\\"0.6.1\\"},\\"_requiredBy\\":[\\"/\\"],\\"_resolved\\":\\"https://registry.npmjs.org/@ffmpeg/ffmpeg/-/ffmpeg-0.6.1.tgz\\",\\"_spec\\":\\"0.6.1\\",\\"_where\\":\\"/app/user-script-build\\",\\"author\\":{\\"name\\":\\"Jerome Wu\\",\\"email\\":\\"jeromewus@gmail.com\\"},\\"browser\\":{\\"./src/worker/node/index.js\\":\\"./src/worker/browser/index.js\\"},\\"bugs\\":{\\"url\\":\\"https://github.com/ffmpegjs/ffmpeg.js/issues\\"},\\"dependencies\\":{\\"@ffmpeg/core\\":\\"^0.6.0\\",\\"idb\\":\\"^4.0.5\\",\\"is-electron\\":\\"^2.2.0\\",\\"is-url\\":\\"^1.2.4\\",\\"node-fetch\\":\\"^2.6.0\\",\\"regenerator-runtime\\":\\"^0.13.3\\",\\"resolve-url\\":\\"^0.2.1\\"},\\"description\\":\\"FFmpeg WebAssembly version\\",\\"devDependencies\\":{\\"@babel/core\\":\\"^7.6.4\\",\\"@babel/preset-env\\":\\"^7.6.3\\",\\"babel-loader\\":\\"^8.0.6\\",\\"cors\\":\\"^2.8.5\\",\\"eslint\\":\\"^6.1.0\\",\\"eslint-config-airbnb-base\\":\\"^14.0.0\\",\\"eslint-plugin-import\\":\\"^2.18.2\\",\\"expect.js\\":\\"^0.3.1\\",\\"express\\":\\"^4.17.1\\",\\"mocha\\":\\"^6.2.2\\",\\"mocha-headless-chrome\\":\\"^2.0.3\\",\\"npm-run-all\\":\\"^4.1.5\\",\\"nyc\\":\\"^14.1.1\\",\\"wait-on\\":\\"^3.3.0\\",\\"webpack\\":\\"^4.41.2\\",\\"webpack-cli\\":\\"^3.3.9\\",\\"webpack-dev-middleware\\":\\"^3.7.2\\"},\\"directories\\":{\\"example\\":\\"examples\\"},\\"engines\\":{\\"node\\":\\">=10.5.0\\"},\\"homepage\\":\\"https://github.com/ffmpegjs/ffmpeg.js#readme\\",\\"keywords\\":[\\"ffmpeg\\",\\"WebAssembly\\",\\"video\\"],\\"license\\":\\"MIT\\",\\"main\\":\\"src/index.js\\",\\"name\\":\\"@ffmpeg/ffmpeg\\",\\"repository\\":{\\"type\\":\\"git\\",\\"url\\":\\"git+https://github.com/ffmpegjs/ffmpeg.js.git\\"},\\"scripts\\":{\\"build\\":\\"rimraf dist && webpack --config scripts/webpack.config.prod.js\\",\\"lint\\":\\"eslint src\\",\\"prepublishOnly\\":\\"npm run build\\",\\"start\\":\\"node scripts/server.js\\",\\"test\\":\\"npm-run-all -p -r start test:all\\",\\"test:all\\":\\"npm-run-all wait test:browser:ffmpeg test:node:all\\",\\"test:browser\\":\\"mocha-headless-chrome -a incognito -a no-sandbox -a disable-setuid-sandbox -a disable-logging -t 300000\\",\\"test:browser:ffmpeg\\":\\"npm run test:browser -- -f ./tests/ffmpeg.test.html\\",\\"test:node\\":\\"nyc mocha --exit --bail --require ./scripts/test-helper.js\\",\\"test:node:all\\":\\"npm run test:node -- ./tests/*.test.js\\",\\"wait\\":\\"rimraf dist && wait-on http://localhost:3000/dist/ffmpeg.dev.js\\"},\\"version\\":\\"0.6.1\\"}");\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/package.json?')},function(module,exports){eval("module.exports = {\n  logger: () => {},\n  progress: () => {},\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/constants/defaultOptions.js?")},function(module,exports){eval("/**\n * spawnWorker\n *\n * @name spawnWorker\n * @function create a new Worker in browser\n * @access public\n */\nmodule.exports = ({ workerPath, workerBlobURL }) => {\n  let worker;\n  if (Blob && URL && workerBlobURL) {\n    /* Use Blob to load cross domain worker script */\n    const blob = new Blob([`importScripts(\"${workerPath}\");`], {\n      type: 'application/javascript',\n    });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    worker = new Worker(workerPath);\n  }\n  return worker;\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/worker/browser/spawnWorker.js?")},function(module,exports){eval("module.exports = (worker, handler) => {\n  worker.onmessage = ({ data }) => { // eslint-disable-line\n    handler(data);\n  };\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/worker/browser/onMessage.js?")},function(module,exports,__webpack_require__){eval("const resolveURL = __webpack_require__(/*! resolve-url */ 15);\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nmodule.exports = async (_data) => {\n  let data = _data;\n  if (typeof _data === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof _data === 'string') {\n    // Base64 _data\n    if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n      data = atob(_data.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    } else {\n      const res = await fetch(resolveURL(_data));\n      data = await res.arrayBuffer();\n    }\n  } else if (_data instanceof File || _data instanceof Blob) {\n    data = await readFromBlobOrFile(_data);\n  }\n\n  return new Uint8Array(data);\n};\n\n\n//# sourceURL=webpack:///./node_modules/@ffmpeg/ffmpeg/src/worker/browser/fetchFile.js?")},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar l=__webpack_require__(/*! object-assign */ 23),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):\n60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.13.1";\n\n\n//# sourceURL=webpack:///./node_modules/react/cjs/react.production.min.js?')},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ 69);\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/factoryWithThrowingShims.js?")},function(module,exports,__webpack_require__){"use strict";eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js?")},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?\nSymbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;\nfunction z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n\n\n//# sourceURL=webpack:///./node_modules/react-is/cjs/react-is.production.min.js?')},function(module,exports){eval('module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "exports", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?')},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v16.13.1\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\nvar aa=__webpack_require__(/*! react */ 0),n=__webpack_require__(/*! object-assign */ 23),r=__webpack_require__(/*! scheduler */ 73);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));\nfunction ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;\nfunction oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};\nfunction ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}\nfunction ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;\nfunction Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}\nfunction Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};\nfunction Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}\nfunction Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});\n["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});\n["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,\nVa);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});\nC.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});\nfunction Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar Ya=/^(.*)[\\\\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):\n60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}\nfunction pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":\n"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}\nfunction rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}\nfunction tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}\nfunction Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}\nfunction Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}\nfunction Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}\nfunction Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}\nfunction Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};\nfunction Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}\nvar Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};\nya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}\nvar Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}\nfunction dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}\nfunction gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;\nfunction lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}\nfunction nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}\nfunction rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}\nfunction sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=\nic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}\nvar wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");\nfunction Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}\nfunction Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}\nfunction Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}\nfunction Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}\nfunction Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}\nvar Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",\n"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}\nad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);\nad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);\nvar dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}\nfunction id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}\nfunction Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}\nvar jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}\nfunction md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}\nfunction pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}\nfunction td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}\nfunction wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}\nfunction yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}\nfunction Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}\nfunction Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;\nfunction tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}\nfunction Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,\nb,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}\nfunction Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;\nfunction ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}\nfunction G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}\nn(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,\nb;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};\nG.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}\nfunction fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);\nvar le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",\ncaptured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;\nfunction qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}\nfunction ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}\nvar ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,\nb,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}\nvar ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));\nfunction Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}\nvar Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),\nOe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}\nvar Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;\nvar b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",\ndependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===\na){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;\nk=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;\nfunction bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}\nvar cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;\nfunction jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}\nvar kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;\ncase "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}\nvar pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",\n116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===\na.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in\na?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=\nVe;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=\nWe;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}\nfunction I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}\nfunction Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}\nfunction Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}\nvar If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};\nfunction ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}\nfunction fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}\nfunction og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}\nfunction sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}\nfunction vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}\nfunction zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=\nca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&\n(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}\nfunction Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}\nvar Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;\nc=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}\nfunction Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}\nfunction Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||\n(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;\nfunction Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}\nfunction Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}\nfunction Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=\n2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==\nc.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||\nnb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=\na.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&\nm&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);\nif(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==\nq.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,\nk.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=\nd.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};\nfunction ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};\nfunction hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}\nvar jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}\nfunction oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}\nfunction th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction vh(a,b){return"function"===typeof b?b(a):b}\nfunction wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&\n(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}\nfunction Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}\nfunction Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}\nfunction zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,\nd)}}\nvar sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,\nb];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=\nc}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=\nwh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,\nb,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}\nfunction Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}\nfunction Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}\nfunction Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}\nfunction ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}\nfunction fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&\n"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===\ntypeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===\ntypeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):\n("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}\nfunction gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}\nvar ii={dehydrated:null,retryTime:0};\nfunction ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=\nb;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=\nc}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}\nfunction ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;\nni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};\npi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===\nh)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),\nc[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};\nqi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));\nreturn null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=\n{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&\n(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",\na);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,\nd);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);\nbreak;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));\nc=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=\ne,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&\n64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,\ne.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=\nb.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,\nb.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}\nvar Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}\nfunction Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}\nfunction Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}\nfunction Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;\ncase 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}\nfunction Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}\nfunction Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;\nif(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}\nfunction Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}\nfunction Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}\nfunction Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=\nf,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}\nfunction Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;\ncase "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?\nd=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=\nf;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nvar Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}\nfunction $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}\nvar bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}\nfunction Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}\nfunction Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}\nfunction xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}\nfunction zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}\nfunction Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=\nb;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}\nfunction Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;\nc===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=\nd;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=\nHd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}\nfunction yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}\nfunction Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}\nfunction Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}\nfunction Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=\nnull,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;\nbreak a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==\njj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}\nfunction Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}\nfunction Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==\na.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}\nfunction Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=\nd-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,\nm=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=\nnull;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=\n-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&\n(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,\ntop:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=\nnull;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}\nfunction Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}\nfunction Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}\nfunction Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;\nRj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;\nif(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,\nb,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=\nnull,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);\ncase 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:\nnull,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,\nb,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==\nk){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=\ng}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,\nb,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}\nfunction Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}\nfunction bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}\nfunction Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,\nfirstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=\n10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}\nfunction Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}\nfunction Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}\nfunction yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}\nfunction bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===\nd?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}\nfunction fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};\nfunction gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}\nfunction ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}\nwc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};\nza=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+\'][type="radio"]\');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;\nGa=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};\n(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.13.1",\nrendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};\nexports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};\nexports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.13.1";\n\n\n//# sourceURL=webpack:///./node_modules/react-dom/cjs/react-dom.production.min.js?')},function(module,exports,__webpack_require__){"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(/*! ./cjs/scheduler.production.min.js */ 74);\n} else {}\n\n\n//# sourceURL=webpack:///./node_modules/scheduler/index.js?")},function(module,exports,__webpack_require__){"use strict";eval('/** @license React v0.19.1\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar f,g,h,k,l;\nif("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,\ny=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===\ntypeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=\nfunction(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}\nfunction M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;\nfunction V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}\nfunction X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}\nfunction Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};\nexports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};\nexports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};\n\n\n//# sourceURL=webpack:///./node_modules/scheduler/cjs/scheduler.production.min.js?')},function(module,exports){eval("module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?")},function(module,exports){eval('function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js?')},function(module,exports){eval('function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js?')},function(module,exports,__webpack_require__){eval('var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ 79);\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js?')},function(module,exports){eval('function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js?')},function(module,exports){eval('function _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nmodule.exports = _nonIterableRest;\nmodule.exports["default"] = module.exports, module.exports.__esModule = true;\n\n//# sourceURL=webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js?')},function(module,exports,__webpack_require__){eval('var BitByte = __webpack_require__(/*! ./8BitByte */ 82);\nvar RSBlock = __webpack_require__(/*! ./RSBlock */ 83);\nvar BitBuffer = __webpack_require__(/*! ./BitBuffer */ 84);\nvar util = __webpack_require__(/*! ./util */ 85);\nvar Polynomial = __webpack_require__(/*! ./Polynomial */ 26);\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n\tthis.typeNumber = typeNumber;\n\tthis.errorCorrectLevel = errorCorrectLevel;\n\tthis.modules = null;\n\tthis.moduleCount = 0;\n\tthis.dataCache = null;\n\tthis.dataList = [];\n}\n\n// for client side minification\nvar proto = QRCode.prototype;\n\nproto.addData = function(data) {\n\tvar newData = new BitByte(data);\n\tthis.dataList.push(newData);\n\tthis.dataCache = null;\n};\n\nproto.isDark = function(row, col) {\n\tif (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n\t\tthrow new Error(row + "," + col);\n\t}\n\treturn this.modules[row][col];\n};\n\nproto.getModuleCount = function() {\n\treturn this.moduleCount;\n};\n\nproto.make = function() {\n\t// Calculate automatically typeNumber if provided is < 1\n\tif (this.typeNumber < 1 ){\n\t\tvar typeNumber = 1;\n\t\tfor (typeNumber = 1; typeNumber < 40; typeNumber++) {\n\t\t\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n\n\t\t\tvar buffer = new BitBuffer();\n\t\t\tvar totalDataCount = 0;\n\t\t\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\t\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < this.dataList.length; i++) {\n\t\t\t\tvar data = this.dataList[i];\n\t\t\t\tbuffer.put(data.mode, 4);\n\t\t\t\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\n\t\t\t\tdata.write(buffer);\n\t\t\t}\n\t\t\tif (buffer.getLengthInBits() <= totalDataCount * 8)\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.typeNumber = typeNumber;\n\t}\n\tthis.makeImpl(false, this.getBestMaskPattern() );\n};\n\nproto.makeImpl = function(test, maskPattern) {\n\t\n\tthis.moduleCount = this.typeNumber * 4 + 17;\n\tthis.modules = new Array(this.moduleCount);\n\t\n\tfor (var row = 0; row < this.moduleCount; row++) {\n\t\t\n\t\tthis.modules[row] = new Array(this.moduleCount);\n\t\t\n\t\tfor (var col = 0; col < this.moduleCount; col++) {\n\t\t\tthis.modules[row][col] = null;//(col + row) % 3;\n\t\t}\n\t}\n\n\tthis.setupPositionProbePattern(0, 0);\n\tthis.setupPositionProbePattern(this.moduleCount - 7, 0);\n\tthis.setupPositionProbePattern(0, this.moduleCount - 7);\n\tthis.setupPositionAdjustPattern();\n\tthis.setupTimingPattern();\n\tthis.setupTypeInfo(test, maskPattern);\n\t\n\tif (this.typeNumber >= 7) {\n\t\tthis.setupTypeNumber(test);\n\t}\n\n\tif (this.dataCache == null) {\n\t\tthis.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n\t}\n\n\tthis.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function(row, col)  {\n\t\n\tfor (var r = -1; r <= 7; r++) {\n\t\t\n\t\tif (row + r <= -1 || this.moduleCount <= row + r) continue;\n\t\t\n\t\tfor (var c = -1; c <= 7; c++) {\n\t\t\t\n\t\t\tif (col + c <= -1 || this.moduleCount <= col + c) continue;\n\t\t\t\n\t\t\tif ( (0 <= r && r <= 6 && (c == 0 || c == 6) )\n\t\t\t\t\t|| (0 <= c && c <= 6 && (r == 0 || r == 6) )\n\t\t\t\t\t|| (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {\n\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t} else {\n\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t}\n\t\t}\t\t\n\t}\t\t\n};\n\nproto.getBestMaskPattern = function() {\n\n\tvar minLostPoint = 0;\n\tvar pattern = 0;\n\n\tfor (var i = 0; i < 8; i++) {\n\t\t\n\t\tthis.makeImpl(true, i);\n\n\t\tvar lostPoint = util.getLostPoint(this);\n\n\t\tif (i == 0 || minLostPoint >  lostPoint) {\n\t\t\tminLostPoint = lostPoint;\n\t\t\tpattern = i;\n\t\t}\n\t}\n\n\treturn pattern;\n};\n\nproto.createMovieClip = function(target_mc, instance_name, depth) {\n\n\tvar qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n\tvar cs = 1;\n\n\tthis.make();\n\n\tfor (var row = 0; row < this.modules.length; row++) {\n\t\t\n\t\tvar y = row * cs;\n\t\t\n\t\tfor (var col = 0; col < this.modules[row].length; col++) {\n\n\t\t\tvar x = col * cs;\n\t\t\tvar dark = this.modules[row][col];\n\t\t\n\t\t\tif (dark) {\n\t\t\t\tqr_mc.beginFill(0, 100);\n\t\t\t\tqr_mc.moveTo(x, y);\n\t\t\t\tqr_mc.lineTo(x + cs, y);\n\t\t\t\tqr_mc.lineTo(x + cs, y + cs);\n\t\t\t\tqr_mc.lineTo(x, y + cs);\n\t\t\t\tqr_mc.endFill();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn qr_mc;\n};\n\nproto.setupTimingPattern = function() {\n\t\n\tfor (var r = 8; r < this.moduleCount - 8; r++) {\n\t\tif (this.modules[r][6] != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.modules[r][6] = (r % 2 == 0);\n\t}\n\n\tfor (var c = 8; c < this.moduleCount - 8; c++) {\n\t\tif (this.modules[6][c] != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.modules[6][c] = (c % 2 == 0);\n\t}\n};\n\nproto.setupPositionAdjustPattern = function() {\n\n\tvar pos = util.getPatternPosition(this.typeNumber);\n\t\n\tfor (var i = 0; i < pos.length; i++) {\n\t\n\t\tfor (var j = 0; j < pos.length; j++) {\n\t\t\n\t\t\tvar row = pos[i];\n\t\t\tvar col = pos[j];\n\t\t\t\n\t\t\tif (this.modules[row][col] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var r = -2; r <= 2; r++) {\n\t\t\t\n\t\t\t\tfor (var c = -2; c <= 2; c++) {\n\t\t\t\t\n\t\t\t\t\tif (r == -2 || r == 2 || c == -2 || c == 2\n\t\t\t\t\t\t\t|| (r == 0 && c == 0) ) {\n\t\t\t\t\t\tthis.modules[row + r][col + c] = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.modules[row + r][col + c] = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nproto.setupTypeNumber = function(test) {\n\n\tvar bits = util.getBCHTypeNumber(this.typeNumber);\n\n\tfor (var i = 0; i < 18; i++) {\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\tthis.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n\t}\n\n\tfor (var i = 0; i < 18; i++) {\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\tthis.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n\t}\n};\n\nproto.setupTypeInfo = function(test, maskPattern) {\n\n\tvar data = (this.errorCorrectLevel << 3) | maskPattern;\n\tvar bits = util.getBCHTypeInfo(data);\n\n\t// vertical\t\t\n\tfor (var i = 0; i < 15; i++) {\n\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\n\t\tif (i < 6) {\n\t\t\tthis.modules[i][8] = mod;\n\t\t} else if (i < 8) {\n\t\t\tthis.modules[i + 1][8] = mod;\n\t\t} else {\n\t\t\tthis.modules[this.moduleCount - 15 + i][8] = mod;\n\t\t}\n\t}\n\n\t// horizontal\n\tfor (var i = 0; i < 15; i++) {\n\n\t\tvar mod = (!test && ( (bits >> i) & 1) == 1);\n\t\t\n\t\tif (i < 8) {\n\t\t\tthis.modules[8][this.moduleCount - i - 1] = mod;\n\t\t} else if (i < 9) {\n\t\t\tthis.modules[8][15 - i - 1 + 1] = mod;\n\t\t} else {\n\t\t\tthis.modules[8][15 - i - 1] = mod;\n\t\t}\n\t}\n\n\t// fixed module\n\tthis.modules[this.moduleCount - 8][8] = (!test);\n};\n\nproto.mapData = function(data, maskPattern) {\n\t\n\tvar inc = -1;\n\tvar row = this.moduleCount - 1;\n\tvar bitIndex = 7;\n\tvar byteIndex = 0;\n\t\n\tfor (var col = this.moduleCount - 1; col > 0; col -= 2) {\n\n\t\tif (col == 6) col--;\n\n\t\twhile (true) {\n\n\t\t\tfor (var c = 0; c < 2; c++) {\n\t\t\t\t\n\t\t\t\tif (this.modules[row][col - c] == null) {\n\t\t\t\t\t\n\t\t\t\t\tvar dark = false;\n\n\t\t\t\t\tif (byteIndex < data.length) {\n\t\t\t\t\t\tdark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar mask = util.getMask(maskPattern, row, col - c);\n\n\t\t\t\t\tif (mask) {\n\t\t\t\t\t\tdark = !dark;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.modules[row][col - c] = dark;\n\t\t\t\t\tbitIndex--;\n\n\t\t\t\t\tif (bitIndex == -1) {\n\t\t\t\t\t\tbyteIndex++;\n\t\t\t\t\t\tbitIndex = 7;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\trow += inc;\n\n\t\t\tif (row < 0 || this.moduleCount <= row) {\n\t\t\t\trow -= inc;\n\t\t\t\tinc = -inc;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {\n\t\n\tvar rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\t\n\tvar buffer = new BitBuffer();\n\t\n\tfor (var i = 0; i < dataList.length; i++) {\n\t\tvar data = dataList[i];\n\t\tbuffer.put(data.mode, 4);\n\t\tbuffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber) );\n\t\tdata.write(buffer);\n\t}\n\n\t// calc num max data.\n\tvar totalDataCount = 0;\n\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\ttotalDataCount += rsBlocks[i].dataCount;\n\t}\n\n\tif (buffer.getLengthInBits() > totalDataCount * 8) {\n\t\tthrow new Error("code length overflow. ("\n\t\t\t+ buffer.getLengthInBits()\n\t\t\t+ ">"\n\t\t\t+  totalDataCount * 8\n\t\t\t+ ")");\n\t}\n\n\t// end code\n\tif (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n\t\tbuffer.put(0, 4);\n\t}\n\n\t// padding\n\twhile (buffer.getLengthInBits() % 8 != 0) {\n\t\tbuffer.putBit(false);\n\t}\n\n\t// padding\n\twhile (true) {\n\t\t\n\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\tbreak;\n\t\t}\n\t\tbuffer.put(QRCode.PAD0, 8);\n\t\t\n\t\tif (buffer.getLengthInBits() >= totalDataCount * 8) {\n\t\t\tbreak;\n\t\t}\n\t\tbuffer.put(QRCode.PAD1, 8);\n\t}\n\n\treturn QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function(buffer, rsBlocks) {\n\n\tvar offset = 0;\n\t\n\tvar maxDcCount = 0;\n\tvar maxEcCount = 0;\n\t\n\tvar dcdata = new Array(rsBlocks.length);\n\tvar ecdata = new Array(rsBlocks.length);\n\t\n\tfor (var r = 0; r < rsBlocks.length; r++) {\n\n\t\tvar dcCount = rsBlocks[r].dataCount;\n\t\tvar ecCount = rsBlocks[r].totalCount - dcCount;\n\n\t\tmaxDcCount = Math.max(maxDcCount, dcCount);\n\t\tmaxEcCount = Math.max(maxEcCount, ecCount);\n\t\t\n\t\tdcdata[r] = new Array(dcCount);\n\t\t\n\t\tfor (var i = 0; i < dcdata[r].length; i++) {\n\t\t\tdcdata[r][i] = 0xff & buffer.buffer[i + offset];\n\t\t}\n\t\toffset += dcCount;\n\t\t\n\t\tvar rsPoly = util.getErrorCorrectPolynomial(ecCount);\n\t\tvar rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n\n\t\tvar modPoly = rawPoly.mod(rsPoly);\n\t\tecdata[r] = new Array(rsPoly.getLength() - 1);\n\t\tfor (var i = 0; i < ecdata[r].length; i++) {\n            var modIndex = i + modPoly.getLength() - ecdata[r].length;\n\t\t\tecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;\n\t\t}\n\n\t}\n\t\n\tvar totalCodeCount = 0;\n\tfor (var i = 0; i < rsBlocks.length; i++) {\n\t\ttotalCodeCount += rsBlocks[i].totalCount;\n\t}\n\n\tvar data = new Array(totalCodeCount);\n\tvar index = 0;\n\n\tfor (var i = 0; i < maxDcCount; i++) {\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tif (i < dcdata[r].length) {\n\t\t\t\tdata[index++] = dcdata[r][i];\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (var i = 0; i < maxEcCount; i++) {\n\t\tfor (var r = 0; r < rsBlocks.length; r++) {\n\t\t\tif (i < ecdata[r].length) {\n\t\t\t\tdata[index++] = ecdata[r][i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn data;\n};\n\nmodule.exports = QRCode;\n\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/QRCode.js?')},function(module,exports,__webpack_require__){eval("var mode = __webpack_require__(/*! ./mode */ 24);\n\nfunction QR8bitByte(data) {\n\tthis.mode = mode.MODE_8BIT_BYTE;\n\tthis.data = data;\n}\n\nQR8bitByte.prototype = {\n\n\tgetLength : function(buffer) {\n\t\treturn this.data.length;\n\t},\n\t\n\twrite : function(buffer) {\n\t\tfor (var i = 0; i < this.data.length; i++) {\n\t\t\t// not JIS ...\n\t\t\tbuffer.put(this.data.charCodeAt(i), 8);\n\t\t}\n\t}\n};\n\nmodule.exports = QR8bitByte;\n\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/8BitByte.js?")},function(module,exports,__webpack_require__){eval('// ErrorCorrectLevel\nvar ECL = __webpack_require__(/*! ./ErrorCorrectLevel */ 25);\n\nfunction QRRSBlock(totalCount, dataCount) {\n\tthis.totalCount = totalCount;\n\tthis.dataCount  = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [\n\n\t// L\n\t// M\n\t// Q\n\t// H\n\n\t// 1\n\t[1, 26, 19],\n\t[1, 26, 16],\n\t[1, 26, 13],\n\t[1, 26, 9],\n\t\n\t// 2\n\t[1, 44, 34],\n\t[1, 44, 28],\n\t[1, 44, 22],\n\t[1, 44, 16],\n\n\t// 3\n\t[1, 70, 55],\n\t[1, 70, 44],\n\t[2, 35, 17],\n\t[2, 35, 13],\n\n\t// 4\t\t\n\t[1, 100, 80],\n\t[2, 50, 32],\n\t[2, 50, 24],\n\t[4, 25, 9],\n\t\n\t// 5\n\t[1, 134, 108],\n\t[2, 67, 43],\n\t[2, 33, 15, 2, 34, 16],\n\t[2, 33, 11, 2, 34, 12],\n\t\n\t// 6\n\t[2, 86, 68],\n\t[4, 43, 27],\n\t[4, 43, 19],\n\t[4, 43, 15],\n\t\n\t// 7\t\t\n\t[2, 98, 78],\n\t[4, 49, 31],\n\t[2, 32, 14, 4, 33, 15],\n\t[4, 39, 13, 1, 40, 14],\n\t\n\t// 8\n\t[2, 121, 97],\n\t[2, 60, 38, 2, 61, 39],\n\t[4, 40, 18, 2, 41, 19],\n\t[4, 40, 14, 2, 41, 15],\n\t\n\t// 9\n\t[2, 146, 116],\n\t[3, 58, 36, 2, 59, 37],\n\t[4, 36, 16, 4, 37, 17],\n\t[4, 36, 12, 4, 37, 13],\n\t\n\t// 10\t\t\n\t[2, 86, 68, 2, 87, 69],\n\t[4, 69, 43, 1, 70, 44],\n\t[6, 43, 19, 2, 44, 20],\n\t[6, 43, 15, 2, 44, 16],\n\n\t// 11\n\t[4, 101, 81],\n\t[1, 80, 50, 4, 81, 51],\n\t[4, 50, 22, 4, 51, 23],\n\t[3, 36, 12, 8, 37, 13],\n\n\t// 12\n\t[2, 116, 92, 2, 117, 93],\n\t[6, 58, 36, 2, 59, 37],\n\t[4, 46, 20, 6, 47, 21],\n\t[7, 42, 14, 4, 43, 15],\n\n\t// 13\n\t[4, 133, 107],\n\t[8, 59, 37, 1, 60, 38],\n\t[8, 44, 20, 4, 45, 21],\n\t[12, 33, 11, 4, 34, 12],\n\n\t// 14\n\t[3, 145, 115, 1, 146, 116],\n\t[4, 64, 40, 5, 65, 41],\n\t[11, 36, 16, 5, 37, 17],\n\t[11, 36, 12, 5, 37, 13],\n\n\t// 15\n\t[5, 109, 87, 1, 110, 88],\n\t[5, 65, 41, 5, 66, 42],\n\t[5, 54, 24, 7, 55, 25],\n\t[11, 36, 12],\n\n\t// 16\n\t[5, 122, 98, 1, 123, 99],\n\t[7, 73, 45, 3, 74, 46],\n\t[15, 43, 19, 2, 44, 20],\n\t[3, 45, 15, 13, 46, 16],\n\n\t// 17\n\t[1, 135, 107, 5, 136, 108],\n\t[10, 74, 46, 1, 75, 47],\n\t[1, 50, 22, 15, 51, 23],\n\t[2, 42, 14, 17, 43, 15],\n\n\t// 18\n\t[5, 150, 120, 1, 151, 121],\n\t[9, 69, 43, 4, 70, 44],\n\t[17, 50, 22, 1, 51, 23],\n\t[2, 42, 14, 19, 43, 15],\n\n\t// 19\n\t[3, 141, 113, 4, 142, 114],\n\t[3, 70, 44, 11, 71, 45],\n\t[17, 47, 21, 4, 48, 22],\n\t[9, 39, 13, 16, 40, 14],\n\n\t// 20\n\t[3, 135, 107, 5, 136, 108],\n\t[3, 67, 41, 13, 68, 42],\n\t[15, 54, 24, 5, 55, 25],\n\t[15, 43, 15, 10, 44, 16],\n\n\t// 21\n\t[4, 144, 116, 4, 145, 117],\n\t[17, 68, 42],\n\t[17, 50, 22, 6, 51, 23],\n\t[19, 46, 16, 6, 47, 17],\n\n\t// 22\n\t[2, 139, 111, 7, 140, 112],\n\t[17, 74, 46],\n\t[7, 54, 24, 16, 55, 25],\n\t[34, 37, 13],\n\n\t// 23\n\t[4, 151, 121, 5, 152, 122],\n\t[4, 75, 47, 14, 76, 48],\n\t[11, 54, 24, 14, 55, 25],\n\t[16, 45, 15, 14, 46, 16],\n\n\t// 24\n\t[6, 147, 117, 4, 148, 118],\n\t[6, 73, 45, 14, 74, 46],\n\t[11, 54, 24, 16, 55, 25],\n\t[30, 46, 16, 2, 47, 17],\n\n\t// 25\n\t[8, 132, 106, 4, 133, 107],\n\t[8, 75, 47, 13, 76, 48],\n\t[7, 54, 24, 22, 55, 25],\n\t[22, 45, 15, 13, 46, 16],\n\n\t// 26\n\t[10, 142, 114, 2, 143, 115],\n\t[19, 74, 46, 4, 75, 47],\n\t[28, 50, 22, 6, 51, 23],\n\t[33, 46, 16, 4, 47, 17],\n\n\t// 27\n\t[8, 152, 122, 4, 153, 123],\n\t[22, 73, 45, 3, 74, 46],\n\t[8, 53, 23, 26, 54, 24],\n\t[12, 45, 15, 28, 46, 16],\n\n\t// 28\n\t[3, 147, 117, 10, 148, 118],\n\t[3, 73, 45, 23, 74, 46],\n\t[4, 54, 24, 31, 55, 25],\n\t[11, 45, 15, 31, 46, 16],\n\n\t// 29\n\t[7, 146, 116, 7, 147, 117],\n\t[21, 73, 45, 7, 74, 46],\n\t[1, 53, 23, 37, 54, 24],\n\t[19, 45, 15, 26, 46, 16],\n\n\t// 30\n\t[5, 145, 115, 10, 146, 116],\n\t[19, 75, 47, 10, 76, 48],\n\t[15, 54, 24, 25, 55, 25],\n\t[23, 45, 15, 25, 46, 16],\n\n\t// 31\n\t[13, 145, 115, 3, 146, 116],\n\t[2, 74, 46, 29, 75, 47],\n\t[42, 54, 24, 1, 55, 25],\n\t[23, 45, 15, 28, 46, 16],\n\n\t// 32\n\t[17, 145, 115],\n\t[10, 74, 46, 23, 75, 47],\n\t[10, 54, 24, 35, 55, 25],\n\t[19, 45, 15, 35, 46, 16],\n\n\t// 33\n\t[17, 145, 115, 1, 146, 116],\n\t[14, 74, 46, 21, 75, 47],\n\t[29, 54, 24, 19, 55, 25],\n\t[11, 45, 15, 46, 46, 16],\n\n\t// 34\n\t[13, 145, 115, 6, 146, 116],\n\t[14, 74, 46, 23, 75, 47],\n\t[44, 54, 24, 7, 55, 25],\n\t[59, 46, 16, 1, 47, 17],\n\n\t// 35\n\t[12, 151, 121, 7, 152, 122],\n\t[12, 75, 47, 26, 76, 48],\n\t[39, 54, 24, 14, 55, 25],\n\t[22, 45, 15, 41, 46, 16],\n\n\t// 36\n\t[6, 151, 121, 14, 152, 122],\n\t[6, 75, 47, 34, 76, 48],\n\t[46, 54, 24, 10, 55, 25],\n\t[2, 45, 15, 64, 46, 16],\n\n\t// 37\n\t[17, 152, 122, 4, 153, 123],\n\t[29, 74, 46, 14, 75, 47],\n\t[49, 54, 24, 10, 55, 25],\n\t[24, 45, 15, 46, 46, 16],\n\n\t// 38\n\t[4, 152, 122, 18, 153, 123],\n\t[13, 74, 46, 32, 75, 47],\n\t[48, 54, 24, 14, 55, 25],\n\t[42, 45, 15, 32, 46, 16],\n\n\t// 39\n\t[20, 147, 117, 4, 148, 118],\n\t[40, 75, 47, 7, 76, 48],\n\t[43, 54, 24, 22, 55, 25],\n\t[10, 45, 15, 67, 46, 16],\n\n\t// 40\n\t[19, 148, 118, 6, 149, 119],\n\t[18, 75, 47, 31, 76, 48],\n\t[34, 54, 24, 34, 55, 25],\n\t[20, 45, 15, 61, 46, 16]\n];\n\nQRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {\n\t\n\tvar rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\t\n\tif (rsBlock == undefined) {\n\t\tthrow new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);\n\t}\n\n\tvar length = rsBlock.length / 3;\n\t\n\tvar list = new Array();\n\t\n\tfor (var i = 0; i < length; i++) {\n\n\t\tvar count = rsBlock[i * 3 + 0];\n\t\tvar totalCount = rsBlock[i * 3 + 1];\n\t\tvar dataCount  = rsBlock[i * 3 + 2];\n\n\t\tfor (var j = 0; j < count; j++) {\n\t\t\tlist.push(new QRRSBlock(totalCount, dataCount) );\t\n\t\t}\n\t}\n\t\n\treturn list;\n}\n\nQRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {\n\n\tswitch(errorCorrectLevel) {\n\tcase ECL.L :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\tcase ECL.M :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\tcase ECL.Q :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\tcase ECL.H :\n\t\treturn QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\tdefault :\n\t\treturn undefined;\n\t}\n}\n\nmodule.exports = QRRSBlock;\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/RSBlock.js?')},function(module,exports){eval("function QRBitBuffer() {\n\tthis.buffer = new Array();\n\tthis.length = 0;\n}\n\nQRBitBuffer.prototype = {\n\n\tget : function(index) {\n\t\tvar bufIndex = Math.floor(index / 8);\n\t\treturn ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;\n\t},\n\t\n\tput : function(num, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tthis.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);\n\t\t}\n\t},\n\t\n\tgetLengthInBits : function() {\n\t\treturn this.length;\n\t},\n\t\n\tputBit : function(bit) {\n\t\n\t\tvar bufIndex = Math.floor(this.length / 8);\n\t\tif (this.buffer.length <= bufIndex) {\n\t\t\tthis.buffer.push(0);\n\t\t}\n\t\n\t\tif (bit) {\n\t\t\tthis.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );\n\t\t}\n\t\n\t\tthis.length++;\n\t}\n};\n\nmodule.exports = QRBitBuffer;\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/BitBuffer.js?")},function(module,exports,__webpack_require__){eval('var Mode = __webpack_require__(/*! ./mode */ 24);\nvar Polynomial = __webpack_require__(/*! ./Polynomial */ 26);\nvar math = __webpack_require__(/*! ./math */ 27);\n\nvar QRMaskPattern = {\n\tPATTERN000 : 0,\n\tPATTERN001 : 1,\n\tPATTERN010 : 2,\n\tPATTERN011 : 3,\n\tPATTERN100 : 4,\n\tPATTERN101 : 5,\n\tPATTERN110 : 6,\n\tPATTERN111 : 7\n};\n\nvar QRUtil = {\n\n    PATTERN_POSITION_TABLE : [\n\t    [],\n\t    [6, 18],\n\t    [6, 22],\n\t    [6, 26],\n\t    [6, 30],\n\t    [6, 34],\n\t    [6, 22, 38],\n\t    [6, 24, 42],\n\t    [6, 26, 46],\n\t    [6, 28, 50],\n\t    [6, 30, 54],\t\t\n\t    [6, 32, 58],\n\t    [6, 34, 62],\n\t    [6, 26, 46, 66],\n\t    [6, 26, 48, 70],\n\t    [6, 26, 50, 74],\n\t    [6, 30, 54, 78],\n\t    [6, 30, 56, 82],\n\t    [6, 30, 58, 86],\n\t    [6, 34, 62, 90],\n\t    [6, 28, 50, 72, 94],\n\t    [6, 26, 50, 74, 98],\n\t    [6, 30, 54, 78, 102],\n\t    [6, 28, 54, 80, 106],\n\t    [6, 32, 58, 84, 110],\n\t    [6, 30, 58, 86, 114],\n\t    [6, 34, 62, 90, 118],\n\t    [6, 26, 50, 74, 98, 122],\n\t    [6, 30, 54, 78, 102, 126],\n\t    [6, 26, 52, 78, 104, 130],\n\t    [6, 30, 56, 82, 108, 134],\n\t    [6, 34, 60, 86, 112, 138],\n\t    [6, 30, 58, 86, 114, 142],\n\t    [6, 34, 62, 90, 118, 146],\n\t    [6, 30, 54, 78, 102, 126, 150],\n\t    [6, 24, 50, 76, 102, 128, 154],\n\t    [6, 28, 54, 80, 106, 132, 158],\n\t    [6, 32, 58, 84, 110, 136, 162],\n\t    [6, 26, 54, 82, 110, 138, 166],\n\t    [6, 30, 58, 86, 114, 142, 170]\n    ],\n\n    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),\n    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),\n    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)\t| (1 << 4) | (1 << 1),\n\n    getBCHTypeInfo : function(data) {\n\t    var d = data << 10;\n\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n\t\t    d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) ); \t\n\t    }\n\t    return ( (data << 10) | d) ^ QRUtil.G15_MASK;\n    },\n\n    getBCHTypeNumber : function(data) {\n\t    var d = data << 12;\n\t    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n\t\t    d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) ); \t\n\t    }\n\t    return (data << 12) | d;\n    },\n\n    getBCHDigit : function(data) {\n\n\t    var digit = 0;\n\n\t    while (data != 0) {\n\t\t    digit++;\n\t\t    data >>>= 1;\n\t    }\n\n\t    return digit;\n    },\n\n    getPatternPosition : function(typeNumber) {\n\t    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n\n    getMask : function(maskPattern, i, j) {\n\t    \n\t    switch (maskPattern) {\n\t\t    \n\t    case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;\n\t    case QRMaskPattern.PATTERN001 : return i % 2 == 0;\n\t    case QRMaskPattern.PATTERN010 : return j % 3 == 0;\n\t    case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;\n\t    case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;\n\t    case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;\n\t    case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;\n\t    case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;\n\n\t    default :\n\t\t    throw new Error("bad maskPattern:" + maskPattern);\n\t    }\n    },\n\n    getErrorCorrectPolynomial : function(errorCorrectLength) {\n\n\t    var a = new Polynomial([1], 0);\n\n\t    for (var i = 0; i < errorCorrectLength; i++) {\n\t\t    a = a.multiply(new Polynomial([1, math.gexp(i)], 0) );\n\t    }\n\n\t    return a;\n    },\n\n    getLengthInBits : function(mode, type) {\n\n\t    if (1 <= type && type < 10) {\n\n\t\t    // 1 - 9\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 10;\n\t\t    case Mode.MODE_ALPHA_NUM \t: return 9;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 8;\n\t\t    case Mode.MODE_KANJI  \t: return 8;\n\t\t    default :\n\t\t\t    throw new Error("mode:" + mode);\n\t\t    }\n\n\t    } else if (type < 27) {\n\n\t\t    // 10 - 26\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 12;\n\t\t    case Mode.MODE_ALPHA_NUM \t: return 11;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 16;\n\t\t    case Mode.MODE_KANJI  \t: return 10;\n\t\t    default :\n\t\t\t    throw new Error("mode:" + mode);\n\t\t    }\n\n\t    } else if (type < 41) {\n\n\t\t    // 27 - 40\n\n\t\t    switch(mode) {\n\t\t    case Mode.MODE_NUMBER \t: return 14;\n\t\t    case Mode.MODE_ALPHA_NUM\t: return 13;\n\t\t    case Mode.MODE_8BIT_BYTE\t: return 16;\n\t\t    case Mode.MODE_KANJI  \t: return 12;\n\t\t    default :\n\t\t\t    throw new Error("mode:" + mode);\n\t\t    }\n\n\t    } else {\n\t\t    throw new Error("type:" + type);\n\t    }\n    },\n\n    getLostPoint : function(qrCode) {\n\t    \n\t    var moduleCount = qrCode.getModuleCount();\n\t    \n\t    var lostPoint = 0;\n\t    \n\t    // LEVEL1\n\t    \n\t    for (var row = 0; row < moduleCount; row++) {\n\n\t\t    for (var col = 0; col < moduleCount; col++) {\n\n\t\t\t    var sameCount = 0;\n\t\t\t    var dark = qrCode.isDark(row, col);\n\n\t\t\t\tfor (var r = -1; r <= 1; r++) {\n\n\t\t\t\t    if (row + r < 0 || moduleCount <= row + r) {\n\t\t\t\t\t    continue;\n\t\t\t\t    }\n\n\t\t\t\t    for (var c = -1; c <= 1; c++) {\n\n\t\t\t\t\t    if (col + c < 0 || moduleCount <= col + c) {\n\t\t\t\t\t\t    continue;\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if (r == 0 && c == 0) {\n\t\t\t\t\t\t    continue;\n\t\t\t\t\t    }\n\n\t\t\t\t\t    if (dark == qrCode.isDark(row + r, col + c) ) {\n\t\t\t\t\t\t    sameCount++;\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t    }\n\n\t\t\t    if (sameCount > 5) {\n\t\t\t\t    lostPoint += (3 + sameCount - 5);\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL2\n\n\t    for (var row = 0; row < moduleCount - 1; row++) {\n\t\t    for (var col = 0; col < moduleCount - 1; col++) {\n\t\t\t    var count = 0;\n\t\t\t    if (qrCode.isDark(row,     col    ) ) count++;\n\t\t\t    if (qrCode.isDark(row + 1, col    ) ) count++;\n\t\t\t    if (qrCode.isDark(row,     col + 1) ) count++;\n\t\t\t    if (qrCode.isDark(row + 1, col + 1) ) count++;\n\t\t\t    if (count == 0 || count == 4) {\n\t\t\t\t    lostPoint += 3;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL3\n\n\t    for (var row = 0; row < moduleCount; row++) {\n\t\t    for (var col = 0; col < moduleCount - 6; col++) {\n\t\t\t    if (qrCode.isDark(row, col)\n\t\t\t\t\t    && !qrCode.isDark(row, col + 1)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 2)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 3)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 4)\n\t\t\t\t\t    && !qrCode.isDark(row, col + 5)\n\t\t\t\t\t    &&  qrCode.isDark(row, col + 6) ) {\n\t\t\t\t    lostPoint += 40;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    for (var col = 0; col < moduleCount; col++) {\n\t\t    for (var row = 0; row < moduleCount - 6; row++) {\n\t\t\t    if (qrCode.isDark(row, col)\n\t\t\t\t\t    && !qrCode.isDark(row + 1, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 2, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 3, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 4, col)\n\t\t\t\t\t    && !qrCode.isDark(row + 5, col)\n\t\t\t\t\t    &&  qrCode.isDark(row + 6, col) ) {\n\t\t\t\t    lostPoint += 40;\n\t\t\t    }\n\t\t    }\n\t    }\n\n\t    // LEVEL4\n\t    \n\t    var darkCount = 0;\n\n\t    for (var col = 0; col < moduleCount; col++) {\n\t\t    for (var row = 0; row < moduleCount; row++) {\n\t\t\t    if (qrCode.isDark(row, col) ) {\n\t\t\t\t    darkCount++;\n\t\t\t    }\n\t\t    }\n\t    }\n\t    \n\t    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n\t    lostPoint += ratio * 10;\n\n\t    return lostPoint;\t\t\n    }\n};\n\nmodule.exports = QRUtil;\n\n\n//# sourceURL=webpack:///./node_modules/qr.js/lib/util.js?')},function(module){eval('module.exports = JSON.parse("{\\"globals\\":{\\"color\\":\\"#909090\\",\\"background\\":\\"#ffffff\\",\\"border\\":\\"rgba(144,144,144,0.15)\\",\\"shadow\\":\\"rgba(0,0,0,0.32)\\"},\\"button_glow_border\\":{\\"border\\":\\"#dcdcdc\\",\\"background\\":\\"#f5f5f5\\",\\"color\\":\\"#444;\\",\\"hover_border\\":\\"#c6c6c6\\",\\"hover_background\\":\\"#f8f8f8\\",\\"hover_box_shadow\\":\\"0px 1px 1px rgba(0,0,0,0.1)\\",\\"hover_color\\":\\"#222\\",\\"active_border\\":\\"#c6c6c6\\",\\"active_background\\":\\"#f6f6f6\\",\\"active_box_shadow\\":\\"0px 0px 1px 2px rgba(0,0,0,0.1)\\",\\"active_color\\":\\"#333\\"},\\"button_solid\\":{\\"background\\":\\"#7492e7\\",\\"color\\":\\"#ffffff\\",\\"hover_background\\":\\"#4f70d0\\",\\"hover_color\\":\\"#ffffff\\"},\\"icon_button\\":{\\"color\\":\\"#909090\\",\\"hover\\":\\"#fcb63b\\"},\\"radio_button\\":{\\"color\\":\\"#909090\\",\\"background\\":\\"rgba(0,0,0,0)\\",\\"border\\":\\"#797878\\",\\"checkmark\\":\\"#797878\\"},\\"checkbox\\":{\\"color\\":\\"#909090\\",\\"background\\":\\"rgba(0,0,0,0)\\",\\"border\\":\\"#797878\\",\\"checkmark\\":\\"#797878\\"},\\"spinner\\":\\"#537dfb\\",\\"notification\\":{\\"background\\":\\"#ffffff\\",\\"border\\":\\"#4f4d4d\\",\\"border_top\\":\\"#d3d2d2\\",\\"close_button\\":\\"#6f6e6e\\",\\"icon\\":\\"#ffba7d\\",\\"message\\":\\"#1f1f1f\\",\\"description\\":\\"#000000\\",\\"button_underline\\":{\\"color\\":\\"#4f4d4d\\",\\"hover\\":\\"#1f1f1f\\"}},\\"tooltip\\":{\\"color\\":\\"#7f7f7f\\",\\"background\\":\\"rgba(255,255,255,0.9)\\",\\"border\\":\\"rgba(144,144,144,0.9)\\"},\\"scrollbar\\":{\\"background\\":\\"#ffffff\\",\\"background_firefox\\":\\"#e6ecfc\\",\\"border\\":\\"#c5c5c5\\",\\"thumb\\":\\"#a8a8a8\\"},\\"progress_bar\\":{\\"background\\":\\"#808080\\",\\"progress\\":\\"#84b082\\",\\"cancel\\":\\"#fd7171\\"},\\"accordion\\":{\\"header\\":{\\"background\\":\\"#e6ecfc\\",\\"color\\":\\"#6f91f0\\"},\\"content\\":{\\"background\\":\\"#f9fafe\\",\\"color\\":\\"#909090\\",\\"hyperlink\\":{\\"color\\":\\"#909090\\",\\"hover\\":\\"#6f91f0\\"}}},\\"header\\":\\"#585656\\",\\"footer_border_top\\":\\"#cdcdcd\\",\\"formats_table\\":{\\"color\\":\\"#797878\\",\\"row_border\\":\\"#cdcdcd\\",\\"row_hover_background\\":\\"rgba(255,162,0,0.1)\\",\\"media_type_icon\\":\\"#ffa200\\",\\"video_icon\\":\\"#a8a8a8\\",\\"service_icon\\":{\\"color\\":\\"#87a5fc\\",\\"hover\\":\\"#537dfb\\"}},\\"qr_code\\":{\\"color\\":\\"#585656\\",\\"error\\":\\"#ff6675\\"},\\"advert\\":{\\"title_color\\":\\"#7492e7\\",\\"color\\":\\"#000000\\",\\"num_color\\":\\"#7492e7\\",\\"figure\\":\\"#d4e2fc\\",\\"figure_border\\":\\"#dfe9fd\\",\\"figure_num_color\\":\\"#7492e7\\",\\"button_cancel\\":{\\"color\\":\\"#a8a8a8\\",\\"hover\\":\\"#797878\\"}}}");\n\n//# sourceURL=webpack:///./src/widget/themes/light.json?')},function(module){eval('module.exports = JSON.parse("{\\"globals\\":{\\"color\\":\\"#909090\\",\\"background\\":\\"#181818\\",\\"border\\":\\"#737373\\",\\"shadow\\":\\"rgba(152,150,150,0.20)\\"},\\"button_glow_border\\":{\\"border\\":\\"#909090\\",\\"background\\":\\"#f5f5f5\\",\\"color\\":\\"#444444\\",\\"hover_border\\":\\"#605f5f\\",\\"hover_background\\":\\"#f8f8f8\\",\\"hover_box_shadow\\":\\"0px 1px 1px rgba(255,255,255,0.1)\\",\\"hover_color\\":\\"#222222\\",\\"active_border\\":\\"#c6c6c6\\",\\"active_background\\":\\"#f6f6f6\\",\\"active_box_shadow\\":\\"0px 0px 1px 2px rgba(255,255,255,0.1)\\",\\"active_color\\":\\"#333333\\"},\\"button_solid\\":{\\"background\\":\\"#f5f5f5\\",\\"color\\":\\"#444444\\",\\"hover_background\\":\\"#f8f8f8\\",\\"hover_color\\":\\"#222222\\"},\\"icon_button\\":{\\"color\\":\\"#aeaeae\\",\\"hover\\":\\"#537dfb\\"},\\"radio_button\\":{\\"color\\":\\"#909090\\",\\"background\\":\\"rgba(0,0,0,0)\\",\\"border\\":\\"#e8e6e6\\",\\"checkmark\\":\\"#e8e6e6\\"},\\"checkbox\\":{\\"color\\":\\"#909090\\",\\"background\\":\\"rgba(0,0,0,0)\\",\\"border\\":\\"#e8e6e6\\",\\"checkmark\\":\\"#e8e6e6\\"},\\"spinner\\":\\"#537dfb\\",\\"notification\\":{\\"background\\":\\"#1f1f1f\\",\\"border\\":\\"#4f4d4d\\",\\"border_top\\":\\"#575757\\",\\"close_button\\":\\"#d6d6d6\\",\\"icon\\":\\"#919191\\",\\"message\\":\\"#ffffff\\",\\"description\\":\\"#ffffff\\",\\"button_underline\\":{\\"color\\":\\"#919191\\",\\"hover\\":\\"#d6d6d6\\"}},\\"tooltip\\":{\\"color\\":\\"#ffffff\\",\\"background\\":\\"rgba(24,24,24,0.9)\\",\\"border\\":\\"#737373\\"},\\"scrollbar\\":{\\"background\\":\\"#181818\\",\\"background_firefox\\":\\"#2c2c2c\\",\\"border\\":\\"#737373\\",\\"thumb\\":\\"#a8a8a8\\"},\\"progress_bar\\":{\\"background\\":\\"#808080\\",\\"progress\\":\\"#84b082\\",\\"cancel\\":\\"#fd7171\\"},\\"accordion\\":{\\"header\\":{\\"background\\":\\"#636775\\",\\"color\\":\\"#ffffff\\"},\\"content\\":{\\"background\\":\\"#4c4d51\\",\\"color\\":\\"#ffffff\\",\\"hyperlink\\":{\\"color\\":\\"#ffffff\\",\\"hover\\":\\"rgba(255,255,255,0.5)\\"}}},\\"header\\":\\"#f1f1f1\\",\\"footer_border_top\\":\\"#3e3e3e\\",\\"formats_table\\":{\\"color\\":\\"#b8b5b5\\",\\"row_border\\":\\"#3e3e3e\\",\\"row_hover_background\\":\\"rgba(255,255,255,0.1)\\",\\"media_type_icon\\":\\"#ffa200\\",\\"video_icon\\":\\"#a8a8a8\\",\\"service_icon\\":{\\"color\\":\\"#5a80ee\\",\\"hover\\":\\"#537dfb\\"}},\\"qr_code\\":{\\"color\\":\\"#f1f1f1\\",\\"error\\":\\"#ff6675\\"},\\"advert\\":{\\"title_color\\":\\"#f1f1f1\\",\\"color\\":\\"#aeaeae\\",\\"num_color\\":\\"#ffffff\\",\\"figure\\":\\"#696969\\",\\"figure_border\\":\\"#3b3b3b\\",\\"figure_num_color\\":\\"#ffffff\\",\\"button_cancel\\":{\\"color\\":\\"#aeaeae\\",\\"hover\\":\\"#f1f1f1\\"}}}");\n\n//# sourceURL=webpack:///./src/widget/themes/dark.json?')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// NAMESPACE OBJECT: ./src/services/youtube/index.js\nvar youtube_namespaceObject = {};\n__webpack_require__.r(youtube_namespaceObject);\n__webpack_require__.d(youtube_namespaceObject, "downloadStream", function() { return download_stream; });\n__webpack_require__.d(youtube_namespaceObject, "Youtube", function() { return youtube_Youtube; });\n__webpack_require__.d(youtube_namespaceObject, "getVideoInfo", function() { return youtube_get_video_info; });\n__webpack_require__.d(youtube_namespaceObject, "snap", function() { return youtube_snap; });\n__webpack_require__.d(youtube_namespaceObject, "getLang", function() { return lang_detect_getLang; });\n__webpack_require__.d(youtube_namespaceObject, "startLangObserver", function() { return startLangObserver; });\n__webpack_require__.d(youtube_namespaceObject, "getDir", function() { return getDir; });\n__webpack_require__.d(youtube_namespaceObject, "startDirObserver", function() { return startDirObserver; });\n__webpack_require__.d(youtube_namespaceObject, "getTheme", function() { return getTheme; });\n__webpack_require__.d(youtube_namespaceObject, "startThemeObserver", function() { return startThemeObserver; });\n\n// NAMESPACE OBJECT: ./src/services/youtube/embed/index.js\nvar embed_namespaceObject = {};\n__webpack_require__.r(embed_namespaceObject);\n__webpack_require__.d(embed_namespaceObject, "downloadStream", function() { return download_stream; });\n__webpack_require__.d(embed_namespaceObject, "getVideoInfo", function() { return embed_get_video_info; });\n__webpack_require__.d(embed_namespaceObject, "snap", function() { return youtube_snap; });\n__webpack_require__.d(embed_namespaceObject, "getLang", function() { return lang_detect_getLang; });\n__webpack_require__.d(embed_namespaceObject, "startLangObserver", function() { return startLangObserver; });\n__webpack_require__.d(embed_namespaceObject, "getDir", function() { return getDir; });\n__webpack_require__.d(embed_namespaceObject, "startDirObserver", function() { return startDirObserver; });\n__webpack_require__.d(embed_namespaceObject, "getTheme", function() { return embed_getTheme; });\n__webpack_require__.d(embed_namespaceObject, "YoutubeEmbed", function() { return embed_YoutubeEmbed; });\n__webpack_require__.d(embed_namespaceObject, "default", function() { return youtube_embed; });\n\n// CONCATENATED MODULE: ./src/utils/in-iframe.js\nconst inIframe = () => {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n};\n\n/* harmony default export */ var in_iframe = (inIframe);\n\n// EXTERNAL MODULE: ./src/config.js\nvar config = __webpack_require__(2);\n\n// EXTERNAL MODULE: ./src/utils/ctx.js\nvar utils_ctx = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./src/utils/inject-script/sprintf.js\n/* harmony default export */ var sprintf = (function (pattern, entries, mode) {\n  const replacer = function (match, key) {\n    let res;\n    /* eslint-disable no-prototype-builtins */\n    switch (true) {\n    case !mode || mode === "sloppy":\n      res = entries[key];\n      break;\n    case mode === "neat":\n      res = entries.hasOwnProperty(key) ? entries[key] : match;\n      break;\n    case mode === "strict":\n      if (entries.hasOwnProperty(key)) {\n        res = entries[key];\n      } else {\n        throw new Error(`gonzazoid.sprintf.js: missed ${key} entry in passed replacements`);\n      }\n      break;\n    default:\n    }\n    /* eslint-enable no-prototype-builtins */\n    return res;\n  };\n  return pattern.replace(/(?:\\/%(.+?)%\\/)/g, replacer);\n});\n\n// CONCATENATED MODULE: ./src/utils/inject-script/serialize-error.js\n/* rewrited from https://github.com/sindresorhus/serialize-error/blob/master/index.js */\n\n/* harmony default export */ var serialize_error = (function (value) {\n  // https://www.npmjs.com/package/destroy-circular\n  const destroyCircular = function (from, seen) {\n    let to;\n    if (Array.isArray(from)) {\n      to = [];\n    } else {\n      to = {};\n    }\n\n    seen.push(from);\n\n    Object.keys(from).forEach((key) => {\n      const val = from[key];\n\n      if (typeof val === "function") {\n        return;\n      }\n\n      if (!val || typeof val !== "object") {\n        to[key] = val;\n        return;\n      }\n\n      if (seen.indexOf(from[key]) === -1) {\n        to[key] = destroyCircular(from[key], seen.slice(0));\n        return;\n      }\n\n      to[key] = "[Circular]";\n    });\n\n    if (typeof from.name === "string") {\n      to.name = from.name;\n    }\n\n    if (typeof from.message === "string") {\n      to.message = from.message;\n    }\n\n    if (typeof from.stack === "string") {\n      to.stack = from.stack;\n    }\n\n    return to;\n  };\n\n  if (typeof value === "object") {\n    return destroyCircular(value, []);\n  }\n\n  // People sometimes throw things besides Error objects, so...\n\n  if (typeof value === "function") {\n    // JSON.stringify discards functions. We do to, unless a function is thrown directly.\n    return `[Function:  ${value.name || "anonymous"}]`;\n  }\n\n  return value;\n});\n\n// CONCATENATED MODULE: ./src/utils/inject-script/index.js\n\n\n\n/* harmony default export */ var inject_script = (function (document, func, ...params) {\n  const { MutationObserver } = document.defaultView;\n\n  return new Promise((resolve, reject) => {\n    const script = document.createElement("script");\n    script.type = "text/javascript";\n    script.charset = "utf-8";\n    script.defer = true;\n    script.async = true;\n\n    const executor = async function () {\n      const cScript = document.currentScript;\n      const funcToExec = /%funcSource%/;\n      const serializeError = /%serializeErrorSource%/;\n      // тут будут проблемы если не заэскепим двойные кавычки и спецсимволы\n      const argv = JSON.parse("/%argvSource%/");\n      try {\n        cScript.__response = argv.length ? funcToExec(...argv) : funcToExec();\n      } catch (err) {\n        cScript.__response = new Promise((res, rej) => {\n          rej(err);\n        });\n      }\n      try {\n        const values = await Promise.all([cScript.__response]);\n        // console.log("promise callback", cScript, values);\n        cScript.setAttribute("data-response", JSON.stringify(values[0]));\n        cScript.setAttribute("data-status", "fulfilled");\n      } catch (err) {\n        if (typeof err === "object" && err instanceof Error) {\n          cScript.setAttribute("data-type", "error");\n          cScript.setAttribute("data-response", JSON.stringify(serializeError(err)));\n        } else {\n          cScript.setAttribute("data-response", JSON.stringify(err));\n        }\n        cScript.setAttribute("data-status", "rejected");\n      }\n    };\n\n    const src = sprintf(executor.toString(), {\n      funcSource: (typeof func === "function" ? func.toString() : func),\n      serializeErrorSource: serialize_error.toString(),\n      argvSource: JSON.stringify(params)\n        .replace(/\\\\*\'/g, match => `${match.length % 2 ? "\\\\" : ""}${match}`)\n        .replace(/"/g, "\\\\\\""),\n    });\n    // console.log(src);\n    script.text = `(${src})();`;\n\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        // TODO attributeNameSpace - надо бы разобраться\n        if (mutation.type === "attributes" && mutation.attributeName && mutation.attributeName === "data-status") {\n          const status = mutation.target.getAttribute("data-status");\n          const response = mutation.target.getAttribute("data-response");\n          const result = response === "undefined" ? undefined : JSON.parse(response);\n          const type = mutation.target.getAttribute("data-type");\n\n          script.parentElement.removeChild(script);\n          switch (status) {\n          case "fulfilled":\n            resolve(result);\n            break;\n          case "rejected":\n            if (!type || type !== "error") {\n              reject(result);\n            } else {\n              const err = new Error();\n              reject(Object.assign(err, result));\n            }\n            break;\n          default:\n            reject(new Error("injectScript: unknown response"));\n          }\n        }\n        observer.disconnect();\n      });\n    });\n    observer.observe(script, { attributes: true });\n    (document.head || document.documentElement || document).appendChild(script);\n  });\n});\n\n// CONCATENATED MODULE: ./src/utils/unsafe-window.js\n\n\n/* harmony default export */ var unsafe_window = ({\n  get(path) {\n    const getter = function (_path) {\n      return _path.split(".").reduce((acc, token) => (acc ? acc[token] : undefined), window);\n    };\n    return inject_script(document, getter, path);\n  },\n  set(path, value) {\n    const setter = function (_path, _value) {\n      const tokens = _path.split(".");\n      let reciever = window;\n      for (let i = 0; i < (tokens.length - 1); i++) {\n        reciever = reciever[tokens[i]];\n      }\n      reciever[tokens.pop()] = _value;\n    };\n    return inject_script(document, setter, path, value);\n  },\n});\n\n// CONCATENATED MODULE: ./src/utils/minify.js\nconst minify = css => (\n  css.replace(/\\s\\s+/g, "")\n    .replace(/ {/g, "{")\n    .replace(/;}/g, "}")\n    .replace(/: /g, ":")\n);\n\n/* harmony default export */ var utils_minify = (minify);\n\n// CONCATENATED MODULE: ./src/utils/debounce.js\nconst debounce = function (func, timeout) {\n  let lock = false;\n  return function () {\n    if (lock) {\n      return;\n    }\n    const callback = () => {\n      lock = false;\n      func();\n    };\n    lock = true;\n    setTimeout(callback, timeout);\n  };\n};\n\n/* harmony default export */ var utils_debounce = (debounce);\n\n// CONCATENATED MODULE: ./src/services/common.js\n\n\n\n\nclass common_Common {\n  constructor(widget, handlers) {\n    this.widget = widget;\n    this.handlers = handlers;\n    if (handlers && "onLocationChanged" in handlers) {\n      this.checkLocation = () => {\n        if (this.location !== window.location.href) {\n          this.location = window.location.href;\n          this.handlers.onLocationChanged.bind(this)();\n        }\n        setTimeout(this.checkLocation, 1000);\n      };\n    }\n  }\n\n  gotoService(evt) {\n    if (this.handlers && this.handlers.onClick) {\n      this.handlers.onClick.bind(this)();\n      return;\n    }\n    evt.preventDefault();\n    evt.stopPropagation();\n    try {\n      const landingUrl = this.ctx.getServiceUrl(this.ctx.window.location.href);\n      window.open(landingUrl, "_blank");\n    } catch (e) {\n      console.log("gotoService: ", e);\n    }\n  }\n\n  addButton() {\n    // console.log("ADD BUTTON!!!");\n    const buttonInserted = document.getElementById("unidownloader");\n    if (buttonInserted) {\n      return;\n    }\n    const o = this.ctx.window.document;\n    try {\n      if (o !== null && o.body !== null && o.location !== null) {\n        const button = this.getDownloadButton();\n        if (button) {\n          const inserted = this.insertDownloadButton(o, button, this.getDownloadButton.bind(this));\n          if (inserted) {\n            if (this.handlers && this.handlers.onInsert) {\n              this.handlers.onInsert.bind(this)();\n            }\n            this.checkLocation();\n          }\n        }\n      }\n    } catch (e) {\n      console.log("error in addButton: ", e);\n    }\n  }\n\n  onLoad(callback) {\n    if (this.exactMatch()) {\n      this.checkLayout(callback);\n    }\n  }\n\n  checkLayout(callback) {\n    // console.log("CHECK LAYOUT!!!");\n    const options = this.service in config["a" /* default */] ? config["a" /* default */][this.service] : config["a" /* default */].default;\n    if (!this.counter) {\n      this.counter = 0;\n    }\n    if (this.layoutIsReady()) {\n      this.counter = 0;\n      callback();\n    } else if (this.counter > options.attempts) {\n      this.ctx.log(this.service, "layout");\n      this.counter = 0;\n    } else {\n      this.counter += 1;\n    }\n  }\n\n  start(ctx, getDownloadButton) {\n    this.getDownloadButton = getDownloadButton;\n    const observerConfig = {\n      childList: true,\n      subtree: true,\n    };\n    const addButton = this.addButton.bind(this);\n    const callback = utils_debounce(this.onLoad.bind(this, addButton), 1e3);\n    const observer = new MutationObserver(callback);\n    observer.observe(window.document.body, observerConfig);\n    if (ctx) {\n      this.ctx = ctx;\n    }\n  }\n}\n\n/* harmony default export */ var common = (common_Common);\n\n// EXTERNAL MODULE: ./node_modules/p-queue/dist/index.js\nvar dist = __webpack_require__(28);\nvar dist_default = /*#__PURE__*/__webpack_require__.n(dist);\n\n// CONCATENATED MODULE: ./src/services/youtube/http-routines-tm.js\nconst getChunk = function (url, start, end) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      responseType: "arraybuffer",\n      method: "GET",\n      url: `${url}&range=${start}-${end}`,\n      onload: ({ response }) => {\n        resolve(response);\n      },\n      onerror: (err) => {\n        console.log(err);\n        reject(err);\n      },\n    };\n    try {\n      /* eslint-disable no-undef */\n      GM_xmlhttpRequest(options);\n      /* eslint-enable no-undef */\n    } catch (e) {\n      console.log(e);\n      reject(e);\n    }\n  });\n};\n\nconst getContentLength = function (url) {\n  return new Promise((resolve, reject) => {\n    const options = {\n      method: "HEAD",\n      url,\n      onload: (response) => {\n        const headers = response.responseHeaders.split("\\n");\n        const contentLength = headers.filter(header => header.split(":")[0].trim() === "content-length");\n        if (!contentLength.length) {\n          reject(new Error("unknown"));\n        }\n        try {\n          const length = parseInt(contentLength[0].split(":")[1].trim(), 10);\n          if (length) {\n            resolve(length);\n          } else {\n            reject(new Error("zero length"));\n          }\n        } catch (err) {\n          reject(err);\n        }\n      },\n      onerror: (err) => {\n        reject(err);\n      },\n    };\n    try {\n      /* eslint-disable no-undef */\n      GM_xmlhttpRequest(options);\n      /* eslint-enable no-undef */\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nconst checkDirectDownload = function (url) {\n  return new Promise((resolve) => {\n    const options = {\n      method: "HEAD",\n      url,\n      onload: (response) => {\n        const headers = response.responseHeaders.split("\\n");\n        const contentDisposition = headers.filter(header => header.split(":")[0].trim() === "content-disposition");\n        resolve(contentDisposition.length > 0);\n      },\n    };\n    try {\n      /* eslint-disable no-undef */\n      GM_xmlhttpRequest(options);\n      /* eslint-enable no-undef */\n    } catch (err) {\n      resolve(false);\n    }\n  });\n};\n\n\n\n// CONCATENATED MODULE: ./src/services/youtube/download-stream.js\n\n\n\n// 1612482073 - ok\n// 1886606530 https://www.youtube.com/watch?v=P9Z6okLJDv0 1080 - ok\n// 2001395526 https://www.youtube.com/watch?v=lTvYjERVAnY 1080 - ok very slow\n// 2243279747 https://www.youtube.com/watch?v=D6tC1pyrsTM - Uncaught (in promise) Error: File could not be read! Code=0 at FileReader.a.onerror\n// video downloader\n/* eslint-disable no-undef, no-unused-vars */\n\nconst chunkSize = 1024 * 1024 * 16;\nconst getStorage = async function (dbName) {\n  // return new Uint8Array(size);\n  return new Promise((res, rej) => {\n    const request = window.indexedDB.open(dbName, 2);\n    request.onerror = function () {\n      rej(new Error("Почему Вы не позволяете моему веб-приложению использовать IndexedDB?!"));\n    };\n    request.onupgradeneeded = function (event) {\n      // console.log("ON UPGRADE!!!");\n      const db = event.target.result;\n      const objectStore = db.createObjectStore("chunks", { keyPath: "offs" });\n      objectStore.transaction.oncomplete = function () {\n        res(db);\n      };\n    };\n  });\n};\n\nconst addChunk = function (storage, chunk, offs) {\n  const objectStore = storage.transaction("chunks", "readwrite").objectStore("chunks");\n  objectStore.add({ offs, chunk });\n};\n\nconst download_stream_downloadStream = async function ({ url, contentLength: _contentLength }, progressCb) {\n  let contentLength;\n  let xhr;\n  const dbName = `${url}_${contentLength}`;\n\n  if (_contentLength) {\n    contentLength = typeof _contentLength === "string" ? parseInt(_contentLength, 10) : _contentLength;\n    console.log(`Content length ${(contentLength / (1024 * 1024 * 1024)).toFixed(4)} Gb`);\n  } else {\n    try {\n      contentLength = await getContentLength(url);\n      console.log(`Content length ${(contentLength / (1024 * 1024 * 1024)).toFixed(4)} Gb`);\n    } catch (e) {\n      console.log("ERROR!!!", e);\n      // TODO cancel downloading and warning user\n    }\n  }\n  progressCb({\n    loaded: 0,\n    total: contentLength,\n    speed: 0,\n  });\n\n  const data = await getStorage(dbName);\n  let downloaded = 0;\n  const queue = new dist_default.a({ concurrency: 3 });\n  const startTime = Date.now();\n  const ps = [];\n  for (let start = 0; start <= contentLength; start += chunkSize) {\n    const exceeded = start + chunkSize >= contentLength;\n    const curChunkSize = exceeded ? contentLength - start : chunkSize;\n    const end = start + curChunkSize - 1;\n    /* eslint-disable-next-line no-loop-func */\n    const p = queue.add(async () => {\n      const buf = await getChunk(url, start, end);\n      downloaded += curChunkSize;\n      addChunk(data, buf, start);\n      const ds = (Date.now() - startTime + 1) / 1000;\n      progressCb({\n        loaded: downloaded,\n        total: contentLength,\n        speed: downloaded / ds,\n      });\n    });\n    ps.push(p);\n  }\n\n  /* eslint-disable-next-line no-async-promise-executor */\n  const result = new Promise(async (res, rej) => {\n    await Promise.all(ps);\n    let count = 0;\n    const select = function () {\n      const transaction = data.transaction("chunks");\n      const objectStore = transaction.objectStore("chunks");\n      const all = objectStore.getAll();\n      all.onsuccess = function (event) {\n        console.log("Got all chunks: ");\n        const arrBuff = event.target.result.map(rec => rec.chunk);\n        data.close();\n        window.indexedDB.deleteDatabase(dbName);\n        res(new Blob(arrBuff, { type: "application/octet-binary" }));\n      };\n      transaction.onerror = function (event) {\n        if (count < 3) {\n          count++;\n          select();\n        } else {\n          count = 0;\n          console.log(`try to delete ${dbName}`);\n          data.close();\n          window.indexedDB.deleteDatabase(dbName);\n          rej(event);\n        }\n      };\n    };\n\n    select(res, rej);\n  });\n\n  const cancel = function () {\n    queue.pause();\n    queue.clear();\n    data.close();\n    const DBDeleteRequest = window.indexedDB.deleteDatabase(dbName);\n    DBDeleteRequest.onerror = function (event) {\n      console.log("Error deleting database.", dbName, event);\n    };\n    DBDeleteRequest.onsuccess = function (event) {\n      console.log("Database deleted successfully", dbName, event);\n    };\n    DBDeleteRequest.onblocked = function (e) {\n      console.log("blocked: ", e);\n    };\n  };\n\n  return { cancel, result };\n};\n\n/* harmony default export */ var download_stream = (download_stream_downloadStream);\n\n// CONCATENATED MODULE: ./src/services/youtube/utils/make-logger.js\nconst makeLogger = function (console, tag, mode) {\n  const acc = {};\n  const getFn = function (k) {\n    if (mode) {\n      return (...args) => console[k](`${tag}: ${args[0]}`, ...args.slice(1));\n    }\n    return () => undefined;\n  };\n\n  Object.keys(console)\n    .forEach((k) => {\n      acc[k] = getFn(k);\n    });\n  return acc;\n};\n\n/* harmony default export */ var make_logger = (makeLogger);\n\n// CONCATENATED MODULE: ./src/services/youtube/get-video-info-endpoints/get-video-info.js\n\n\nconst get_video_info_getVideoInfo = async function (id) {\n  const getHL = function () {\n    return `${window.ytcfg.data_.HL}_${window.ytcfg.data_.GL}`;\n  };\n\n  let hl;\n  try {\n    hl = await inject_script(document, getHL);\n  } catch (e) {\n    console.log(e);\n  }\n\n  const url = `https://www.youtube.com/get_video_info?video_id=${id}&ps=default&hl=${hl}&html5=1`;\n  const options = {\n    mode: "no-cors",\n    method: "GET",\n    headers: {\n      "Content-Type": "application/json",\n    },\n  };\n  try {\n    const newEndpointResponse = await fetch(url, options);\n    const contentType = newEndpointResponse.headers.get("content-type");\n    if (contentType === "application/x-www-form-urlencoded") {\n      const videoInfo = await newEndpointResponse.text();\n      const searchParams = new URLSearchParams(videoInfo);\n\n      const playerResponse = JSON.parse(searchParams.get("player_response"));\n      return playerResponse;\n    }\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n  return null;\n};\n\n/* harmony default export */ var get_video_info = (get_video_info_getVideoInfo);\n\n// CONCATENATED MODULE: ./src/services/youtube/get-video-info-endpoints/player.js\n\n\n\nconst player_getVideoInfo = async function (id) {\n  const getApiKey = function () {\n    if (window.ytplayer && window.web_player_context_config && window.web_player_context_config.innertubeApiKey) {\n      return window.web_player_context_config.innertubeApiKey;\n    }\n    if (window.yt && window.yt.config_ && window.yt.config_.INNERTUBE_API_KEY) {\n      return window.yt.config_.INNERTUBE_API_KEY;\n    }\n    console.log("API key not found!!!");\n    return null;\n  };\n\n  let context;\n  let apiKey;\n  try {\n    context = await unsafe_window.get("window.yt.config_.INNERTUBE_CONTEXT");\n    apiKey = await inject_script(document, getApiKey);\n  } catch (e) {\n    console.log(e);\n  }\n\n  /* eslint-disable no-undef, no-restricted-globals, max-len */\n  const payload = {\n    context: {\n      client: context.client,\n      user: context.user,\n      request: context.request,\n      clickTracking: context.clickTracking,\n    },\n    videoId: id,\n  };\n\n  const url = `https://${window.location.hostname}/youtubei/v1/player?key=${apiKey}`;\n  const options = {\n    mode: "no-cors",\n    method: "POST",\n    headers: {\n      "Content-Type": "application/json",\n    },\n    body: JSON.stringify(payload),\n  };\n  const newEndpointResponse = await fetch(url, options);\n  const videoInfo = await newEndpointResponse.json();\n  return videoInfo;\n};\n\n/* harmony default export */ var player = (player_getVideoInfo);\n\n// CONCATENATED MODULE: ./src/services/youtube/get-video-info-endpoints/globals.js\n\n\nconst globals_getVideoInfo = async function (id) {\n  /* eslint-disable no-shadow */\n  const checker = async function (id) {\n    if (window.ytInitialPlayerResponse &&\n        window.ytInitialPlayerResponse.videoDetails &&\n        window.ytInitialPlayerResponse.videoDetails.videoId === id\n    ) {\n      return window.ytInitialPlayerResponse;\n    }\n    if (window.lastResponse) {\n      await window.lastResponse.request;\n      console.log(window.lastResponse);\n      const videoInfo = await window.lastResponse.body.json();\n      delete window.lastResponse;\n      if (videoInfo.videoDetails && videoInfo.videoDetails.videoId === id) {\n        return videoInfo;\n      }\n      return null;\n    }\n    return null;\n  };\n\n  try {\n    const response = await inject_script(document, checker, id);\n    return response;\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\n/* harmony default export */ var get_video_info_endpoints_globals = (globals_getVideoInfo);\n\n// CONCATENATED MODULE: ./src/services/youtube/utils/parse-decsig.js\n\n\nconst $ = (s, x = document) => x.querySelector(s);\nconst logger = make_logger(console, "YTDL", true);\n\nlet mutex;\nlet transformator;\nconst mapper = {};\n\nconst getInitialFunctionName = function (basejs) {\n  const patterns = [\n    /\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*encodeURIComponent\\s*\\(\\s*([a-zA-Z0-9$]+)\\(/,\n    /\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*encodeURIComponent\\s*\\(\\s*([a-zA-Z0-9$]+)\\(/,\n    /(?:\\b|[^a-zA-Z0-9$])([a-zA-Z0-9$]{2})\\s*=\\s*function\\(\\s*a\\s*\\)\\s*\\{\\s*a\\s*=\\s*a\\.split\\(\\s*""\\s\\)/,\n    /([a-zA-Z0-9$]+)\\s*=\\s*function\\(\\s*a\\s*\\)\\s*{\\s*a\\s*=\\s*a\\.split\\(\\s*""\\s*\\)/,\n    /(?:["\'])signature\\1\\s*,\\s*([a-zA-Z0-9$]+)\\(/,\n    /\\.sig\\|\\|([a-zA-Z0-9$]+)\\(/,\n    /yt\\.akamaized\\.net\\/\\)\\s*\\|\\|\\s*.*?\\s*[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*(?:encodeURIComponent\\s*\\()?\\s*([a-zA-Z0-9$]+)\\(/,\n    /\\b[cs]\\s*&&\\s*[adf]\\.set\\([^,]+\\s*,\\s*([a-zA-Z0-9$]+)\\(/,\n    // /\\b[a-zA-Z0-9]+\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*([a-zA-Z0-9$]+)\\(/,\n    /\\bc\\s*&&\\s*a\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*([a-zA-Z0-9$]+)\\(/,\n    /\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s*\\(\\s*([a-zA-Z0-9$]+)\\(/,\n    /\\bc\\s*&&\\s*[a-zA-Z0-9]+\\.set\\([^,]+\\s*,\\s*\\([^)]*\\)\\s\\(\\s*([a-zA-Z0-9$]+)\\(/,\n  ];\n  /* eslint-disable no-restricted-syntax, guard-for-in */\n  for (const pattern in patterns) {\n    const match = basejs.match(patterns[pattern]);\n    if (match) {\n      console.log("MATCHED!!!", patterns[pattern], match);\n      return match[1];\n    }\n    console.log("MISSED!!!", pattern);\n  }\n  return null;\n};\n\nconst getTransformPlan = function (basejs) {\n  const name = getInitialFunctionName(basejs);\n  const regexp = `${name}=function\\\\(\\\\w\\\\)\\\\{[a-z=\\\\.\\\\(\\\\"\\\\)]*;(.*);(?:.+)\\\\}`;\n  const plan = basejs.match(new RegExp(regexp));\n  const varName = plan[1].split(";")[0].match(/^(\\w+)\\W/);\n  return plan ? { plan: plan[0], varName: varName[1] } : null;\n};\n\nconst decipherSig = async (sig) => {\n  try {\n    if (!mutex) {\n      /* eslint-disable no-async-promise-executor */\n      mutex = new Promise(async (res) => {\n        const basejsUrl = $("script[src$=\\"base.js\\"]").src;\n        const basejs = await (await fetch(basejsUrl)).text();\n        const { plan, varName } = getTransformPlan(basejs);\n\n        if (!plan) {\n          throw new Error("can\'t figure out tranfromation plan");\n        }\n        const planBody = plan.match(/{([^]*?)}/)[1];\n        const firstArgName = plan.match(/function\\(([^)]*)\\){/)[1];\n        if (!varName) {\n          // todo ERROR\n        }\n        const transformObjectPattern = new RegExp(`var\\\\s+${varName}={([^]*?)};`);\n        const transformObjectSrc = basejs.match(transformObjectPattern);\n        const transformObject = transformObjectSrc[1];\n        transformObject.split("\\n").forEach((rec) => {\n          const [name, func] = rec.split(":");\n          const args = func.match(/function\\((.*?)\\){(.*?)}/);\n          /* eslint-disable no-new-func */\n          mapper[name] = new Function(...args[1].split(","), args[2]);\n        });\n        transformator = new Function(firstArgName, varName, planBody);\n        res();\n      });\n      /* eslint-enable no-async-promise-executor */\n    }\n    await mutex;\n    return transformator(sig, mapper);\n  } catch (e) {\n    logger.error("parsedecsig error: %o", e);\n    throw e;\n  }\n};\n\n/* harmony default export */ var parse_decsig = (decipherSig);\n\n// CONCATENATED MODULE: ./src/services/youtube/get-video-info-endpoints/index.js\n\n\n\n\n\nconst isAcceptable = function (response, id) {\n  if (!response) {\n    return false;\n  }\n  if (!response.videoDetails || response.videoDetails.videoId !== id) {\n    return false;\n  }\n  if (!response.streamingData) {\n    return false;\n  }\n  return true;\n};\n\n/* harmony default export */ var get_video_info_endpoints = (async function (id) {\n  let playerResponse = await get_video_info_endpoints_globals(id);\n  if (isAcceptable(playerResponse, id)) {\n    console.log("nice shot, videoInfo already fetched.", playerResponse);\n  } else {\n    playerResponse = await get_video_info(id);\n    // console.log("first attempt response:", playerResponse);\n    if (!isAcceptable(playerResponse, id)) {\n      playerResponse = await player(id);\n      // console.log("second attempt response", playerResponse);\n    }\n  }\n\n  if (!isAcceptable(playerResponse, id)) {\n    return null;\n  }\n\n  if (playerResponse.streamingData.adaptiveFormats) {\n    /* eslint-disable no-restricted-syntax, no-await-in-loop */\n    for (const rec of playerResponse.streamingData.adaptiveFormats) {\n      if (rec.signatureCipher) {\n        const params = new URLSearchParams(rec.signatureCipher);\n        const sig = await parse_decsig(params.get("s"));\n        rec.url = `${params.get("url")}&sig=${sig}`;\n      }\n    }\n  }\n\n  if (playerResponse.streamingData.formats) {\n    for (const rec of playerResponse.streamingData.formats) {\n      if (rec.signatureCipher) {\n        const params = new URLSearchParams(rec.signatureCipher);\n        const sig = await parse_decsig(params.get("s"));\n        rec.url = `${params.get("url")}&sig=${sig}`;\n      }\n    }\n  }\n  /* eslint-enable no-restricted-syntax, no-await-in-loop */\n  return playerResponse;\n});\n\n// CONCATENATED MODULE: ./src/services/youtube/utils/transform-video-info.js\n\n\n/* harmony default export */ var transform_video_info = (async function (data, id) {\n  const { title } = data.videoDetails;\n  const injectTitle = items => items.map(item => ({ ...item, title }));\n\n  const video = !data.streamingData.adaptiveFormats ? [] : data.streamingData.adaptiveFormats\n    .filter(x => x.mimeType.includes("video/"))\n    .map((obj, index) => {\n      const { fps } = obj;\n      const [, type] = /video\\/([^;]+);/.exec(obj.mimeType);\n      return {\n        obj,\n        qualityNum: parseInt(obj.qualityLabel, 10),\n        qualityLabel: obj.qualityLabel,\n        type,\n        mimeType: obj.mimeType,\n        contentLength: parseInt(obj.contentLength, 10),\n        fps: fps || 30,\n        height: obj.height,\n        width: obj.width,\n        muxable: true,\n        id: index,\n      };\n    })\n    .sort((a, b) => {\n      if (a.qualityNum === b.qualityNum) {\n        return b.fps - a.fps; // ex: 30-60=-30, then a will be put before b\n      }\n      return b.qualityNum - a.qualityNum;\n    });\n  const audio = !data.streamingData.adaptiveFormats ? [] : data.streamingData.adaptiveFormats\n    .filter(x => x.mimeType.includes("audio/"))\n    .map(obj => ({\n      mimeType: obj.mimeType,\n      bitrate: obj.bitrate,\n      obj,\n    }));\n  const isLiveStream = data.playabilityStatus.liveStreamability;\n\n  const streams = !data.streamingData.formats ? [] : (await Promise.all(data.streamingData.formats.map(async (stream) => {\n    const qualityNum = parseInt(stream.qualityLabel, 10);\n    /* eslint-disable-next-line no-unused-vars */\n    const [_, type] = /video\\/([^;]+);/.exec(stream.mimeType);\n    const addInfo = {};\n    try {\n      addInfo.contentLength = stream.contentLength ? parseInt(stream.contentLength, 10) : await getContentLength(stream.url);\n    } catch (e) {\n      // nothing\n    }\n    if (await checkDirectDownload(`${stream.url}&title=${title}`)) {\n      addInfo.directUrl = `${stream.url}&title=${title}`;\n    }\n    return {\n      obj: stream,\n      ...stream,\n      qualityNum,\n      qualityLabel: stream.qualityLabel,\n      type,\n      ...addInfo,\n    };\n  }))).filter(stream => stream.directUrl || stream.contentLength);\n  const expires = Math.floor(Date.now() / 1000) + parseInt(data.streamingData.expiresInSeconds, 10);\n  const result = {\n    id,\n    isLiveStream,\n    expires,\n    streams: injectTitle(streams),\n    video: injectTitle(video),\n    audio: injectTitle(audio),\n  };\n  return result;\n});\n\n// CONCATENATED MODULE: ./src/utils/global-storage-tm.js\nconst get = function (key) {\n  const value = window.GM_getValue(key);\n  return new Promise(resolve => resolve(value ? JSON.parse(value) : value));\n};\n\nconst set = function (key, value) {\n  window.GM_setValue(key, JSON.stringify(value));\n};\n\nconst validateKey = function (key) {\n  const value = window.GM_getValue(key);\n  if (value) {\n    const data = JSON.parse(value);\n    if (data && data.expires && Date.now() / 1000 > data.expires) {\n      window.GM_deleteValue(key);\n    }\n  }\n};\n\nconst validateYoutubeCache = async function () {\n  const keys = window.GM_listValues().filter(key => key.startsWith("youtube_"));\n  keys.forEach(key => setTimeout(() => validateKey(key), 0));\n};\n\nconst runValidate = function () {\n  validateYoutubeCache();\n};\n\nconst observe = function (key, listener) {\n  window.GM_addValueChangeListener(key, listener);\n};\n\n/* harmony default export */ var global_storage_tm = ({\n  get,\n  set,\n  observe,\n  runValidate,\n});\n\n// CONCATENATED MODULE: ./src/services/youtube/utils/cache.js\n\n\nconst updateCache = function (id, data) {\n  global_storage_tm.set(`youtube_${id}`, data);\n  global_storage_tm.runValidate();\n};\n\nconst checkCache = async function (id) {\n  const info = await global_storage_tm.get(`youtube_${id}`);\n  console.log("CACHE!!!", info);\n  return info && Date.now() / 1000 < info.expires ? info : null;\n};\n\n\n\n// CONCATENATED MODULE: ./src/services/youtube/get-video-info.js\n\n\n\n\n\n\nconst get_video_info_logger = make_logger(console, "YTDL", true);\n\nconst youtube_get_video_info_getVideoInfo = async (url) => {\n  const urlObj = new URL(url);\n  /* eslint-disable-next-line no-restricted-globals */\n  const id = new URLSearchParams(urlObj.search || location.search).get("v");\n  console.log("url: ", url, "ID!!!", id);\n  try {\n    const cached = await checkCache(id);\n    if (cached) {\n      return cached;\n    }\n    const data = await get_video_info_endpoints(id);\n    const result = await transform_video_info(data, id);\n\n    console.log("cache missed");\n    updateCache(id, result);\n    return result;\n  } catch (err) {\n    if (err === "Adblock conflict") {\n      // TODO behavior\n      // const str = app.strings.get_video_failed.replace("%s", `https://www.youtube.com/get_video_info?video_id=${id}&el=detailpage`);\n      // prompt(str, "@@||www.youtube.com/get_video_info?*=detailpage$xhr,domain=youtube.com");\n    }\n    get_video_info_logger.error("load", err);\n  }\n  return null;\n};\n\n/* harmony default export */ var youtube_get_video_info = (youtube_get_video_info_getVideoInfo);\n\n// CONCATENATED MODULE: ./src/services/youtube/snap.js\n/* harmony default export */ var youtube_snap = (function () {\n  const video = document.querySelector("video");\n  const canvas = document.createElement("canvas");\n  const context = canvas.getContext("2d");\n  // const ratio = video.videoWidth / video.videoHeight;\n  const w = video.videoWidth;\n  const h = video.videoHeight;\n  canvas.width = video.videoWidth;\n  canvas.height = video.videoHeight;\n  context.fillRect(0, 0, w, h);\n  context.drawImage(video, 0, 0, w, h);\n  const fullQuality = canvas.toDataURL("image/jpeg", 1.0);\n  return fullQuality;\n});\n\n// CONCATENATED MODULE: ./src/services/youtube/lang-detect.js\nconst lang_detect_html = document.querySelector("html");\n\nconst lang_detect_getLang = function () {\n  const htmlAttrLang = lang_detect_html.getAttribute("lang");\n  const cisLangs = ["ru-RU", "uk-UA", "be-BY", "kk-KZ", "ky-KG", "hy-AM", "ka-GE", "az-Latn-AZ"];\n  const lng = cisLangs.indexOf(htmlAttrLang) !== -1 ? "ru" : "en";\n  return lng;\n};\n\nconst startLangObserver = function (getLangFromSettings, setLang) {\n  const localeObserver = new MutationObserver((mutations) => {\n    mutations.some((mutation) => {\n      if (mutation.type === "attributes" && mutation.attributeName === "lang") {\n        if (getLangFromSettings() === "autoDetect") {\n          setLang(lang_detect_getLang());\n        }\n        return true;\n      }\n      return false;\n    });\n  });\n  localeObserver.observe(lang_detect_html, { attributes: true });\n};\n\n\n\n// CONCATENATED MODULE: ./src/services/youtube/dir-detect.js\nconst getDir = function () {\n  const body = document.querySelector("body");\n  const dir = body.getAttribute("dir") === "rtl" ? "rtl" : "ltr";\n  return dir;\n};\n\nconst startDirObserver = function (setDir) {\n  const body = document.querySelector("body");\n  const dirObserver = new MutationObserver((mutations) => {\n    mutations.some((mutation) => {\n      if (mutation.type === "attributes" && mutation.attributeName === "dir") {\n        setDir(getDir());\n        return true;\n      }\n      return false;\n    });\n  });\n  dirObserver.observe(body, { attributes: true });\n};\n\n\n\n// CONCATENATED MODULE: ./src/services/youtube/theme-detect.js\nconst theme_detect_html = document.querySelector("html");\n\nconst getTheme = function () {\n  const theme = theme_detect_html.getAttribute("dark") === "true" ? "dark" : "default";\n  return theme;\n};\n\nconst startThemeObserver = function (setTheme) {\n  const themeObserver = new MutationObserver((mutations) => {\n    mutations.some((mutation) => {\n      if (mutation.type === "attributes" && mutation.attributeName === "dark") {\n        setTheme(getTheme());\n        return true;\n      }\n      return false;\n    });\n  });\n\n  themeObserver.observe(theme_detect_html, { attributes: true });\n};\n\n\n\n// CONCATENATED MODULE: ./src/services/youtube/inject.js\nconst patchFetch = function () {\n  const x = window.fetch;\n  if (!x.patched) {\n    window.fetch = function (...rest) {\n      const request = x.apply(this, rest);\n      if (/player\\?key/.test(rest[0].url)) {\n        // const id = /player\\?key=([^&]+)/.exec(rest[0].url)[1];\n        window.lastResponse = {\n          request,\n        };\n        const waitForResponse = async function () {\n          const response = await window.lastResponse.request;\n          window.lastResponse.body = response.clone();\n        };\n        waitForResponse();\n      }\n      return request;\n    };\n    window.fetch.patched = true;\n  }\n};\n\n/* harmony default export */ var inject = (patchFetch);\n\n// CONCATENATED MODULE: ./src/services/youtube/index.js\n\n\n\n\n\n\n\n\n\n\n\n\nclass youtube_Youtube extends common {\n  constructor(widget, handlers) {\n    super(widget, handlers);\n    this.service = "youtube";\n  }\n\n  checkService(location) {\n    // console.log("CHECK SERVICE!!!", location.href);\n    const url = location.href;\n    if (/^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be)/.test(url)) {\n      const isEmbed = /^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/embed/.test(url);\n      if (!isEmbed) {\n        inject_script(window.document, inject);\n      }\n      return !isEmbed;\n    }\n    return false;\n  }\n\n  exactMatch() {\n    const url = this.ctx.window.location.href;\n    const exact = /^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/watch\\?/.test(url);\n    if (exact) {\n      inject_script(window.document, inject);\n    }\n    return exact;\n  }\n\n  insertDownloadButton(holder, button) {\n    const t = holder.querySelector("#meta #meta-contents #top-row #subscribe-button");\n    const e = holder.querySelector("#unidownloader");\n    if (t === null || e !== null) {\n      return false;\n    }\n    const topRowObserver = new MutationObserver(() => {\n      if (t.parentNode.contains(button)) {\n        const subscribeButton = t.children && t.children[0] && t.children[0].children && t.children[0].children[0];\n        if (subscribeButton) {\n          topRowObserver.disconnect();\n          const font = (() => {\n            const subscribeButtonText = subscribeButton.children && subscribeButton.children[0];\n            const subscribeButtonTextStyle = subscribeButtonText && getComputedStyle(subscribeButtonText);\n            let result = "";\n            if (subscribeButtonTextStyle) {\n              const elementFont = subscribeButtonTextStyle.getPropertyValue("font");\n              if (elementFont) {\n                result = `font: ${elementFont};`;\n              } else {\n                const fontStyle = subscribeButtonTextStyle.getPropertyValue("font-style");\n                if (fontStyle) result += `font-style: ${fontStyle};`;\n                const fontVariant = subscribeButtonTextStyle.getPropertyValue("font-variant");\n                if (fontVariant) result += `font-variant: ${fontVariant};`;\n                const fontWeight = subscribeButtonTextStyle.getPropertyValue("font-weight");\n                if (fontWeight) result += `font-weight: ${fontWeight};`;\n                const fontSize = subscribeButtonTextStyle.getPropertyValue("font-size");\n                if (fontSize) result += `font-size: ${fontSize};`;\n                const fontFamily = subscribeButtonTextStyle.getPropertyValue("font-family");\n                if (fontFamily) result += `font-family: ${fontFamily};`;\n              }\n            }\n            return result;\n          })();\n          const css = utils_minify(`\n            #unidownloader {\n              display: flex;\n              margin: auto 4px;\n            }\n            #unidownloader.gap::before {\n              content: "";\n              width: 6px;\n            }\n            #unidownloader-snapshot {\n              position: relative;\n              display: inline-block;\n              width: 40px;\n              height: 100%;\n            }\n            #unidownloader-dropdown,\n            #unidownloader-tooltip {\n              position: absolute;\n              top: 0;\n              width: 100%;\n              z-index: 9999;\n            }\n            #unidownloader-notifications {\n              position: fixed;\n              z-index: 9999;\n              display: flex;\n              flex-direction: column-reverse;\n              bottom: 0;\n              height: 0;\n            }\n            #unidownloader-btn-text {\n              white-space: nowrap;\n              ${font}\n            }\n          `);\n          const head = document.head || document.getElementsByTagName("head")[0];\n          const style = document.createElement("style");\n          const headObserver = new MutationObserver(() => {\n            if (head.contains(style)) {\n              headObserver.disconnect();\n              const notificationPreferenceButton = t.querySelector("#notification-preference-button");\n              const setGap = () => {\n                if (!notificationPreferenceButton || notificationPreferenceButton.hasAttribute("hidden")) {\n                  button.classList.add("gap");\n                } else {\n                  button.classList.remove("gap");\n                }\n              };\n              setGap();\n              if (notificationPreferenceButton) {\n                new MutationObserver(setGap).observe(notificationPreferenceButton, { attributes: true });\n              }\n              const setButtonHeight = () => {\n                button.setAttribute("style", `height:${subscribeButton.offsetHeight}px`);\n              };\n              setButtonHeight();\n              new ResizeObserver(setButtonHeight).observe(subscribeButton);\n            }\n          });\n          headObserver.observe(\n            head,\n            {\n              attributes: false,\n              childList: true,\n              characterData: false,\n              subtree: true,\n            },\n          );\n          head.appendChild(style);\n          style.appendChild(document.createTextNode(css));\n        }\n      }\n    });\n    topRowObserver.observe(\n      t.parentNode,\n      {\n        attributes: false,\n        childList: true,\n        characterData: false,\n        subtree: true,\n      },\n    );\n    button.setAttribute("style", "display:none");\n    t.parentNode.insertBefore(button, t.nextSibling);\n    if (!document.getElementById("unidownloader-snapshot")) {\n      const snapshot = document.createElement("div");\n      snapshot.setAttribute("id", "unidownloader-snapshot");\n      // snapshot.setAttribute("style", "display:none");\n      const rightControls = document.querySelector(".ytp-right-controls");\n      const settingsButton = document.querySelector("[data-tooltip-target-id=ytp-settings-button]");\n      rightControls.insertBefore(snapshot, settingsButton);\n    }\n    if (!document.getElementById("unidownloader-notifications")) {\n      const notificationsHolder = document.createElement("div");\n      notificationsHolder.setAttribute("id", "unidownloader-notifications");\n      document.body.appendChild(notificationsHolder);\n    }\n    const addContainer = (id) => {\n      if (!document.getElementById(id)) {\n        const container = document.createElement("div");\n        container.setAttribute("id", id);\n        document.body.appendChild(container);\n      }\n    };\n    addContainer("unidownloader-dropdown");\n    addContainer("unidownloader-tooltip");\n    return true;\n  }\n\n  layoutIsReady() {\n    const o = this.ctx.window.document;\n    return o.querySelector("#meta #meta-contents #top-row #subscribe-button") !== null;\n  }\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/@ffmpeg/ffmpeg/src/index.js\nvar ffmpeg_src = __webpack_require__(29);\n\n// CONCATENATED MODULE: ./src/utils/merge-video.js\n\n\nlet ffWorker;\nlet ffWorkerLoaded;\nlet merge_video_duration = 0;\n\nconst getSeconds = function (time) {\n  const [hours, minutes, seconds] = time.split(":");\n  return (parseInt(hours, 10) * 60 + parseInt(minutes, 10)) * 60 + parseInt(seconds.split(".")[0], 10);\n};\n\nconst merge_video_makeLogger = function (progressCb) {\n  return (m) => {\n    // logger.log(m.message)\n    if (!m.message) {\n      return;\n    }\n    if (m.action === "run") {\n      if (!merge_video_duration) {\n        if (m.message && m.message.match) {\n          const durationMatch = m.message.match(/^\\s*Duration:\\s+(\\d\\d:\\d\\d:\\d\\d(?:\\.\\d\\d)?)/);\n          if (durationMatch) {\n            merge_video_duration = getSeconds(durationMatch[1]);\n          }\n        }\n      } else {\n        const timeMatch = m.message.match(/time=(\\d\\d:\\d\\d:\\d\\d(?:\\.\\d\\d))/);\n        if (timeMatch) {\n          const progress = ((getSeconds(timeMatch[1]) / merge_video_duration) * 100).toFixed(2);\n          progressCb({ flow: "muxing", progress });\n        } else {\n          const end = /video.*audio.*other streams.*global headers.*muxing overhead/.test(m.message);\n          if (end) {\n            merge_video_duration = 0;\n            progressCb({ flow: "muxing", end });\n          }\n        }\n      }\n    }\n  };\n};\n\nconst startWorker = function (progressCb) {\n  if (!ffWorkerLoaded) {\n    ffWorker = Object(ffmpeg_src["createWorker"])({\n      logger: merge_video_makeLogger(progressCb),\n    });\n    ffWorkerLoaded = ffWorker.load();\n  }\n};\n\nconst mergeVideo = async function (video, audio, setStopWorker) {\n  // console.log("MERGE!!!", video, audio);\n  await ffWorkerLoaded;\n  const stop = async function () {\n    // console.log("STOP WORKER!!!");\n    await ffWorker.terminate();\n    await ffWorker.remove("video.mp4");\n    await ffWorker.remove("audio.m4a");\n    await ffWorker.remove("output.mp4");\n  };\n  setStopWorker(stop);\n  await ffWorker.write("audio.m4a", audio);\n  await ffWorker.write("video.mp4", video);\n  await ffWorker.run("-i video.mp4 -i audio.m4a -c copy output.mp4", {\n    input: ["video.mp4", "audio.m4a"],\n    output: "output.mp4",\n  });\n  await ffWorker.remove("video.mp4");\n  await ffWorker.remove("audio.m4a");\n  const { data } = await ffWorker.read("output.mp4");\n  await ffWorker.remove("output.mp4");\n  return data;\n};\n\n\n\n// CONCATENATED MODULE: ./src/services/youtube/utils/parse-query.js\nconst parse_query_reducer = function (acc, [k, v]) {\n  acc[k] = v;\n  return acc;\n};\n\nconst parseQuery = s => [...new URLSearchParams(s).entries()].reduce(parse_query_reducer, {});\n\n/* harmony default export */ var parse_query = (parseQuery);\n\n// CONCATENATED MODULE: ./src/services/youtube/embed/get-video-info.js\n\n\n\n\n\n\n\n\n\nconst embed_get_video_info_logger = make_logger(console, "YTDL", true);\n\nconst embed_get_video_info_getVideoInfo = async (url) => {\n  let id;\n\n  try {\n    const ytcfg = await unsafe_window.get("ytcfg");\n\n    console.log("ytcfg ->", ytcfg);\n\n    id = ytcfg && ytcfg.data_ && ytcfg.data_.VIDEO_ID;\n  } catch (e) {\n    console.log(e);\n  }\n\n  if (!id) {\n    if (/.*\\.(youtube\\.com|youtube-nocookie\\.com)\\/embed/.test(url)) {\n      [id] = url.split("/").pop().split("?");\n    } else {\n      const urlObj = new URL(url);\n      /* eslint-disable-next-line no-restricted-globals */\n      id = parse_query(urlObj.search || location.search).v;\n    }\n  }\n\n  console.log("url: ", url, "ID!!!", id);\n\n  try {\n    const cached = await checkCache(id);\n    if (cached) {\n      return cached;\n    }\n    const data = await get_video_info_endpoints(id);\n    const result = await transform_video_info(data, id);\n\n    console.log("cache missed");\n    updateCache(id, result);\n    return result;\n  } catch (err) {\n    if (err === "Adblock conflict") {\n      // TODO behavior\n      // const str = app.strings.get_video_failed.replace("%s", `https://www.youtube.com/get_video_info?video_id=${id}&el=detailpage`);\n      // prompt(str, "@@||www.youtube.com/get_video_info?*=detailpage$xhr,domain=youtube.com");\n    }\n    embed_get_video_info_logger.error("load", err);\n  }\n  return null;\n};\n\n/* harmony default export */ var embed_get_video_info = (embed_get_video_info_getVideoInfo);\n\n// CONCATENATED MODULE: ./src/services/youtube/embed/index.js\n\n\n\n\n\n\n\n\n\n\n\n\nconst embed_getTheme = () => "dark";\n\nclass embed_YoutubeEmbed extends common {\n  constructor(widget, handlers) {\n    super(widget, handlers);\n    this.service = "youtubeEmbed";\n    if (/^https:\\/\\/www\\.youtube\\.com\\/embed/.test(window.location.href) ||\n        /^https?:\\/\\/www\\.youtube-nocookie\\.com\\/embed/.test(window.location.href)) {\n      const receiveMessage = async function (evt) {\n        if (evt.data.message === "getVideoInfo") {\n          // console.log("VIDEO INFO!!!", videoInfo);\n          /* eslint-disable-next-line no-case-declarations */\n          const res = await embed_get_video_info(evt.data.url);\n          // const parsed = new URLSearchParams(res);\n          console.log(res);\n          evt.source.postMessage({ message: "videoInfo", videoInfo: res }, "*");\n        }\n        if (evt.data.message === "download") {\n          console.log("DOWNLOAD!!!", evt.data);\n          const { result } = await download_stream({ url: evt.data.url, contentLength: evt.data.contentLength }, console.log);\n          const stream = await result;\n          console.log("DOWNLOADED!!!", stream);\n          evt.source.postMessage({\n            message: "stream",\n            content: stream,\n            url: evt.data.url,\n          }, "*");\n        }\n        if (evt.data.message === "downloadAndMux") {\n          console.log("DOWNLOAD!!!", evt.data);\n          startWorker(console.log);\n          const { audio, video } = evt.data;\n          const { result: vPromise } = await download_stream(video, console.log);\n          const { result: aPromise } = await download_stream(audio, console.log);\n          const [varr, aarr] = await Promise.all([vPromise, aPromise]);\n          const result = await mergeVideo(varr, aarr, console.log);\n          console.log("MUXED!!!", result);\n          evt.source.postMessage({\n            message: "muxed",\n            content: result,\n            url: video.url,\n          }, "*");\n        }\n      };\n      window.addEventListener("message", receiveMessage, false);\n    }\n  }\n\n  checkService(location) {\n    console.log("CHECK SERVICE!!!", location.href);\n    const url = location.href;\n    // console.log("IS IT?", url, /^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/embed/.test(url));\n    return /^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be|youtube-nocookie\\.com)\\/embed/.test(url);\n  }\n\n  exactMatch() {\n    const url = window.location.href;\n    console.log("EXACT?", /^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be|youtube-cocookie\\.com)\\/embed/.test(url), url);\n    return /^https?:\\/\\/(?:www\\.)?(?:youtube\\.com|youtu\\.be|youtube-nocookie\\.com)\\/embed/.test(url);\n  }\n\n  insertDownloadButton(holder, button) {\n    console.log("INSERT BUTTON!!!");\n    const t = holder.querySelector("#player #movie_player .ytp-chrome-top.ytp-show-cards-title .ytp-chrome-top-buttons");\n    const e = holder.querySelector("#unidownloader");\n    if (t === null || e !== null) {\n      return false;\n    }\n    const topObserver = new MutationObserver(() => {\n      if (t.parentNode.contains(button)) {\n        topObserver.disconnect();\n        const css = utils_minify(`\n          #unidownloader {\n            display: flex;\n            min-height: 40px;\n            margin: 0 10px;\n            padding-top: 6px;\n          }\n          #unidownloader-dropdown,\n          #unidownloader-tooltip  {\n            position: absolute;\n            width: 100%;\n            z-index: 9999;\n          }\n          #unidownloader-dropdown {\n            top: -12px;\n          }\n          #unidownloader-tooltip {\n            top: 8px;\n          }\n          .ytp-small-mode #unidownloader {\n            padding-top: 14px;\n          }\n          .ytp-small-mode #unidownloader-dropdown {\n            top: -4px;\n          }\n          .ytp-autohide #unidownloader,\n          .ytp-autohide #unidownloader-dropdown {\n            opacity: 0;\n            transition: opacity .1s cubic-bezier(0.4,0.0,1,1);\n          }\n        `);\n        const head = document.head || document.getElementsByTagName("head")[0];\n        const style = document.createElement("style");\n        const headObserver = new MutationObserver(() => {\n          if (head.contains(style)) {\n            headObserver.disconnect();\n            button.removeAttribute("style");\n          }\n        });\n        headObserver.observe(\n          head,\n          {\n            attributes: false,\n            childList: true,\n            characterData: false,\n            subtree: true,\n          },\n        );\n        head.appendChild(style);\n        style.appendChild(document.createTextNode(css));\n      }\n    });\n    topObserver.observe(\n      t.parentNode,\n      {\n        attributes: false,\n        childList: true,\n        characterData: false,\n        subtree: true,\n      },\n    );\n    button.setAttribute("style", "display:none");\n    t.parentNode.insertBefore(button, t);\n    const addContainer = (id) => {\n      if (!document.getElementById(id)) {\n        const moviePlayer = document.getElementById("movie_player");\n        if (moviePlayer) {\n          const container = document.createElement("div");\n          container.setAttribute("id", id);\n          moviePlayer.appendChild(container);\n        }\n      }\n    };\n    addContainer("unidownloader-dropdown");\n    addContainer("unidownloader-tooltip");\n    return true;\n  }\n\n  start(ctx, getDownloadButton) {\n    console.log("START!!!");\n    this.getDownloadButton = getDownloadButton;\n    const addButton = this.addButton.bind(this);\n    const callback = this.onLoad.bind(this, addButton);\n    callback();\n    if (ctx) {\n      this.ctx = ctx;\n    }\n  }\n\n  checkLayout(callback) {\n    console.log("CHECK LAYOUT!!!");\n    const options = this.service in config["a" /* default */] ? config["a" /* default */][this.service] : config["a" /* default */].default;\n    if (!this.counter) {\n      this.counter = 0;\n    }\n    if (this.layoutIsReady()) {\n      this.counter = 0;\n      callback();\n      return;\n    }\n    if (this.counter > options.attempts) {\n      this.ctx.log(this.service, "layout");\n      this.counter = 0;\n    } else {\n      this.counter += 1;\n    }\n    setTimeout(this.checkLayout.bind(this, callback), 1000);\n  }\n\n  layoutIsReady() {\n    const t = document.querySelector("#player #movie_player .ytp-chrome-top.ytp-show-cards-title .ytp-chrome-top-buttons");\n    console.log("LAYOUT READY?", t !== null);\n    return t !== null;\n  }\n}\n\n/* harmony default export */ var youtube_embed = (new embed_YoutubeEmbed());\n\n// EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js\nvar es = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./node_modules/redux/es/redux.js\n\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split(\'\').join(\'.\');\n};\n\nvar ActionTypes = {\n  INIT: "@@redux/INIT" + randomString(),\n  REPLACE: "@@redux/REPLACE" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== \'object\' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === \'function\' && typeof enhancer === \'function\' || typeof enhancer === \'function\' && typeof arguments[3] === \'function\') {\n    throw new Error(\'It looks like you are passing several store enhancers to \' + \'createStore(). This is not supported. Instead, compose them \' + \'together to a single function.\');\n  }\n\n  if (typeof preloadedState === \'function\' && typeof enhancer === \'undefined\') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== \'undefined\') {\n    if (typeof enhancer !== \'function\') {\n      throw new Error(\'Expected the enhancer to be a function.\');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== \'function\') {\n    throw new Error(\'Expected the reducer to be a function.\');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error(\'You may not call store.getState() while the reducer is executing. \' + \'The reducer has already received the state as an argument. \' + \'Pass it down from the top reducer instead of reading it from the store.\');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== \'function\') {\n      throw new Error(\'Expected the listener to be a function.\');\n    }\n\n    if (isDispatching) {\n      throw new Error(\'You may not call store.subscribe() while the reducer is executing. \' + \'If you would like to be notified after the store has been updated, subscribe from a \' + \'component and invoke store.getState() in the callback to access the latest state. \' + \'See https://redux.js.org/api-reference/store#subscribelistener for more details.\');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error(\'You may not unsubscribe from a store listener while the reducer is executing. \' + \'See https://redux.js.org/api-reference/store#subscribelistener for more details.\');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error(\'Actions must be plain objects. \' + \'Use custom middleware for async actions.\');\n    }\n\n    if (typeof action.type === \'undefined\') {\n      throw new Error(\'Actions may not have an undefined "type" property. \' + \'Have you misspelled a constant?\');\n    }\n\n    if (isDispatching) {\n      throw new Error(\'Reducers may not dispatch actions.\');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== \'function\') {\n      throw new Error(\'Expected the nextReducer to be a function.\');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== \'object\' || observer === null) {\n          throw new TypeError(\'Expected the observer to be an object.\');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[es["a" /* default */]] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an "INIT" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[es["a" /* default */]] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== \'undefined\' && typeof console.error === \'function\') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // "break on all exceptions" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && "action \\"" + String(actionType) + "\\"" || \'an action\';\n  return "Given " + actionDescription + ", reducer \\"" + key + "\\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? \'preloadedState argument passed to createStore\' : \'previous state received by the reducer\';\n\n  if (reducerKeys.length === 0) {\n    return \'Store does not have a valid reducer. Make sure the argument passed \' + \'to combineReducers is an object whose values are reducers.\';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return "The " + argumentName + " has unexpected type of \\"" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + "\\". Expected argument to be an object with the following " + ("keys: \\"" + reducerKeys.join(\'", "\') + "\\"");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return "Unexpected " + (unexpectedKeys.length > 1 ? \'keys\' : \'key\') + " " + ("\\"" + unexpectedKeys.join(\'", "\') + "\\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\\"" + reducerKeys.join(\'", "\') + "\\". Unexpected keys will be ignored.");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === \'undefined\') {\n      throw new Error("Reducer \\"" + key + "\\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don\'t want to set a value for this reducer, " + "you can use null instead of undefined.");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === \'undefined\') {\n      throw new Error("Reducer \\"" + key + "\\" returned undefined when probed with a random type. " + ("Don\'t try to handle " + ActionTypes.INIT + " or other actions in \\"redux/*\\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (false) {}\n\n    if (typeof reducers[key] === \'function\') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don\'t warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (false) {}\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (false) { var warningMessage; }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === \'undefined\') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === \'function\') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== \'object\' || actionCreators === null) {\n    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? \'null\' : typeof actionCreators) + ". " + "Did you write \\"import ActionCreators from\\" instead of \\"import * as ActionCreators from\\"?");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === \'function\') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction redux_ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      redux_ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      redux_ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error(\'Dispatching while constructing your middleware is not allowed. \' + \'Other middleware would not be applied to this dispatch.\');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== \'production\', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (false) {}\n\n\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(10);\n\n// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Context.js\n\nvar ReactReduxContext =\n/*#__PURE__*/\nreact_default.a.createContext(null);\n\nif (false) {}\n\n/* harmony default export */ var components_Context = (ReactReduxContext);\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js\n// Default to a dummy "batch" implementation that just runs the callback\nfunction defaultNoopBatch(callback) {\n  callback();\n}\n\nvar batch_batch = defaultNoopBatch; // Allow injecting another batching function later\n\nvar setBatch = function setBatch(newBatch) {\n  return batch_batch = newBatch;\n}; // Supply a getter just to skip dealing with ESM bindings\n\nvar getBatch = function getBatch() {\n  return batch_batch;\n};\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js\n // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nvar nullListeners = {\n  notify: function notify() {}\n};\n\nfunction createListenerCollection() {\n  var batch = getBatch();\n  var first = null;\n  var last = null;\n  return {\n    clear: function clear() {\n      first = null;\n      last = null;\n    },\n    notify: function notify() {\n      batch(function () {\n        var listener = first;\n\n        while (listener) {\n          listener.callback();\n          listener = listener.next;\n        }\n      });\n    },\n    get: function get() {\n      var listeners = [];\n      var listener = first;\n\n      while (listener) {\n        listeners.push(listener);\n        listener = listener.next;\n      }\n\n      return listeners;\n    },\n    subscribe: function subscribe(callback) {\n      var isSubscribed = true;\n      var listener = last = {\n        callback: callback,\n        next: null,\n        prev: last\n      };\n\n      if (listener.prev) {\n        listener.prev.next = listener;\n      } else {\n        first = listener;\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return;\n        isSubscribed = false;\n\n        if (listener.next) {\n          listener.next.prev = listener.prev;\n        } else {\n          last = listener.prev;\n        }\n\n        if (listener.prev) {\n          listener.prev.next = listener.next;\n        } else {\n          first = listener.next;\n        }\n      };\n    }\n  };\n}\n\nvar Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(store, parentSub) {\n    this.store = store;\n    this.parentSub = parentSub;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.addNestedSub = function addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  };\n\n  _proto.notifyNestedSubs = function notifyNestedSubs() {\n    this.listeners.notify();\n  };\n\n  _proto.handleChangeWrapper = function handleChangeWrapper() {\n    if (this.onStateChange) {\n      this.onStateChange();\n    }\n  };\n\n  _proto.isSubscribed = function isSubscribed() {\n    return Boolean(this.unsubscribe);\n  };\n\n  _proto.trySubscribe = function trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);\n      this.listeners = createListenerCollection();\n    }\n  };\n\n  _proto.tryUnsubscribe = function tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  };\n\n  return Subscription;\n}();\n\n\n// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js\n\n\n\n\n\nfunction Provider(_ref) {\n  var store = _ref.store,\n      context = _ref.context,\n      children = _ref.children;\n  var contextValue = Object(react["useMemo"])(function () {\n    var subscription = new Subscription(store);\n    subscription.onStateChange = subscription.notifyNestedSubs;\n    return {\n      store: store,\n      subscription: subscription\n    };\n  }, [store]);\n  var previousState = Object(react["useMemo"])(function () {\n    return store.getState();\n  }, [store]);\n  Object(react["useEffect"])(function () {\n    var subscription = contextValue.subscription;\n    subscription.trySubscribe();\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs();\n    }\n\n    return function () {\n      subscription.tryUnsubscribe();\n      subscription.onStateChange = null;\n    };\n  }, [contextValue, previousState]);\n  var Context = context || ReactReduxContext;\n  return react_default.a.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nif (false) {}\n\n/* harmony default export */ var components_Provider = (Provider);\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(8);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(9);\n\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js\n // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== \'undefined\' && typeof window.document !== \'undefined\' && typeof window.document.createElement !== \'undefined\' ? react["useLayoutEffect"] : react["useEffect"];\n// CONCATENATED MODULE: ./node_modules/react-redux/es/components/connectAdvanced.js\n\n\n\n\n\n\n\n // Define some constant arrays just to avoid re-creating these\n\nvar EMPTY_ARRAY = [];\nvar NO_SUBSCRIPTION_ARRAY = [null, null];\n\nvar stringifyComponent = function stringifyComponent(Comp) {\n  try {\n    return JSON.stringify(Comp);\n  } catch (err) {\n    return String(Comp);\n  }\n};\n\nfunction storeStateUpdatesReducer(state, action) {\n  var updateCount = state[1];\n  return [action.payload, updateCount + 1];\n}\n\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n  useIsomorphicLayoutEffect(function () {\n    return effectFunc.apply(void 0, effectArgs);\n  }, dependencies);\n}\n\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps;\n  lastChildProps.current = actualChildProps;\n  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null;\n    notifyNestedSubs();\n  }\n}\n\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {\n  // If we\'re not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts\n\n  var didUnsubscribe = false;\n  var lastThrownError = null; // We\'ll run this callback every time a store subscription update propagates to this component\n\n  var checkForUpdates = function checkForUpdates() {\n    if (didUnsubscribe) {\n      // Don\'t run stale listeners.\n      // Redux doesn\'t guarantee unsubscriptions happen until next dispatch.\n      return;\n    }\n\n    var latestStoreState = store.getState();\n    var newChildProps, error;\n\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n    } catch (e) {\n      error = e;\n      lastThrownError = e;\n    }\n\n    if (!error) {\n      lastThrownError = null;\n    } // If the child props haven\'t changed, nothing to do here - cascade the subscription update\n\n\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs();\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the "child props from store update"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn\'t clear out the value without\n      // forcing another re-render, which we don\'t want.\n      lastChildProps.current = newChildProps;\n      childPropsFromStoreUpdate.current = newChildProps;\n      renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render\n\n      forceComponentUpdateDispatch({\n        type: \'STORE_UPDATED\',\n        payload: {\n          error: error\n        }\n      });\n    }\n  }; // Actually subscribe to the nearest connected ancestor (or store)\n\n\n  subscription.onStateChange = checkForUpdates;\n  subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n  // changed since we began.\n\n  checkForUpdates();\n\n  var unsubscribeWrapper = function unsubscribeWrapper() {\n    didUnsubscribe = true;\n    subscription.tryUnsubscribe();\n    subscription.onStateChange = null;\n\n    if (lastThrownError) {\n      // It\'s possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we\'re about to unmount.\n      // This shouldn\'t happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn\'t get lost.\n      throw lastThrownError;\n    }\n  };\n\n  return unsubscribeWrapper;\n}\n\nvar initStateUpdates = function initStateUpdates() {\n  return [null, 0];\n};\n\nfunction connectAdvanced(\n/*\r\n  selectorFactory is a func that is responsible for returning the selector function used to\r\n  compute new props from state, props, and dispatch. For example:\r\n      export default connectAdvanced((dispatch, options) => (state, props) => ({\r\n      thing: state.things[props.thingId],\r\n      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\r\n    }))(YourComponent)\r\n    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators\r\n  outside of their selector as an optimization. Options passed to connectAdvanced are passed to\r\n  the selectorFactory, along with displayName and WrappedComponent, as the second argument.\r\n    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound\r\n  props. Do not use connectAdvanced directly without memoizing results between calls to your\r\n  selector, otherwise the Connect component will re-render on every state or props change.\r\n*/\nselectorFactory, // options object:\n_ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n\n  var _ref2 = _ref,\n      _ref2$getDisplayName = _ref2.getDisplayName,\n      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {\n    return "ConnectAdvanced(" + name + ")";\n  } : _ref2$getDisplayName,\n      _ref2$methodName = _ref2.methodName,\n      methodName = _ref2$methodName === void 0 ? \'connectAdvanced\' : _ref2$methodName,\n      _ref2$renderCountProp = _ref2.renderCountProp,\n      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,\n      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,\n      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,\n      _ref2$storeKey = _ref2.storeKey,\n      storeKey = _ref2$storeKey === void 0 ? \'store\' : _ref2$storeKey,\n      _ref2$withRef = _ref2.withRef,\n      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,\n      _ref2$forwardRef = _ref2.forwardRef,\n      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,\n      _ref2$context = _ref2.context,\n      context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context,\n      connectOptions = _objectWithoutPropertiesLoose(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);\n\n  if (false) { var customStoreWarningMessage; }\n\n  var Context = context;\n  return function wrapWithConnect(WrappedComponent) {\n    if (false) {}\n\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \'Component\';\n    var displayName = getDisplayName(wrappedComponentName);\n\n    var selectorFactoryOptions = _extends({}, connectOptions, {\n      getDisplayName: getDisplayName,\n      methodName: methodName,\n      renderCountProp: renderCountProp,\n      shouldHandleStateChanges: shouldHandleStateChanges,\n      storeKey: storeKey,\n      displayName: displayName,\n      wrappedComponentName: wrappedComponentName,\n      WrappedComponent: WrappedComponent\n    });\n\n    var pure = connectOptions.pure;\n\n    function createChildSelector(store) {\n      return selectorFactory(store.dispatch, selectorFactoryOptions);\n    } // If we aren\'t running in "pure" mode, we don\'t want to memoize values.\n    // To avoid conditionally calling hooks, we fall back to a tiny wrapper\n    // that just executes the given callback immediately.\n\n\n    var usePureOnlyMemo = pure ? react["useMemo"] : function (callback) {\n      return callback();\n    };\n\n    function ConnectFunction(props) {\n      var _useMemo = Object(react["useMemo"])(function () {\n        // Distinguish between actual "data" props that were passed to the wrapper component,\n        // and values needed to control behavior (forwarded refs, alternate context instances).\n        // To maintain the wrapperProps object reference, memoize this destructuring.\n        var reactReduxForwardedRef = props.reactReduxForwardedRef,\n            wrapperProps = _objectWithoutPropertiesLoose(props, ["reactReduxForwardedRef"]);\n\n        return [props.context, reactReduxForwardedRef, wrapperProps];\n      }, [props]),\n          propsContext = _useMemo[0],\n          reactReduxForwardedRef = _useMemo[1],\n          wrapperProps = _useMemo[2];\n\n      var ContextToUse = Object(react["useMemo"])(function () {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        return propsContext && propsContext.Consumer && Object(react_is["isContextConsumer"])(react_default.a.createElement(propsContext.Consumer, null)) ? propsContext : Context;\n      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available\n\n      var contextValue = Object(react["useContext"])(ContextToUse); // The store _must_ exist as either a prop or in context.\n      // We\'ll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n\n      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n\n      if (false) {} // Based on the previous check, one of these must be true\n\n\n      var store = didStoreComeFromProps ? props.store : contextValue.store;\n      var childPropsSelector = Object(react["useMemo"])(function () {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return createChildSelector(store);\n      }, [store]);\n\n      var _useMemo2 = Object(react["useMemo"])(function () {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription\'s source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn\'t use subscription from context, or vice versa.\n\n        var subscription = new Subscription(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription\'s listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n\n        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n        return [subscription, notifyNestedSubs];\n      }, [store, didStoreComeFromProps, contextValue]),\n          subscription = _useMemo2[0],\n          notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n\n\n      var overriddenContextValue = Object(react["useMemo"])(function () {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don\'t want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue;\n        } // Otherwise, put this component\'s subscription instance into context, so that\n        // connected descendants won\'t update until after this component is done\n\n\n        return _extends({}, contextValue, {\n          subscription: subscription\n        });\n      }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update\n      // causes a change to the calculated child component props (or we caught an error in mapState)\n\n      var _useReducer = Object(react["useReducer"])(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates),\n          _useReducer$ = _useReducer[0],\n          previousStateUpdateResult = _useReducer$[0],\n          forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards\n\n\n      if (previousStateUpdateResult && previousStateUpdateResult.error) {\n        throw previousStateUpdateResult.error;\n      } // Set up refs to coordinate values between the subscription effect and the render logic\n\n\n      var lastChildProps = Object(react["useRef"])();\n      var lastWrapperProps = Object(react["useRef"])(wrapperProps);\n      var childPropsFromStoreUpdate = Object(react["useRef"])();\n      var renderIsScheduled = Object(react["useRef"])(false);\n      var actualChildProps = usePureOnlyMemo(function () {\n        // Tricky logic here:\n        // - This render may have been triggered by a Redux store update that produced new child props\n        // - However, we may have gotten new wrapper props after that\n        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n        // So, we\'ll use the child props from store update only if the wrapper props are the same as last time.\n        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n          return childPropsFromStoreUpdate.current;\n        } // TODO We\'re reading the store directly in render() here. Bad idea?\n        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n        // to determine what the child props should be.\n\n\n        return childPropsSelector(store.getState(), wrapperProps);\n      }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes\n\n      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that\'s done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n\n      var renderedWrappedComponent = Object(react["useMemo"])(function () {\n        return react_default.a.createElement(WrappedComponent, _extends({}, actualChildProps, {\n          ref: reactReduxForwardedRef\n        }));\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n\n      var renderedChild = Object(react["useMemo"])(function () {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return react_default.a.createElement(ContextToUse.Provider, {\n            value: overriddenContextValue\n          }, renderedWrappedComponent);\n        }\n\n        return renderedWrappedComponent;\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\n      return renderedChild;\n    } // If we\'re in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.\n\n\n    var Connect = pure ? react_default.a.memo(ConnectFunction) : ConnectFunction;\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = displayName;\n\n    if (forwardRef) {\n      var forwarded = react_default.a.forwardRef(function forwardConnectRef(props, ref) {\n        return react_default.a.createElement(Connect, _extends({}, props, {\n          reactReduxForwardedRef: ref\n        }));\n      });\n      forwarded.displayName = displayName;\n      forwarded.WrappedComponent = WrappedComponent;\n      return hoist_non_react_statics_cjs_default()(forwarded, WrappedComponent);\n    }\n\n    return hoist_non_react_statics_cjs_default()(Connect, WrappedComponent);\n  };\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n\n  if (typeof objA !== \'object\' || objA === null || typeof objB !== \'object\' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/isPlainObject.js\n/**\r\n * @param {any} obj The object to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\nfunction isPlainObject_isPlainObject(obj) {\n  if (typeof obj !== \'object\' || obj === null) return false;\n  var proto = Object.getPrototypeOf(obj);\n  if (proto === null) return true;\n  var baseProto = proto;\n\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n\n  return proto === baseProto;\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/warning.js\n/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */\nfunction warning_warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== \'undefined\' && typeof console.error === \'function\') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // "break on all exceptions" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/verifyPlainObject.js\n\n\nfunction verifyPlainObject(value, displayName, methodName) {\n  if (!isPlainObject_isPlainObject(value)) {\n    warning_warning(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");\n  }\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js\n\nfunction wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch, options) {\n    var constant = getConstant(dispatch, options);\n\n    function constantSelector() {\n      return constant;\n    }\n\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n//\n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\n\nfunction getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n//\n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//\n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//\n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//\n\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, _ref) {\n    var displayName = _ref.displayName;\n\n    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);\n    }; // allow detectFactoryAndVerify to get ownProps\n\n\n    proxy.dependsOnOwnProps = true;\n\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      var props = proxy(stateOrDispatch, ownProps);\n\n      if (typeof props === \'function\') {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n\n      if (false) {}\n      return props;\n    };\n\n    return proxy;\n  };\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js\n\n\nfunction whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n  return typeof mapDispatchToProps === \'function\' ? wrapMapToPropsFunc(mapDispatchToProps, \'mapDispatchToProps\') : undefined;\n}\nfunction whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {\n    return {\n      dispatch: dispatch\n    };\n  }) : undefined;\n}\nfunction whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === \'object\' ? wrapMapToPropsConstant(function (dispatch) {\n    return bindActionCreators(mapDispatchToProps, dispatch);\n  }) : undefined;\n}\n/* harmony default export */ var connect_mapDispatchToProps = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js\n\nfunction whenMapStateToPropsIsFunction(mapStateToProps) {\n  return typeof mapStateToProps === \'function\' ? wrapMapToPropsFunc(mapStateToProps, \'mapStateToProps\') : undefined;\n}\nfunction whenMapStateToPropsIsMissing(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(function () {\n    return {};\n  }) : undefined;\n}\n/* harmony default export */ var connect_mapStateToProps = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js\n\n\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return _extends({}, ownProps, {}, stateProps, {}, dispatchProps);\n}\nfunction wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref) {\n    var displayName = _ref.displayName,\n        pure = _ref.pure,\n        areMergedPropsEqual = _ref.areMergedPropsEqual;\n    var hasRunOnce = false;\n    var mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (false) {}\n      }\n\n      return mergedProps;\n    };\n  };\n}\nfunction whenMergePropsIsFunction(mergeProps) {\n  return typeof mergeProps === \'function\' ? wrapMergePropsFunc(mergeProps) : undefined;\n}\nfunction whenMergePropsIsOmitted(mergeProps) {\n  return !mergeProps ? function () {\n    return defaultMergeProps;\n  } : undefined;\n}\n/* harmony default export */ var connect_mergeProps = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js\n\n\nfunction verify(selector, methodName, displayName) {\n  if (!selector) {\n    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");\n  } else if (methodName === \'mapStateToProps\' || methodName === \'mapDispatchToProps\') {\n    if (!Object.prototype.hasOwnProperty.call(selector, \'dependsOnOwnProps\')) {\n      warning_warning("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");\n    }\n  }\n}\n\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {\n  verify(mapStateToProps, \'mapStateToProps\', displayName);\n  verify(mapDispatchToProps, \'mapDispatchToProps\', displayName);\n  verify(mergeProps, \'mergeProps\', displayName);\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js\n\n\nfunction impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\n  return function impureFinalPropsSelector(state, ownProps) {\n    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\n  };\n}\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n  var areStatesEqual = _ref.areStatesEqual,\n      areOwnPropsEqual = _ref.areOwnPropsEqual,\n      areStatePropsEqual = _ref.areStatePropsEqual;\n  var hasRunAtLeastOnce = false;\n  var state;\n  var ownProps;\n  var stateProps;\n  var dispatchProps;\n  var mergedProps;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    var nextStateProps = mapStateToProps(state, ownProps);\n    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    var stateChanged = !areStatesEqual(nextState, state);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n} // TODO: Add more comments\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced\'s shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\n\nfunction finalPropsSelectorFactory(dispatch, _ref2) {\n  var initMapStateToProps = _ref2.initMapStateToProps,\n      initMapDispatchToProps = _ref2.initMapDispatchToProps,\n      initMergeProps = _ref2.initMergeProps,\n      options = _objectWithoutPropertiesLoose(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);\n\n  var mapStateToProps = initMapStateToProps(dispatch, options);\n  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  var mergeProps = initMergeProps(dispatch, options);\n\n  if (false) {}\n\n  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\n  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js\n\n\n\n\n\n\n\n\n/*\r\n  connect is a facade over connectAdvanced. It turns its args into a compatible\r\n  selectorFactory, which has the signature:\r\n\r\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\r\n  \r\n  connect passes its args to connectAdvanced as options, which will in turn pass them to\r\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\r\n\r\n  selectorFactory returns a final props selector from its mapStateToProps,\r\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\r\n  mergePropsFactories, and pure args.\r\n\r\n  The resulting final props selector is called by the Connect component instance whenever\r\n  it receives new props or store state.\r\n */\n\nfunction connect_match(arg, factories, name) {\n  for (var i = factories.length - 1; i >= 0; i--) {\n    var result = factories[i](arg);\n    if (result) return result;\n  }\n\n  return function (dispatch, options) {\n    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");\n  };\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n} // createConnect with default args builds the \'official\' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\n\n\nfunction createConnect(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$connectHOC = _ref.connectHOC,\n      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,\n      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,\n      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? connect_mapStateToProps : _ref$mapStateToPropsF,\n      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,\n      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? connect_mapDispatchToProps : _ref$mapDispatchToPro,\n      _ref$mergePropsFactor = _ref.mergePropsFactories,\n      mergePropsFactories = _ref$mergePropsFactor === void 0 ? connect_mergeProps : _ref$mergePropsFactor,\n      _ref$selectorFactory = _ref.selectorFactory,\n      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;\n\n  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {\n    if (_ref2 === void 0) {\n      _ref2 = {};\n    }\n\n    var _ref3 = _ref2,\n        _ref3$pure = _ref3.pure,\n        pure = _ref3$pure === void 0 ? true : _ref3$pure,\n        _ref3$areStatesEqual = _ref3.areStatesEqual,\n        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,\n        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,\n        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,\n        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,\n        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,\n        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,\n        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,\n        extraOptions = _objectWithoutPropertiesLoose(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);\n\n    var initMapStateToProps = connect_match(mapStateToProps, mapStateToPropsFactories, \'mapStateToProps\');\n    var initMapDispatchToProps = connect_match(mapDispatchToProps, mapDispatchToPropsFactories, \'mapDispatchToProps\');\n    var initMergeProps = connect_match(mergeProps, mergePropsFactories, \'mergeProps\');\n    return connectHOC(selectorFactory, _extends({\n      // used in error messages\n      methodName: \'connect\',\n      // used to compute Connect\'s displayName from the wrapped component\'s displayName.\n      getDisplayName: function getDisplayName(name) {\n        return "Connect(" + name + ")";\n      },\n      // if mapStateToProps is falsy, the Connect component doesn\'t subscribe to store state changes\n      shouldHandleStateChanges: Boolean(mapStateToProps),\n      // passed through to selectorFactory\n      initMapStateToProps: initMapStateToProps,\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      pure: pure,\n      areStatesEqual: areStatesEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    }, extraOptions));\n  };\n}\n/* harmony default export */ var connect_connect = (/*#__PURE__*/createConnect());\n// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js\n\n\n/**\r\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @returns {any} the value of the `ReactReduxContext`\r\n *\r\n * @example\r\n *\r\n * import React from \'react\'\r\n * import { useReduxContext } from \'react-redux\'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const { store } = useReduxContext()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nfunction useReduxContext_useReduxContext() {\n  var contextValue = Object(react["useContext"])(ReactReduxContext);\n\n  if (false) {}\n\n  return contextValue;\n}\n// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js\n\n\n\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nfunction createStoreHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useReduxContext_useReduxContext : function () {\n    return Object(react["useContext"])(context);\n  };\n  return function useStore() {\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store;\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from \'react\'\r\n * import { useStore } from \'react-redux\'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nvar useStore_useStore =\n/*#__PURE__*/\ncreateStoreHook();\n// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js\n\n\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useStore_useStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store\'s `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from \'react\'\r\n * import { useDispatch } from \'react-redux\'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: \'increase-counter\' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nvar useDispatch =\n/*#__PURE__*/\ncreateDispatchHook();\n// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js\n\n\n\n\n\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = Object(react["useReducer"])(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = Object(react["useMemo"])(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = Object(react["useRef"])();\n  var latestSelector = Object(react["useRef"])();\n  var latestStoreState = Object(react["useRef"])();\n  var latestSelectedState = Object(react["useRef"])();\n  var storeState = store.getState();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(storeState);\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += "\\nThe error may be correlated with this previous error:\\n" + latestSubscriptionCallbackError.current.stack + "\\n\\n";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestStoreState.current = storeState;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nfunction createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useReduxContext_useReduxContext : function () {\n    return Object(react["useContext"])(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (false) {}\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n    Object(react["useDebugValue"])(selectedState);\n    return selectedState;\n  };\n}\n/**\r\n * A hook to access the redux store\'s state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from \'react\'\r\n * import { useSelector } from \'react-redux\'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nvar useSelector_useSelector =\n/*#__PURE__*/\ncreateSelectorHook();\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/reactBatchedUpdates.js\n/* eslint-disable import/no-unresolved */\n\n// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js\n\n\n\n\n\n\n\n\n\n\nsetBatch(react_dom["unstable_batchedUpdates"]);\n\n// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js\nfunction createThunkMiddleware(extraArgument) {\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === \'function\') {\n          return action(dispatch, getState, extraArgument);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nvar thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\n/* harmony default export */ var redux_thunk_es = (thunk);\n// CONCATENATED MODULE: ./src/widget/store/actions.js\n\n\nconst actionsTypes = {\n  SET_STATUS: "SET_STATUS",\n  SET_PROGRESS: "SET_PROGRESS",\n  RESET_PROGRESS: "RESET_PROGRESS",\n  SET_SERVICE: "SET_SERVICE",\n  SET_VIDEO_INFO: "SET_VIDEO_INFO",\n  SET_AUDIO_INFO: "SET_AUDIO_INFO",\n  SET_STREAM_INFO: "SET_STREAM_INFO",\n  SET_DEFAULT_ITEM: "SET_DEFAULT_ITEM",\n  SET_CONTENT_LIMIT: "SET_CONTENT_LIMIT",\n  SET_MODULE: "SET_MODULE",\n  SET_CANCEL: "SET_CANCEL",\n  SET_THEME: "SET_THEME",\n  SET_LANG: "SET_LANG",\n  SET_I18N: "SET_I18N",\n  SET_DIR: "SET_DIR",\n  ADD_NOTIFICATION: "ADD_NOTIFICATION",\n  REMOVE_NOTIFICATION: "REMOVE_NOTIFICATION",\n  SET_HELP_STATE: "SET_HELP_STATE",\n  SET_SEND_EVENT: "SET_SEND_EVENT",\n  SET_DOWNLOADS_COUNT: "SET_DOWNLOADS_COUNT",\n  SET_DISPLAY_QR_CODES: "SET_DISPLAY_QR_CODES",\n  SET_SHOW_FORMATS_AVAILABLE_VIA_UDL: "SET_SHOW_FORMATS_AVAILABLE_VIA_UDL",\n  SET_SHOW_FORMATS_REQUIRED_ONLINE_CONVERSION: "SET_SHOW_FORMATS_REQUIRED_ONLINE_CONVERSION",\n  SET_WARN_BEFORE_CONVERTING: "SET_WARN_BEFORE_CONVERTING",\n  SET_WARN_ABOUT_COMPETITORS_DETECTION: "SET_WARN_ABOUT_COMPETITORS_DETECTION",\n  SET_SHOW_SNAPSHOT_BUTTON: "SET_SHOW_SNAPSHOT_BUTTON",\n  SET_APP_BUTTON_STYLE: "SET_APP_BUTTON_STYLE",\n};\n\nconst getSyncAction = function (name, defaultValue, setter) {\n  return async function (dispatch) {\n    let storedValue = await global_storage_tm.get(name);\n    if (storedValue === null || storedValue === undefined) {\n      storedValue = defaultValue;\n      global_storage_tm.set(name, defaultValue);\n    }\n    dispatch(setter(storedValue));\n  };\n};\n\nconst actions_actions = {\n  setStatus(status) {\n    return { type: actionsTypes.SET_STATUS, value: status };\n  },\n  setProgress(progress) {\n    return { type: actionsTypes.SET_PROGRESS, value: progress };\n  },\n  resetProgress() {\n    return { type: actionsTypes.RESET_PROGRESS, value: null };\n  },\n  setService(serviceName) {\n    return { type: actionsTypes.SET_SERVICE, value: serviceName };\n  },\n  setVideoInfo(info) {\n    return { type: actionsTypes.SET_VIDEO_INFO, value: info };\n  },\n  setAudioInfo(info) {\n    return { type: actionsTypes.SET_AUDIO_INFO, value: info };\n  },\n  setStreamInfo(info) {\n    return { type: actionsTypes.SET_STREAM_INFO, value: info };\n  },\n  setContentLimit(contentLimit) {\n    return { type: actionsTypes.SET_CONTENT_LIMIT, value: contentLimit };\n  },\n  setDefaultItem(info) {\n    return { type: actionsTypes.SET_DEFAULT_ITEM, value: info };\n  },\n  setModule(module) {\n    return { type: actionsTypes.SET_MODULE, value: module };\n  },\n  setCancel(cancel) {\n    return { type: actionsTypes.SET_CANCEL, value: cancel };\n  },\n  setTheme(theme) {\n    return { type: actionsTypes.SET_THEME, value: theme };\n  },\n  _setLang(value) {\n    return { type: actionsTypes.SET_LANG, value };\n  },\n  syncLang:\n    () => getSyncAction("lang", "autoDetect", actions_actions.setLang),\n  setLang(lang) {\n    return async function (dispatch, getState) {\n      const { module, i18n } = getState();\n      const storedLang = await global_storage_tm.get("lang");\n      if (storedLang !== lang) {\n        global_storage_tm.set("lang", lang);\n      }\n      if (i18n) {\n        if (lang === "autoDetect") {\n          if (module.getLang) {\n            const pageLang = module.getLang();\n            i18n.changeLanguage(pageLang);\n          } else {\n            i18n.changeLanguage();\n          }\n        } else {\n          i18n.changeLanguage(lang);\n        }\n      }\n      dispatch(actions_actions._setLang(lang));\n    };\n  },\n  setI18N(i18n) {\n    return { type: actionsTypes.SET_I18N, value: i18n };\n  },\n  setDir(dir) {\n    return { type: actionsTypes.SET_DIR, value: dir };\n  },\n  addNotification(notification) {\n    return {\n      type: actionsTypes.ADD_NOTIFICATION,\n      value: {\n        ...notification,\n        id: Math.random(),\n      },\n    };\n  },\n  removeNotification(index) {\n    return { type: actionsTypes.REMOVE_NOTIFICATION, value: index };\n  },\n  setHelpState(state) {\n    return { type: actionsTypes.SET_HELP_STATE, value: state };\n  },\n  setSendEvent(sendEvent) {\n    return { type: actionsTypes.SET_SEND_EVENT, value: sendEvent };\n  },\n  _setDownloadsCount(count) {\n    return { type: actionsTypes.SET_DOWNLOADS_COUNT, value: count };\n  },\n  syncDownloads: () => getSyncAction("downloadsCount", 0, actions_actions._setDownloadsCount),\n  incrementDownloads() {\n    return async function (dispatch, getState) {\n      let { downloadsCount } = getState();\n      downloadsCount++;\n      global_storage_tm.set("downloadsCount", downloadsCount);\n      dispatch(actions_actions._setDownloadsCount(downloadsCount));\n    };\n  },\n  _setDisplayQrCodes(value) {\n    return { type: actionsTypes.SET_DISPLAY_QR_CODES, value };\n  },\n  syncDisplayQrCodes:\n    () => getSyncAction("displayQrCodes", true, actions_actions._setDisplayQrCodes),\n  setDisplayQrCodes(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("displayQrCodes", value);\n      dispatch(actions_actions._setDisplayQrCodes(value));\n    };\n  },\n  _setShowFormatsAvailableViaUDL(value) {\n    return { type: actionsTypes.SET_SHOW_FORMATS_AVAILABLE_VIA_UDL, value };\n  },\n  syncShowFormatsAvailableViaUDL:\n    () => getSyncAction("showFormatsAvailableViaUDL", true, actions_actions._setShowFormatsAvailableViaUDL),\n  setShowFormatsAvailableViaUDL(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("showFormatsAvailableViaUDL", value);\n      dispatch(actions_actions._setShowFormatsAvailableViaUDL(value));\n    };\n  },\n  _setShowFormatsRequiredOnlineConversion(value) {\n    return { type: actionsTypes.SET_SHOW_FORMATS_REQUIRED_ONLINE_CONVERSION, value };\n  },\n  syncShowFormatsRequiredOnlineConversion:\n    () => getSyncAction("showFormatsRequiredOnlineConversion", true, actions_actions._setShowFormatsRequiredOnlineConversion),\n  setShowFormatsRequiredOnlineConversion(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("showFormatsRequiredOnlineConversion", value);\n      dispatch(actions_actions._setShowFormatsRequiredOnlineConversion(value));\n    };\n  },\n  _setWarnBeforeConverting(value) {\n    return { type: actionsTypes.SET_WARN_BEFORE_CONVERTING, value };\n  },\n  syncWarnBeforeConverting:\n    () => getSyncAction("warnBeforeConverting", true, actions_actions._setWarnBeforeConverting),\n  setWarnBeforeConverting(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("warnBeforeConverting", value);\n      dispatch(actions_actions._setWarnBeforeConverting(value));\n    };\n  },\n  _setWarnAboutCompetitorsDetection(value) {\n    return { type: actionsTypes.SET_WARN_ABOUT_COMPETITORS_DETECTION, value };\n  },\n  syncWarnAboutCompetitorsDetection:\n    () => getSyncAction("warnAboutCompetitorsDetection", true, actions_actions._setWarnAboutCompetitorsDetection),\n  setWarnAboutCompetitorsDetection(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("warnAboutCompetitorsDetection", value);\n      dispatch(actions_actions._setWarnAboutCompetitorsDetection(value));\n    };\n  },\n  _setShowSnapshotButton(value) {\n    return { type: actionsTypes.SET_SHOW_SNAPSHOT_BUTTON, value };\n  },\n  syncShowSnapshotButton:\n    () => getSyncAction("showSnapshotButton", true, actions_actions._setShowSnapshotButton),\n  setShowSnapshotButton(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("showSnapshotButton", value);\n      dispatch(actions_actions._setShowSnapshotButton(value));\n    };\n  },\n  _setAppButtonStyle(value) {\n    return { type: actionsTypes.SET_APP_BUTTON_STYLE, value };\n  },\n  syncAppButtonStyle:\n    () => getSyncAction("appButtonStyle", "Solid", actions_actions._setAppButtonStyle),\n  setAppButtonStyle(value) {\n    return async function (dispatch) {\n      global_storage_tm.set("appButtonStyle", value);\n      dispatch(actions_actions._setAppButtonStyle(value));\n    };\n  },\n};\n\n\n\n// CONCATENATED MODULE: ./src/widget/store/actions-tm.js\n\n\n\nactionsTypes.SET_LOAD_YANDEX_MARKET_ADVISER = "SET_LOAD_YANDEX_MARKET_ADVISER";\n\nactions_actions._setLoadYandexMarketAdviser = function (value) {\n  return { type: actionsTypes.SET_LOAD_YANDEX_MARKET_ADVISER, value };\n};\nactions_actions.syncLoadYandexMarketAdviser =\n    () => getSyncAction("loadYandexMarketAdviser", true, actions_actions._setLoadYandexMarketAdviser);\nactions_actions.setLoadYandexMarketAdviser = function (value) {\n  return async function (dispatch) {\n    global_storage_tm.set("loadYandexMarketAdviser", value);\n    dispatch(actions_actions._setLoadYandexMarketAdviser(value));\n  };\n};\n\n\n\n// CONCATENATED MODULE: ./src/widget/store/reducers.js\n\n\nconst initialState = {\n  status: "gettingInfo",\n  video: 0,\n  audio: 0,\n  muxing: 0,\n  downloadsCount: 0,\n  notifications: [],\n};\n\nconst reducers_handlers = {\n  [actionsTypes.SET_STATUS]: (state, action) => ({ ...state, status: action.value }),\n  [actionsTypes.SET_TITLE]: (state, action) => ({ ...state, title: action.value }),\n  [actionsTypes.SET_PROGRESS]: (state, action) => ({ ...state, progress: { ...state.progress, ...action.value } }),\n  [actionsTypes.RESET_PROGRESS]: state => ({ ...state, progress: {} }),\n  [actionsTypes.SET_SERVICE]: (state, action) => ({ ...state, serviceName: action.value }),\n  [actionsTypes.SET_VIDEO_INFO]: (state, action) => ({ ...state, videoInfo: action.value }),\n  [actionsTypes.SET_AUDIO_INFO]: (state, action) => ({ ...state, audioInfo: action.value }),\n  [actionsTypes.SET_STREAM_INFO]: (state, action) => ({ ...state, streamInfo: action.value }),\n  [actionsTypes.SET_DEFAULT_ITEM]: (state, action) => ({ ...state, defaultItem: action.value }),\n  [actionsTypes.SET_MODULE]: (state, action) => ({ ...state, module: action.value }),\n  [actionsTypes.SET_CONTENT_LIMIT]: (state, action) => ({ ...state, contentLimit: action.value }),\n  [actionsTypes.SET_CANCEL]: (state, action) => ({ ...state, cancel: action.value }),\n  [actionsTypes.SET_THEME]: (state, action) => ({ ...state, theme: action.value }),\n  [actionsTypes.SET_LANG]: (state, action) => ({ ...state, lang: action.value }),\n  [actionsTypes.SET_I18N]: (state, action) => ({ ...state, i18n: action.value }),\n  [actionsTypes.SET_DIR]: (state, action) => ({ ...state, dir: action.value }),\n  [actionsTypes.ADD_NOTIFICATION]: (state, action) => ({ ...state, notifications: [action.value, ...state.notifications] }),\n  [actionsTypes.REMOVE_NOTIFICATION]:\n    (state, action) => ({ ...state, notifications: state.notifications.filter((notif, index) => index !== action.value) }),\n  [actionsTypes.SET_HELP_STATE]: (state, action) => ({ ...state, helpState: action.value }),\n  [actionsTypes.SET_SEND_EVENT]: (state, action) => ({ ...state, sendEvent: action.value }),\n  [actionsTypes.SET_DOWNLOADS_COUNT]: (state, action) => ({ ...state, downloadsCount: action.value }),\n  [actionsTypes.SET_DISPLAY_QR_CODES]: (state, action) => ({ ...state, displayQrCodes: action.value }),\n  [actionsTypes.SET_SHOW_FORMATS_AVAILABLE_VIA_UDL]: (state, action) => ({ ...state, showFormatsAvailableViaUDL: action.value }),\n  [actionsTypes.SET_SHOW_FORMATS_REQUIRED_ONLINE_CONVERSION]: (state, action) => ({ ...state, showFormatsRequiredOnlineConversion: action.value }),\n  [actionsTypes.SET_WARN_BEFORE_CONVERTING]: (state, action) => ({ ...state, warnBeforeConverting: action.value }),\n  [actionsTypes.SET_WARN_ABOUT_COMPETITORS_DETECTION]: (state, action) => ({ ...state, warnAboutCompetitorsDetection: action.value }),\n  [actionsTypes.SET_SHOW_SNAPSHOT_BUTTON]: (state, action) => ({ ...state, showSnapshotButton: action.value }),\n  [actionsTypes.SET_APP_BUTTON_STYLE]: (state, action) => ({ ...state, appButtonStyle: action.value }),\n};\n\nconst getReducer = function (reducers) {\n  return function (state, action) {\n    if (typeof state === "undefined") {\n      return initialState;\n    }\n\n    return action.type in reducers ? reducers[action.type](state, action) : state;\n  };\n};\n\n/* harmony default export */ var reducers = (getReducer(reducers_handlers));\n\n\n// CONCATENATED MODULE: ./src/widget/store/reducers-tm.js\n\n\n\nreducers_handlers[actionsTypes.SET_LOAD_YANDEX_MARKET_ADVISER] = (state, action) => ({ ...state, loadYandexMarketAdviser: action.value });\n\n/* harmony default export */ var reducers_tm = (getReducer(reducers_handlers));\n\n\n// CONCATENATED MODULE: ./src/widget/store/get-observers.js\n/* harmony default export */ var get_observers = ((store, actions) => ({\n  downloadsCount: () => store.dispatch(actions.syncDownloads()),\n  displayQrCodes: () => store.dispatch(actions.syncDisplayQrCodes()),\n  showFormatsAvailableViaUDL: () => store.dispatch(actions.syncShowFormatsAvailableViaUDL()),\n  showFormatsRequiredOnlineConversion: () => store.dispatch(actions.syncShowFormatsRequiredOnlineConversion()),\n  warnBeforeConverting: () => store.dispatch(actions.syncWarnBeforeConverting()),\n  warnAboutCompetitorsDetection: () => store.dispatch(actions.syncWarnAboutCompetitorsDetection()),\n  showSnapshotButton: () => store.dispatch(actions.syncShowSnapshotButton()),\n  appButtonStyle: () => store.dispatch(actions.syncAppButtonStyle()),\n  lang: () => store.dispatch(actions.syncLang()),\n}));\n\n// CONCATENATED MODULE: ./src/widget/store/get-observers-tm.js\n\n\n/* harmony default export */ var get_observers_tm = ((store, actions) => {\n  const observers = get_observers(store, actions);\n  observers.loadYandexMarketAdviser = () => store.dispatch(actions.syncLoadYandexMarketAdviser());\n  return observers;\n});\n\n// CONCATENATED MODULE: ./src/widget/components/icons/play-video.jsx\n\n\nconst IconPlayVideo = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "15px",\n  height: "15px",\n  viewBox: "0 0 15 15",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M0.9,0h13.1c0.2,0,0.4,0.1,0.6,0.2C14.8,0.4,15,0.7,15,0.9v13.1c0, 0.2-0.1,0.5-0.3,0.7S14.3,15,14.1,15H0.9c-0.3, 0-0.7-0.2-0.8-0.5c0-0.1-0.1-0.3-0.1-0.5V0.9c0-0.3,0.1-0.5,0.3-0.7S0.7, 0,0.9,0 M0.9,1c0,0.8,0,1.5,0,2.3c0.7,0,1.2,0,1.9,0c0-0.8,0-1.6, 0-2.3C2.3,0.9,1.6,0.9,0.9,1C0.9,0.9,0.9,1,0.9,1M3.8,0.9c0, 4.4,0,8.7,0,13.1c2.5,0,5,0,7.5,0c0-4.4,0-8.7,0-13.1C8.7,0.9,6.3,0.9, 3.8,0.9 M12.2,0.9c0,0.8,0,1.6,0,2.3c0.7,0,1.2,0,1.9,0c0-0.8,0-1.5, 0-2.3c0-0.1,0-0.1-0.1-0.1C13.4,0.9,12.8,0.9,12.2,0.9 M0.9,4.2c0,0.9, 0,1.9,0,2.8c0.7,0,1.2,0,1.9,0c0-0.9,0-1.9,0-2.8C2.2,4.2,1.6,4.2,0.9, 4.2 M12.2,4.2c0,0.9,0,1.9,0,2.8c0.7,0,1.2,0,1.9,0c0-0.9,0-1.9, 0-2.8C13.4,4.2,12.8,4.2,12.2,4.2 M0.9,8c0,0.9,0,1.9,0,2.8c0.7,0,1.2, 0,1.9,0c0-0.9,0-1.9,0-2.8C2.2,8,1.6,8,0.9,8 M12.2,8c0,0.9,0,1.9,0, 2.8c0.7,0,1.2,0,1.9,0c0-0.9,0-1.9,0-2.8C13.4,8,12.8,8,12.2,8M0.9, 11.7c0,0.8,0,1.5,0,2.3c0,0,0,0.1,0.1,0.1c0.6,0,1.2,0,1.8,0c0-0.8,0-1.6, 0-2.3C2.2,11.7,1.6,11.7,0.9,11.7 M12.2,11.7c0,0.8,0,1.6,0,2.3c0.6, 0,1.2,0,1.8,0c0.1,0,0.1-0.1,0.1-0.1c0-0.8,0-1.5,0-2.3C13.4,11.7, 12.8,11.7,12.2,11.7z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M6.2,4.3c0.3,0,0.6,0.1,0.8,0.2C8,5.2,8.9,5.9,9.8,6.6c0.3,0.2,0.5, 0.5,0.5,0.8c0.1,0.3,0,0.7-0.2,0.8C10,8.3,9.8,8.4,9.8,8.4c-0.8,0.7-1.7, 1.2-2.5,1.9c-0.2,0.1-0.4,0.3-0.6,0.4c-0.4,0.1-0.8, 0.1-1-0.1c-0.3-0.2-0.5-0.4-0.5-0.7c0-0.2,0-0.3,0-0.5c0-1.3,0-2.6, 0-3.9c0-0.2,0.1-0.4,0.2-0.6C5.5,4.5,5.8,4.3,6.2,4.3 M6.2,5.3c-0.1,0-0.1, 0.1-0.1,0.2c0,1.4,0,2.8,0,4.1c0,0.2,0.2,0.3,0.4,0.2c0.9-0.7,1.9-1.3, 2.7-2c0.1-0.1,0.2-0.2,0.2-0.3c0-0.1,0-0.2-0.1-0.2C8.3,6.7,7.5,6,6.6, 5.3C6.5,5.3,6.4,5.2,6.2,5.3z"\n}));\n\n/* harmony default export */ var play_video = (IconPlayVideo);\n// CONCATENATED MODULE: ./src/widget/components/icons/sound-on.jsx\n\n\nconst IconSoundOn = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "15px",\n  height: "14.8px",\n  viewBox: "0 0 15 14.8",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M0.4,10.5h3.4L9,14.9C9.1,15,9.3,15,9.5,14.9c0.2-0.1,0.3-0.2, 0.3-0.4V0.4c0-0.2-0.1-0.3-0.3-0.4C9.3-0.1,9.1-0.1,9,0.1L3.8, 4.4H0.4C0.2,4.4,0,4.6,0,4.8v5.3C0,10.3,0.2,10.5,0.4,10.5L0.4, 10.5z M8.8,13.6L4.4,9.9V5l4.5-3.7V13.6z M0.9,5.3h2.6v4.4H0.9V5.3z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M12.7,11.5c0.2,0.2,0.5,0.2,0.6,0c2.2-2.2,2.2-5.9, 0-8.1c-0.2-0.2-0.5-0.2-0.6,0c-0.2,0.2-0.2,0.5,0,0.6c1.9,1.9,1.9, 5,0,6.8C12.5,11,12.5,11.3,12.7,11.5z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M10.8,9.6c0.2,0.2,0.5,0.2,0.6,0c1.2-1.2,1.2-3.2, 0-4.4c-0.2-0.2-0.5-0.2-0.6,0c-0.2,0.2-0.2,0.5,0,0.6c0.9,0.9,0.9, 2.3,0,3.1C10.7,9.2,10.7,9.5,10.8,9.6z"\n}));\n\n/* harmony default export */ var sound_on = (IconSoundOn);\n// CONCATENATED MODULE: ./src/widget/components/icons/resolution-8k.jsx\n\n\nconst IconResolution8k = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "13px",\n  viewBox: "0 0 21 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 20.75 12.75 Q 21 12.5 21 12.05 L 21 0.95 Q 21 0.5 20.75 0.25 20.5 0 20.15 0 L 0.85 0 Q 0.5 0 0.25 0.25 0 0.5 0 0.95 L 0 12.05 Q 0 12.5 0.25 12.75 0.5 13 0.85 13 L 20.15 13 Q 20.5 13 20.75 12.75 M 20.15 0.85 L 20.15 12.15 0.85 12.15 0.85 0.85 20.15 0.85 M 9 4.4 Q 8.95 2.3 6 2.3 3.05 2.3 2.95 4.5 2.95 5.65 4.5 6.3 3.5 6.7 3.15 7.25 2.75 7.8 2.8 8.7 2.85 9.45 3.75 10.1 4.7 10.7 6 10.7 9.05 10.7 9.2 8.15 9.25 7.35 8.6 6.75 8.25 6.45 7.5 6.05 9 5.6 9 4.4 M 7.2 4.15 Q 7.35 4.7 6.75 5.65 5.75 5.4 5.35 5.1 4.65 4.6 4.85 4.1 5.05 3.6 6 3.55 7.05 3.5 7.2 4.15 M 7.25 8.15 Q 7.4 9.25 5.75 9.3 4.8 9.35 4.55 8.45 4.25 7.5 5.25 6.55 7.05 7.1 7.25 8.15 M 18.1 2.55 L 15.95 2.55 13 6.15 13 2.55 11.15 2.55 11.15 10.25 13 10.25 13 7.9 13.6 7.2 16.1 10.25 18.25 10.25 15 6.3 18.1 2.55 Z"\n}));\n\n/* harmony default export */ var resolution_8k = (IconResolution8k);\n// CONCATENATED MODULE: ./src/widget/components/icons/resolution-4k.jsx\n\n\nconst IconResolution4k = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "13px",\n  viewBox: "0 0 21 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 20.75 12.75 Q 21 12.5 21 12.05 L 21 0.95 Q 21 0.5 20.75 0.25 20.5 0 20.15 0 L 0.85 0 Q 0.5 0 0.25 0.25 0 0.5 0 0.95 L 0 12.05 Q 0 12.5 0.25 12.75 0.5 13 0.85 13 L 20.15 13 Q 20.5 13 20.75 12.75 M 20.15 0.85 L 20.15 12.15 0.85 12.15 0.85 0.85 20.15 0.85 M 8.4 2.55 L 6.55 2.55 2.7 7.25 2.7 8.45 6.55 8.45 6.55 10.25 8.4 10.25 8.4 8.45 9.35 8.45 9.35 7.25 8.4 7.25 8.4 2.55 M 4.05 7.25 L 6.55 4.1 6.55 7.25 4.05 7.25 M 18.1 2.55 L 15.95 2.55 13 6.15 13 2.55 11.15 2.55 11.15 10.25 13 10.25 13 7.9 13.6 7.2 16.1 10.25 18.25 10.25 15 6.3 18.1 2.55 Z"\n}));\n\n/* harmony default export */ var resolution_4k = (IconResolution4k);\n// CONCATENATED MODULE: ./src/widget/components/icons/resolution-2k.jsx\n\n\nconst IconResolution2k = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "13px",\n  viewBox: "0 0 21 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 20.75 12.75 Q 21 12.5 21 12.05 L 21 0.95 Q 21 0.5 20.75 0.25 20.5 0 20.15 0 L 0.85 0 Q 0.5 0 0.25 0.25 0 0.5 0 0.95 L 0 12.05 Q 0 12.5 0.25 12.75 0.5 13 0.85 13 L 20.15 13 Q 20.5 13 20.75 12.75 M 20.15 0.85 L 20.15 12.15 0.85 12.15 0.85 0.85 20.15 0.85 M 5.55 3.7 Q 6.35 3.65 6.85 4.4 7.2 4.95 7.05 5.45 6.85 6.05 5.85 7 L 3.25 9.1 3.25 10.25 9.25 10.25 9.25 8.95 5.75 8.9 Q 7.25 7.7 7.75 7.15 8.45 6.45 8.7 5.75 9.1515625 4.3982421875 8.6 3.4 8.044921875 2.4546875 6.3 2.35 4.8 2.3 3.45 2.85 L 3.45 4.45 Q 4.8 3.7 5.55 3.7 M 18.1 2.55 L 15.95 2.55 13 6.15 13 2.55 11.15 2.55 11.15 10.25 13 10.25 13 7.9 13.6 7.2 16.1 10.25 18.25 10.25 15 6.3 18.1 2.55 Z"\n}));\n\n/* harmony default export */ var resolution_2k = (IconResolution2k);\n// CONCATENATED MODULE: ./src/widget/components/icons/resolution-fhd.jsx\n\n\nconst IconResolutionFhd = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "29px",\n  height: "13px",\n  viewBox: "0 0 29 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 28.75 0.25 Q 28.5 0 28.15 0 L 0.85 0 Q 0.5 0 0.25 0.25 0 0.5 0 0.95 L 0 12.05 Q 0 12.5 0.25 12.75 0.5 13 0.85 13 L 28.15 13 Q 28.5 13 28.75 12.75 29 12.5 29 12.05 L 29 0.95 Q 29 0.5 28.75 0.25 M 28.15 0.85 L 28.15 12.15 0.85 12.15 0.85 0.85 28.15 0.85 M 7.95 4 L 7.95 2.7 2.65 2.7 2.65 10.35 4.5 10.35 4.5 6.85 7.7 6.85 7.7 5.55 4.5 5.55 4.5 4 7.95 4 M 14.95 5.55 L 11.75 5.55 11.75 2.7 9.9 2.7 9.9 10.35 11.75 10.35 11.75 6.85 14.95 6.85 14.95 10.35 16.8 10.35 16.8 2.7 14.95 2.7 14.95 5.55 M 25.25 3.6 Q 24.25 2.75 22.95 2.7 L 19.25 2.7 19.25 10.3 22.95 10.3 Q 24.25 10.25 25.25 9.4 26.35 8.4 26.4 6.5 26.35 4.6 25.25 3.6 M 21.1 4 Q 23.1 3.95 23.9 4.55 24.6 5.1 24.55 6.5 24.6 7.9 23.9 8.45 23.1 9.05 21.1 9 L 21.1 4 Z"\n}));\n\n/* harmony default export */ var resolution_fhd = (IconResolutionFhd);\n// CONCATENATED MODULE: ./src/widget/components/icons/resolution-hd.jsx\n\n\nconst IconResolutionHd = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "13px",\n  viewBox: "0 0 21 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 20.75 12.75 Q 21 12.5 21 12.05 L 21 0.95 Q 21 0.5 20.75 0.25 20.5 0 20.15 0 L 0.85 0 Q 0.5 0 0.25 0.25 0 0.5 0 0.95 L 0 12.05 Q 0 12.5 0.25 12.75 0.5 13 0.85 13 L 20.15 13 Q 20.5 13 20.75 12.75 M 20.15 0.85 L 20.15 12.15 0.85 12.15 0.85 0.85 20.15 0.85 M 7.3 2.7 L 7.3 5.55 4.1 5.55 4.1 2.7 2.25 2.7 2.25 10.35 4.1 10.35 4.1 6.85 7.3 6.85 7.3 10.35 9.15 10.35 9.15 2.7 7.3 2.7 M 17.6 3.6 Q 16.6 2.75 15.3 2.7 L 11.6 2.7 11.6 10.3 15.3 10.3 Q 16.6 10.25 17.6 9.4 18.7 8.4 18.75 6.5 18.7 4.6 17.6 3.6 M 16.9 6.5 Q 16.95 7.9 16.25 8.45 15.45 9.05 13.45 9 L 13.45 4 Q 15.45 3.95 16.25 4.55 16.95 5.1 16.9 6.5 Z"\n}));\n\n/* harmony default export */ var resolution_hd = (IconResolutionHd);\n// CONCATENATED MODULE: ./src/widget/components/icons/fps-60.jsx\n\n\nconst IconFps60 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "13px",\n  viewBox: "0 0 21 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 20.75 12.75 Q 21 12.5 21 12.05 L 21 0.95 Q 21 0.5 20.75 0.25 20.5 0 20.15 0 L 0.85 0 Q 0.5 0 0.25 0.25 0 0.5 0 0.95 L 0 12.05 Q 0 12.5 0.25 12.75 0.5 13 0.85 13 L 20.15 13 Q 20.5 13 20.75 12.75 M 20.15 0.85 L 20.15 12.15 0.85 12.15 0.85 0.85 20.15 0.85 M 8.45 5.5 Q 7.2 4.95 5.3 5.75 5.7658203125 3.1357421875 9.05 4 L 9.05 2.6 Q 6.15 2.3 4.85 3.4 3.7 4.35 3.55 6.5 3.35 10.45 6.65 10.5 8 10.55 8.85 9.85 9.75 9.1 9.7 7.7 9.65 6.05 8.45 5.5 M 5.25 6.65 L 5.25 6.6 Q 6.3 6.2 7.1 6.45 7.85 6.75 7.9 7.5 7.95 9.3 6.55 9.3 5.25 9.3 5.25 6.65 M 14.4 2.5 Q 12.8 2.55 12.1 3.5 11.35 4.45 11.4 6.5 11.35 8.55 12.1 9.5 12.8 10.45 14.4 10.5 16 10.45 16.7 9.5 17.45 8.55 17.4 6.5 17.45 4.45 16.7 3.5 16 2.55 14.4 2.5 M 14.4 9.35 Q 13.15 9.4 13.15 6.45 13.15 3.65 14.4 3.65 15.15 3.65 15.45 4.4 15.65 4.95 15.65 6.45 15.65 9.3 14.4 9.35 Z"\n}));\n\n/* harmony default export */ var fps_60 = (IconFps60);\n// CONCATENATED MODULE: ./src/widget/helpers/formats-table.jsx\n\n\n\n\n\n\n\n\n\nconst getMediaType = data => {\n  const {\n    mimeType\n  } = data;\n\n  if (mimeType) {\n    if (mimeType.includes("video")) return "video";\n    if (mimeType.includes("audio")) return "audio";\n  }\n\n  return null;\n};\nconst getIconMediaType = data => {\n  const mediaType = getMediaType(data);\n  if (mediaType === "video") return /*#__PURE__*/react_default.a.createElement(play_video, null);\n  if (mediaType === "audio") return /*#__PURE__*/react_default.a.createElement(sound_on, null);\n  return null;\n};\nconst getIconResolution = data => {\n  const {\n    height\n  } = data;\n  if (height >= 4320) return /*#__PURE__*/react_default.a.createElement(resolution_8k, null); // 8k\n\n  if (height >= 2160) return /*#__PURE__*/react_default.a.createElement(resolution_4k, null); // 4k\n\n  if (height >= 1440) return /*#__PURE__*/react_default.a.createElement(resolution_2k, null); // 2k\n\n  if (height >= 1080) return /*#__PURE__*/react_default.a.createElement(resolution_fhd, {\n    className: "fhd"\n  }); // fullHD\n\n  if (height >= 720) return /*#__PURE__*/react_default.a.createElement(resolution_hd, null); // HD\n\n  return null;\n};\nconst getIconFramerate = data => {\n  const {\n    fps\n  } = data;\n  if (fps === 60) return /*#__PURE__*/react_default.a.createElement(fps_60, null);\n  return null;\n};\nconst getSize = data => {\n  const {\n    contentLength\n  } = data;\n\n  if (contentLength) {\n    const bytes = contentLength;\n    const k = 1024;\n    const decimals = 1;\n    const sizes = ["bytes", "Kb", "Mb", "Gb", "Tb", "Pb", "Eb", "Zb", "Yb"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `~ ${parseFloat((bytes / k ** i).toFixed(decimals))} ${sizes[i]}`;\n  }\n\n  return null;\n};\n\nconst getAudioExt = data => {\n  const {\n    mimeType\n  } = data;\n\n  if (mimeType) {\n    if (mimeType.includes("audio/mp4")) return "MP4";\n    if (mimeType.includes("audio/webm")) return "WEBM";\n    if (mimeType.includes("audio/mp3")) return "MP3";\n  }\n\n  return null;\n};\n\nconst getAudioBitrate = function (data) {\n  const {\n    bitrate\n  } = data;\n\n  if (bitrate) {\n    const rates = [1, 64, 128, 160, 192, 256, 320];\n    const finalRate = rates.find((rate, i) => {\n      if (i === 0) return false;\n      if (i === rates.length - 1) return true;\n      if (bitrate / 1000 <= rates[i]) return true;\n      return false;\n    });\n    return finalRate;\n  }\n\n  return null;\n};\nconst getExtTitle = function (item) {\n  if (item.mimeType.includes("audio")) {\n    const bitrate = getAudioBitrate(item);\n    return bitrate ? `${bitrate}kbps` : "";\n  }\n\n  const title = /^([0-9]+[a-z])/.exec(item.qualityLabel)[0];\n  return title;\n};\nconst getTitle = data => {\n  const mediaType = getMediaType(data);\n  const title = getExtTitle(data);\n  if (mediaType === "video") return `${data.type && data.type.toUpperCase()} ${title}`;\n  if (mediaType === "audio") return `${getAudioExt(data)} ${title}`;\n  return null;\n};\nconst getTitleEmbed = data => {\n  const mediaType = getMediaType(data);\n  const title = getExtTitle(data);\n  if (mediaType === "video") return `${data.type && data.type.toLowerCase()} - ${title}`;\n  if (mediaType === "audio") return `${getAudioExt(data).toLowerCase()} - ${title}`;\n  return null;\n};\n// CONCATENATED MODULE: ./src/widget/store/get-setters.js\n\n\n/* harmony default export */ var get_setters = ((state, dispatch, actions) => ({\n  download: state.module.download,\n  snap: state.module.snap,\n  sendEvent: state.sendEvent,\n  buttonTitle: state.defaultItem ? getExtTitle(state.defaultItem) : "",\n  setDefaultItem: item => dispatch(actions.setDefaultItem(item)),\n  setDisplayQrCodes: value => dispatch(actions.setDisplayQrCodes(value)),\n  setShowFormatsAvailableViaUDL: value => dispatch(actions.setShowFormatsAvailableViaUDL(value)),\n  setShowFormatsRequiredOnlineConversion: value => dispatch(actions.setShowFormatsRequiredOnlineConversion(value)),\n  setWarnBeforeConverting: value => dispatch(actions.setWarnBeforeConverting(value)),\n  setWarnAboutCompetitorsDetection: value => dispatch(actions.setWarnAboutCompetitorsDetection(value)),\n  setShowSnapshotButton: value => dispatch(actions.setShowSnapshotButton(value)),\n  setAppButtonStyle: value => dispatch(actions.setAppButtonStyle(value)),\n  setLang: value => dispatch(actions.setLang(value)),\n  addNotification: value => dispatch(actions.addNotification(value)),\n  removeNotification: value => dispatch(actions.removeNotification(value)),\n}));\n\n// CONCATENATED MODULE: ./src/widget/store/get-setters-tm.js\n\n\n/* harmony default export */ var get_setters_tm = ((state, dispatch, actions) => {\n  const setters = get_setters(state, dispatch, actions);\n  setters.setLoadYandexMarketAdviser = value => dispatch(actions.setLoadYandexMarketAdviser(value));\n  return setters;\n});\n\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === \'string\' && regex.test(uuid);\n}\n\n/* harmony default export */ var esm_browser_validate = (validate);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \'-\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \'-\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \'-\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \'-\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it\'s likely due to one\n  // of the following:\n  // - One or more input array values don\'t map to a hex octet (leading to\n  // "undefined" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError(\'Stringified UUID is invalid\');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ var esm_browser_stringify = (stringify);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/widget/analytics/index.js\n\n\n\nconst getHid = async function () {\n  const hid = await global_storage_tm.get("hid");\n  if (hid) {\n    return hid;\n  }\n  const newHid = esm_browser_v4();\n  global_storage_tm.set("hid", newHid);\n  return newHid;\n};\n\nconst fetchUtm = async function (getUtmUrl) {\n  const res = await fetch(getUtmUrl, { credentials: "include", mode: "cors" });\n  if (res.status === 200) {\n    return res.json();\n  }\n  throw new Error("fetching utm failed");\n};\n\nconst getUtm = async function (getUtmUrl) {\n  let utm;\n  try {\n    const raw = await global_storage_tm.get("utm");\n    if (raw) {\n      utm = JSON.parse(raw);\n    }\n  } catch (e) {\n  }\n\n  if (!utm) {\n    try {\n      utm = await fetchUtm(getUtmUrl);\n      global_storage_tm.set("utm", JSON.stringify(utm));\n    } catch (e) {\n      /* eslint-disable camelcase */\n      utm = {\n        utm_source: "",\n        utm_medium: "",\n        utm_campaign: "",\n        utm_term: "",\n        utm_content: "",\n      };\n      /* eslint-enable camelcase */\n    }\n  }\n  return utm;\n};\n\nconst getSendEvent = function (options, store) {\n  return async function (data) {\n    const { serviceName, defaultItem } = store.getState();\n\n    /* eslint-disable camelcase */\n    const {\n      utm_source,\n      utm_medium,\n      utm_campaign,\n      utm_term,\n      utm_content,\n    } = await getUtm(options.getUtmUrl);\n\n    const defData = {\n      version: options.version,\n      type: "udl-helper",\n      project: options.type,\n      branch: options.branch,\n      hid: await getHid(),\n      hash: options.hash,\n      utm_source: utm_source || "",\n      utm_medium: utm_medium || "",\n      utm_campaign: utm_campaign || "",\n      utm_term: utm_term || "",\n      utm_content: utm_content || "",\n      service: serviceName,\n      media_source: window.location.href,\n      format: defaultItem ? defaultItem.quality : "",\n      // format_high: "MAX_QUALITY"\n    };\n    /* eslint-enable camelcase */\n    try {\n      const xhr = new XMLHttpRequest();\n      xhr.open("POST", options.analyticsUrl, true);\n      xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");\n      xhr.send(JSON.stringify({ ...defData, ...data }));\n    } catch (e) {}\n  };\n};\n\n/* harmony default export */ var analytics = (getSendEvent);\n\n// CONCATENATED MODULE: ./src/widget/store/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst store_store = createStore(reducers_tm, applyMiddleware(redux_thunk_es));\n\nconst store_sendEvent = analytics(config["a" /* default */], store_store);\nstore_store.dispatch(actions_actions.setSendEvent(store_sendEvent));\n\nconst store_observers = get_observers_tm(store_store, actions_actions);\n\nObject.keys(store_observers).forEach(key => global_storage_tm.observe(key, store_observers[key]));\nObject.keys(store_observers).forEach(key => store_observers[key]());\n\n/* harmony default export */ var widget_store = (store_store);\n\nconst useAppState = function (keys) {\n  const dispatch = useDispatch();\n  const getStateProps = function (state) {\n    const setters = get_setters_tm(state, dispatch, actions_actions);\n    const result = {};\n    keys.forEach((key) => {\n      if (key in state) {\n        result[key] = state[key];\n      } else {\n        result[key] = setters[key];\n      }\n    });\n    return result;\n  };\n  return useSelector_useSelector(getStateProps);\n};\n\n\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js\nvar slicedToArray = __webpack_require__(34);\nvar slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js\nvar defineProperty = __webpack_require__(13);\nvar defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js\nvar classCallCheck = __webpack_require__(35);\nvar classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js\nvar createClass = __webpack_require__(36);\nvar createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);\n\n// CONCATENATED MODULE: ./node_modules/react-i18next/dist/es/context.js\n\n\n\n\nfunction context_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { context_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { context_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\nvar defaultOptions = {\n  bindI18n: \'languageChanged\',\n  bindI18nStore: \'\',\n  transEmptyNodeValue: \'\',\n  transSupportBasicHtmlNodes: true,\n  transKeepBasicHtmlNodesFor: [\'br\', \'strong\', \'i\', \'p\'],\n  useSuspense: true\n};\nvar i18nInstance;\nvar I18nContext = react_default.a.createContext();\nfunction setDefaults() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  defaultOptions = _objectSpread(_objectSpread({}, defaultOptions), options);\n}\nfunction getDefaults() {\n  return defaultOptions;\n}\nvar context_ReportNamespaces = function () {\n  function ReportNamespaces() {\n    classCallCheck_default()(this, ReportNamespaces);\n\n    this.usedNamespaces = {};\n  }\n\n  createClass_default()(ReportNamespaces, [{\n    key: "addUsedNamespaces",\n    value: function addUsedNamespaces(namespaces) {\n      var _this = this;\n\n      namespaces.forEach(function (ns) {\n        if (!_this.usedNamespaces[ns]) _this.usedNamespaces[ns] = true;\n      });\n    }\n  }, {\n    key: "getUsedNamespaces",\n    value: function getUsedNamespaces() {\n      return Object.keys(this.usedNamespaces);\n    }\n  }]);\n\n  return ReportNamespaces;\n}();\nfunction setI18n(instance) {\n  i18nInstance = instance;\n}\nfunction getI18n() {\n  return i18nInstance;\n}\nvar initReactI18next = {\n  type: \'3rdParty\',\n  init: function init(instance) {\n    setDefaults(instance.options.react);\n    setI18n(instance);\n  }\n};\nfunction composeInitialProps(ForComponent) {\n  return function (ctx) {\n    return new Promise(function (resolve) {\n      var i18nInitialProps = getInitialProps();\n\n      if (ForComponent.getInitialProps) {\n        ForComponent.getInitialProps(ctx).then(function (componentsInitialProps) {\n          resolve(_objectSpread(_objectSpread({}, componentsInitialProps), i18nInitialProps));\n        });\n      } else {\n        resolve(i18nInitialProps);\n      }\n    });\n  };\n}\nfunction getInitialProps() {\n  var i18n = getI18n();\n  var namespaces = i18n.reportNamespaces ? i18n.reportNamespaces.getUsedNamespaces() : [];\n  var ret = {};\n  var initialI18nStore = {};\n  i18n.languages.forEach(function (l) {\n    initialI18nStore[l] = {};\n    namespaces.forEach(function (ns) {\n      initialI18nStore[l][ns] = i18n.getResourceBundle(l, ns) || {};\n    });\n  });\n  ret.initialI18nStore = initialI18nStore;\n  ret.initialLanguage = i18n.language;\n  return ret;\n}\n// CONCATENATED MODULE: ./node_modules/react-i18next/dist/es/utils.js\nfunction warn() {\n  if (console && console.warn) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === \'string\') args[0] = "react-i18next:: ".concat(args[0]);\n\n    (_console = console).warn.apply(_console, args);\n  }\n}\nvar alreadyWarned = {};\nfunction warnOnce() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  if (typeof args[0] === \'string\' && alreadyWarned[args[0]]) return;\n  if (typeof args[0] === \'string\') alreadyWarned[args[0]] = new Date();\n  warn.apply(void 0, args);\n}\nfunction loadNamespaces(i18n, ns, cb) {\n  i18n.loadNamespaces(ns, function () {\n    if (i18n.isInitialized) {\n      cb();\n    } else {\n      var initialized = function initialized() {\n        setTimeout(function () {\n          i18n.off(\'initialized\', initialized);\n        }, 0);\n        cb();\n      };\n\n      i18n.on(\'initialized\', initialized);\n    }\n  });\n}\nfunction hasLoadedNamespace(ns, i18n) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!i18n.languages || !i18n.languages.length) {\n    warnOnce(\'i18n.languages were undefined or empty\', i18n.languages);\n    return true;\n  }\n\n  var lng = i18n.languages[0];\n  var fallbackLng = i18n.options ? i18n.options.fallbackLng : false;\n  var lastLng = i18n.languages[i18n.languages.length - 1];\n  if (lng.toLowerCase() === \'cimode\') return true;\n\n  var loadNotPending = function loadNotPending(l, n) {\n    var loadState = i18n.services.backendConnector.state["".concat(l, "|").concat(n)];\n    return loadState === -1 || loadState === 2;\n  };\n\n  if (options.bindI18n && options.bindI18n.indexOf(\'languageChanging\') > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns)) return false;\n  if (i18n.hasResourceBundle(lng, ns)) return true;\n  if (!i18n.services.backendConnector.backend) return true;\n  if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;\n  return false;\n}\nfunction utils_getDisplayName(Component) {\n  return Component.displayName || Component.name || (typeof Component === \'string\' && Component.length > 0 ? Component : \'Unknown\');\n}\n// CONCATENATED MODULE: ./node_modules/react-i18next/dist/es/useTranslation.js\n\n\n\nfunction useTranslation_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction useTranslation_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { useTranslation_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { useTranslation_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\nfunction useTranslation(ns) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var i18nFromProps = props.i18n;\n\n  var _ref = Object(react["useContext"])(I18nContext) || {},\n      i18nFromContext = _ref.i18n,\n      defaultNSFromContext = _ref.defaultNS;\n\n  var i18n = i18nFromProps || i18nFromContext || getI18n();\n  if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new context_ReportNamespaces();\n\n  if (!i18n) {\n    warnOnce(\'You will need to pass in an i18next instance by using initReactI18next\');\n\n    var notReadyT = function notReadyT(k) {\n      return Array.isArray(k) ? k[k.length - 1] : k;\n    };\n\n    var retNotReady = [notReadyT, {}, false];\n    retNotReady.t = notReadyT;\n    retNotReady.i18n = {};\n    retNotReady.ready = false;\n    return retNotReady;\n  }\n\n  if (i18n.options.react && i18n.options.react.wait !== undefined) warnOnce(\'It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.\');\n\n  var i18nOptions = useTranslation_objectSpread(useTranslation_objectSpread(useTranslation_objectSpread({}, getDefaults()), i18n.options.react), props);\n\n  var useSuspense = i18nOptions.useSuspense;\n  var namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;\n  namespaces = typeof namespaces === \'string\' ? [namespaces] : namespaces || [\'translation\'];\n  if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);\n  var ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(function (n) {\n    return hasLoadedNamespace(n, i18n, i18nOptions);\n  });\n\n  function getT() {\n    return {\n      t: i18n.getFixedT(null, i18nOptions.nsMode === \'fallback\' ? namespaces : namespaces[0])\n    };\n  }\n\n  var _useState = Object(react["useState"])(getT()),\n      _useState2 = slicedToArray_default()(_useState, 2),\n      t = _useState2[0],\n      setT = _useState2[1];\n\n  var isMounted = Object(react["useRef"])(true);\n  Object(react["useEffect"])(function () {\n    var bindI18n = i18nOptions.bindI18n,\n        bindI18nStore = i18nOptions.bindI18nStore;\n    isMounted.current = true;\n\n    if (!ready && !useSuspense) {\n      loadNamespaces(i18n, namespaces, function () {\n        if (isMounted.current) setT(getT());\n      });\n    }\n\n    function boundReset() {\n      if (isMounted.current) setT(getT());\n    }\n\n    if (bindI18n && i18n) i18n.on(bindI18n, boundReset);\n    if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);\n    return function () {\n      isMounted.current = false;\n      if (bindI18n && i18n) bindI18n.split(\' \').forEach(function (e) {\n        return i18n.off(e, boundReset);\n      });\n      if (bindI18nStore && i18n) bindI18nStore.split(\' \').forEach(function (e) {\n        return i18n.store.off(e, boundReset);\n      });\n    };\n  }, [i18n, namespaces.join()]);\n  var isInitial = Object(react["useRef"])(true);\n  Object(react["useEffect"])(function () {\n    if (isMounted.current && !isInitial.current) {\n      setT(getT());\n    }\n\n    isInitial.current = false;\n  }, [i18n]);\n  var ret = [t.t, i18n, ready];\n  ret.t = t.t;\n  ret.i18n = i18n;\n  ret.ready = ready;\n  if (ready) return ret;\n  if (!ready && !useSuspense) return ret;\n  throw new Promise(function (resolve) {\n    loadNamespaces(i18n, namespaces, function () {\n      resolve();\n    });\n  });\n}\n// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js\nvar styled_components_browser_esm = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/widget/competitors-detection.jsx\nconst competitorsDetection = () => {\n  if (document.querySelector("#savefrom__yt_btn") || // youtube.com\n  // document.querySelector(".savefrom_ok_download") || // ok.ru\n  // document.querySelector(".sf-feed-dl-btn") || // ok.ru\n  // document.querySelector(".sf-video-feed-bind-on-insert") || // ok.ru\n  document.querySelector("[class*=sf-notify-on-remove-]")) {\n    return "SaveFrom.net Helper";\n  }\n\n  return null;\n};\n\n/* harmony default export */ var competitors_detection = (competitorsDetection);\n// CONCATENATED MODULE: ./src/widget/components/ui/tooltip.jsx\n\n\n\n\nconst StHint = styled_components_browser_esm["a" /* default */].div`\n  ${props => props.theme && `\n    color: ${props.theme.color};\n    background-color: ${props.theme.background};\n    border: 1px solid ${props.theme.border};\n  `}\n  border-radius: 2px;\n  position: absolute;\n  top: ${props => props.posY}px;\n  left: ${props => props.posX}px;\n  max-width: 250px;\n  padding: 6px 8px;\n  font-family: sans-serif;\n  font-size: 12px;\n  line-height: 18px;\n  user-select: none;\n  box-sizing: border-box;\n  opacity: ${props => props.opacity};\n  transition: opacity 0.2s ease-in-out;\n  &::before {\n    content: " ";\n    position: absolute;\n    top: -3px;\n    right: -1px;\n    bottom: -3px;\n    left: -1px;\n  }\n`;\n\nconst mapState = state => ({\n  theme: state.theme,\n  module: state.module\n});\n\nconst Hint = ({\n  title,\n  element,\n  isElementMouseOver\n}) => {\n  const {\n    theme,\n    module\n  } = useSelector_useSelector(mapState);\n  const tooltip = document.getElementById("unidownloader-tooltip");\n  const [isTooltip, setIsTooltip] = Object(react["useState"])(false);\n  const [isTooltipMouseOver, setIsTooltipMouseOver] = Object(react["useState"])(false);\n  const [posX, setPosX] = Object(react["useState"])(0);\n  const [posY, setPosY] = Object(react["useState"])(0);\n  const [opacity, setOpacity] = Object(react["useState"])(0);\n\n  if (!isTooltip && tooltip && element && isElementMouseOver && !opacity) {\n    setIsTooltip(true);\n  }\n\n  const computedOpacity = isTooltip && (isElementMouseOver || isTooltipMouseOver) ? 1 : 0;\n\n  if (computedOpacity !== opacity) {\n    setOpacity(computedOpacity);\n  }\n\n  if (isTooltip) {\n    return Object(react_dom["createPortal"])( /*#__PURE__*/react_default.a.createElement(StHint, {\n      theme: theme && theme.tooltip,\n      ref: node => {\n        if (node) {\n          const elementRect = element.getBoundingClientRect();\n\n          if (elementRect) {\n            const nodeRect = node.getBoundingClientRect();\n\n            if (nodeRect) {\n              const margin = 2;\n              const {\n                getScrollContainer\n              } = module;\n              const scrollTop = getScrollContainer ? getScrollContainer().scrollTop : window.pageYOffset;\n              const elementTop = elementRect.top;\n              const nodeHeight = nodeRect.height;\n              const newNodeTop = elementTop - nodeHeight - margin;\n\n              if (newNodeTop - margin > 0) {\n                setPosY(scrollTop + newNodeTop);\n              } else {\n                setPosY(scrollTop + elementRect.bottom + margin);\n              }\n\n              const elementCenter = elementRect.left + elementRect.width / 2;\n              const nodeWidth = nodeRect.width;\n              const {\n                clientWidth\n              } = document.body;\n\n              if (elementCenter - nodeWidth / 2 < margin) {\n                setPosX(margin);\n              } else if (elementCenter + nodeWidth / 2 > clientWidth - margin) {\n                setPosX(clientWidth - margin - nodeWidth);\n              } else {\n                setPosX(elementCenter - nodeWidth / 2);\n              }\n            }\n          }\n        }\n      },\n      posX: posX,\n      posY: posY,\n      opacity: opacity,\n      onTransitionEnd: () => {\n        if (!isElementMouseOver && !isTooltipMouseOver) {\n          setIsTooltip(false);\n        }\n      },\n      onMouseEnter: () => {\n        setIsTooltipMouseOver(true);\n      },\n      onMouseLeave: () => {\n        setIsTooltipMouseOver(false);\n      }\n    }, title), tooltip);\n  }\n\n  return null;\n};\n\nconst Tooltip = ({\n  children,\n  title\n}) => {\n  const [element, setElement] = Object(react["useState"])();\n  const [isMouseOver, setIsMouseOver] = Object(react["useState"])(false);\n  const [isElementMouseOver, setIsElementMouseOver] = Object(react["useState"])(false);\n  const [isTimeout, setIsTimeout] = Object(react["useState"])(false);\n  const computedElementIsMouseOver = !isTimeout && isMouseOver;\n\n  if (isElementMouseOver !== computedElementIsMouseOver) {\n    setIsElementMouseOver(computedElementIsMouseOver);\n  }\n\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, Object(react["cloneElement"])(children, {\n    onMouseEnter: () => {\n      setIsMouseOver(true);\n      setIsTimeout(true);\n      setTimeout(() => {\n        setIsTimeout(false);\n      }, 200);\n    },\n    onMouseLeave: () => {\n      setIsElementMouseOver(false);\n      setIsMouseOver(false);\n    },\n    ref: node => {\n      if (node) setElement(node);\n    }\n  }), /*#__PURE__*/react_default.a.createElement(Hint, {\n    title: title,\n    element: element,\n    isElementMouseOver: isElementMouseOver\n  }));\n};\n\n/* harmony default export */ var ui_tooltip = (Tooltip);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(6);\n\n// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js\nfunction isAbsolute(pathname) {\n  return pathname.charAt(0) === \'/\';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node\'s url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = \'\';\n\n  var toParts = (to && to.split(\'/\')) || [];\n  var fromParts = (from && from.split(\'/\')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return \'/\';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === \'.\' || last === \'..\' || last === \'\';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === \'.\') {\n      spliceOne(fromParts, i);\n    } else if (part === \'..\') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift(\'..\');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== \'\' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift(\'\');\n\n  var result = fromParts.join(\'/\');\n\n  if (hasTrailingSlash && result.substr(-1) !== \'/\') result += \'/\';\n\n  return result;\n}\n\n/* harmony default export */ var resolve_pathname = (resolvePathname);\n\n// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js\nfunction value_equal_valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true;\n\n  // Otherwise, if either of them == null they are not equal.\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return (\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every(function(item, index) {\n        return valueEqual(item, b[index]);\n      })\n    );\n  }\n\n  if (typeof a === \'object\' || typeof b === \'object\') {\n    var aValue = value_equal_valueOf(a);\n    var bValue = value_equal_valueOf(b);\n\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n    return Object.keys(Object.assign({}, a, b)).every(function(key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\n/* harmony default export */ var value_equal = (valueEqual);\n\n// CONCATENATED MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js\nvar isProduction = "production" === \'production\';\nvar prefix = \'Invariant failed\';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + ": " + (message || \'\'));\n}\n\n/* harmony default export */ var tiny_invariant_esm = (invariant);\n\n// CONCATENATED MODULE: ./node_modules/history/esm/history.js\n\n\n\n\n\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === \'/\' ? path : \'/\' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === \'/\' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && \'/?#\'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === \'/\' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || \'/\';\n  var search = \'\';\n  var hash = \'\';\n  var hashIndex = pathname.indexOf(\'#\');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf(\'?\');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === \'?\' ? \'\' : search,\n    hash: hash === \'#\' ? \'\' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || \'/\';\n  if (search && search !== \'?\') path += search.charAt(0) === \'?\' ? search : "?" + search;\n  if (hash && hash !== \'#\') path += hash.charAt(0) === \'#\' ? hash : "#" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === \'string\') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n    if (location.pathname === undefined) location.pathname = \'\';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== \'?\') location.search = \'?\' + location.search;\n    } else {\n      location.search = \'\';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== \'#\') location.hash = \'#\' + location.hash;\n    } else {\n      location.hash = \'\';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError(\'Pathname "\' + location.pathname + \'" could not be decoded. \' + \'This is likely caused by an invalid percent-encoding.\');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== \'/\') {\n      location.pathname = resolve_pathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = \'/\';\n    }\n  }\n\n  return location;\n}\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && value_equal(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n     false ? undefined : void 0;\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we\'re still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === \'function\' ? prompt(location, action) : prompt;\n\n      if (typeof result === \'string\') {\n        if (typeof getUserConfirmation === \'function\') {\n          getUserConfirmation(result, callback);\n        } else {\n           false ? undefined : void 0;\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf(\'Android 2.\') !== -1 || ua.indexOf(\'Android 4.0\') !== -1) && ua.indexOf(\'Mobile Safari\') !== -1 && ua.indexOf(\'Chrome\') === -1 && ua.indexOf(\'Windows Phone\') === -1) return false;\n  return window.history && \'pushState\' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf(\'Trident\') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf(\'Firefox\') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf(\'CriOS\') === -1;\n}\n\nvar PopStateEvent = \'popstate\';\nvar HashChangeEvent = \'hashchange\';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : \'\';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n     false ? undefined : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = \'POP\';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we\'ve seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don\'t know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n     false ? undefined : void 0;\n    var action = \'PUSH\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? undefined : void 0;\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? undefined : void 0;\n    var action = \'REPLACE\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n         false ? undefined : void 0;\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: \'POP\',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = \'hashchange\';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === \'!\' ? path : \'!/\' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === \'!\' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf(\'#\');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can\'t use window.location.hash here because it\'s not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf(\'#\');\n  return hashIndex === -1 ? \'\' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + \'#\' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? \'slash\' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : \'\';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n     false ? undefined : void 0;\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn\'t always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = \'POP\';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we\'ve seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don\'t know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector(\'base\');\n    var href = \'\';\n\n    if (baseTag && baseTag.getAttribute(\'href\')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + \'#\' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n     false ? undefined : void 0;\n    var action = \'PUSH\';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we\'d\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n         false ? undefined : void 0;\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n     false ? undefined : void 0;\n    var action = \'REPLACE\';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we\'d\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n     false ? undefined : void 0;\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: \'POP\',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? [\'/\'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === \'string\' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n     false ? undefined : void 0;\n    var action = \'PUSH\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n     false ? undefined : void 0;\n    var action = \'REPLACE\';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = \'POP\';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: \'POP\',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/mini-create-react-context/dist/esm/index.js\nvar esm = __webpack_require__(17);\n\n// EXTERNAL MODULE: ./node_modules/path-to-regexp/index.js\nvar path_to_regexp = __webpack_require__(18);\nvar path_to_regexp_default = /*#__PURE__*/__webpack_require__.n(path_to_regexp);\n\n// CONCATENATED MODULE: ./node_modules/react-router/esm/react-router.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar react_router_createNamedContext = function createNamedContext(name) {\n  var context = Object(esm["a" /* default */])();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext =\n/*#__PURE__*/\nreact_router_createNamedContext("Router-History");\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext$1 = function createNamedContext(name) {\n  var context = Object(esm["a" /* default */])();\n  context.displayName = name;\n  return context;\n};\n\nvar react_router_context =\n/*#__PURE__*/\ncreateNamedContext$1("Router");\n\n/**\n * The public API for putting history on context.\n */\n\nvar react_router_Router =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose["a" /* default */])(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: "/",\n      url: "/",\n      params: {},\n      isExact: pathname === "/"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  };\n\n  _proto.render = function render() {\n    return react_default.a.createElement(react_router_context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, react_default.a.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\nvar react_router_MemoryRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose["a" /* default */])(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = createMemoryHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return react_default.a.createElement(react_router_Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(react_default.a.Component);\n\nif (false) {}\n\nvar react_router_Lifecycle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose["a" /* default */])(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(react_default.a.Component);\n\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n    !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return react_default.a.createElement(react_router_Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\nif (false) { var messageType; }\n\nvar cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (cache[path]) return cache[path];\n  var generator = path_to_regexp_default.a.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = "/";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === "/" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n\n/**\n * The public API for navigating programmatically with a component.\n */\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n    !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n    var history = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history.push : history.replace;\n    var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return react_default.a.createElement(react_router_Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = createLocation(prevProps.to);\n\n        if (!locationsAreEqual(prevLocation, _extends({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\nif (false) {}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = "" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = path_to_regexp_default()(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === "string" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== "") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === "/" && url === "" ? "/" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return react_default.a.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   false ? undefined : void 0;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar react_router_Route =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose["a" /* default */])(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react_default.a.createElement(react_router_context.Consumer, null, function (context$1) {\n      !context$1 ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = _extends({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that\'s the case.\n\n      if (Array.isArray(children) && children.length === 0) {\n        children = null;\n      }\n\n      return react_default.a.createElement(react_router_context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === "function" ?  false ? undefined : children(props) : children : component ? react_default.a.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  false ? undefined : children(props) : null);\n    });\n  };\n\n  return Route;\n}(react_default.a.Component);\n\nif (false) {}\n\nfunction react_router_addLeadingSlash(path) {\n  return path.charAt(0) === "/" ? path : "/" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return _extends({}, location, {\n    pathname: react_router_addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction react_router_stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = react_router_addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return _extends({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === "string" ? location : createPath(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n      false ? undefined : tiny_invariant_esm(false) ;\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a "static" <Router>, so-called because it\n * can\'t actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar react_router_StaticRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose["a" /* default */])(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, "PUSH");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, "REPLACE");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? "" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, createLocation(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? "/" : _this$props2$location,\n        rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);\n\n    var history = {\n      createHref: function createHref(path) {\n        return react_router_addLeadingSlash(basename + createURL(path));\n      },\n      action: "POP",\n      location: react_router_stripBasename(basename, createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler("go"),\n      goBack: staticHandler("goBack"),\n      goForward: staticHandler("goForward"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return react_default.a.createElement(react_router_Router, _extends({}, rest, {\n      history: history,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\nvar react_router_Switch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  Object(inheritsLoose["a" /* default */])(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n      !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      react_default.a.Children.forEach(_this.props.children, function (child) {\n        if (match == null && react_default.a.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, _extends({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? react_default.a.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(react_default.a.Component);\n\nif (false) {}\n\n/**\n * A public higher-order component to access the imperative API\n */\n\nfunction withRouter(Component) {\n  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = _objectWithoutPropertiesLoose(props, ["wrappedComponentRef"]);\n\n    return react_default.a.createElement(react_router_context.Consumer, null, function (context) {\n      !context ?  false ? undefined : tiny_invariant_esm(false) : void 0;\n      return react_default.a.createElement(Component, _extends({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  if (false) {}\n\n  return hoist_non_react_statics_cjs_default()(C, Component);\n}\n\nvar useContext = react_default.a.useContext;\nfunction useHistory() {\n  if (false) {}\n\n  return useContext(historyContext);\n}\nfunction useLocation() {\n  if (false) {}\n\n  return useContext(react_router_context).location;\n}\nfunction useParams() {\n  if (false) {}\n\n  var match = useContext(react_router_context).match;\n  return match ? match.params : {};\n}\nfunction useRouteMatch(path) {\n  if (false) {}\n\n  var location = useLocation();\n  var match = useContext(react_router_context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\nif (false) { var secondaryBuildName, initialBuildName, buildNames, react_router_key, global; }\n\n\n//# sourceMappingURL=react-router.js.map\n\n// CONCATENATED MODULE: ./src/widget/helpers/formats-list.js\nconst getFps = rec => (rec.fps > 30 ? rec.fps : 30);\n\nconst streamObj = streamList => streamList.length && streamList\n  .reduce((acc, rec) => {\n    const fps = getFps(rec);\n    acc[rec.qualityNum] = {\n      ...rec,\n      fps,\n    };\n    return acc;\n  }, {});\n\nconst formats_list_videoObj = (\n  videoList,\n  showFormatsAvailableViaUDL,\n  showFormatsRequiredOnlineConversion,\n  contentLimit,\n) => videoList.length && videoList\n  .filter(item => (\n    ("contentLength" in item) && !Number.isNaN(item.contentLength)\n  ))\n  .reduce((acc, rec) => {\n    const { qualityNum } = rec;\n    const fps = getFps(rec);\n    const setItem = () => {\n      const item = (rec.muxable && (rec.contentLength > contentLimit)) ? (\n        showFormatsAvailableViaUDL && {\n          availableInUdl: true,\n          ...rec,\n          fps,\n        }\n      ) : (\n        showFormatsRequiredOnlineConversion && {\n          conversionRequired: true,\n          ...rec,\n          fps,\n        }\n      );\n      if (item) {\n        if (!(qualityNum in acc)) acc[qualityNum] = {};\n        acc[qualityNum][fps] = item;\n      }\n    };\n    if ((qualityNum in acc) && (fps in acc[qualityNum])) {\n      const item = acc[qualityNum][fps];\n      const isItemMp4 = item.type === "mp4";\n      const isRecMp4 = rec.type === "mp4";\n      const isRecBitrateHigher = item.obj.bitrate < rec.obj.bitrate;\n      if ((!isItemMp4 && isRecMp4) ||\n        (isItemMp4 && isRecMp4 && isRecBitrateHigher) ||\n        (!isItemMp4 && !isRecMp4 && isRecBitrateHigher)\n      ) {\n        setItem();\n      }\n    } else {\n      setItem();\n    }\n    return acc;\n  }, {});\n\nconst formats_list_audioObj = audioList => audioList.length && audioList\n  .reduce((prev, current) => {\n    const isPrevMp3 = prev.mimeType.includes("audio/mp3");\n    const isCurrentMp3 = current.mimeType.includes("audio/mp3");\n    const isPrevMp4 = prev.mimeType.includes("audio/mp4");\n    const isCurrentMp4 = current.mimeType.includes("audio/mp4");\n    const isCurrentBitrateHigher = prev.bitrate < current.bitrate;\n    if (\n      (!isPrevMp3 && isCurrentMp3) ||\n      (isPrevMp3 && isCurrentMp3 && isCurrentBitrateHigher) ||\n      (!isPrevMp4 && isCurrentMp4) ||\n      (isPrevMp4 && isCurrentMp4 && isCurrentBitrateHigher) ||\n      (!isPrevMp3 && !isCurrentMp3 && !isPrevMp4 && !isCurrentMp4 && isCurrentBitrateHigher)\n    ) {\n      return current;\n    }\n    return prev;\n  });\n\nconst sortDescending = arr => arr.sort((a, b) => b - a);\n\nconst getMaxQualityNum = obj => obj && Object.keys(obj).reduce((a, b) => (a === 1080 ? a : Math.max(a, b)), 0);\n\nconst formatsList = (\n  streamInfo,\n  videoInfo,\n  audioInfo,\n  showFormatsAvailableViaUDL,\n  showFormatsRequiredOnlineConversion,\n  contentLimit,\n  loadMore,\n) => {\n  const sObj = streamObj(streamInfo || []);\n\n  const vObj = formats_list_videoObj(\n    videoInfo || [],\n    showFormatsAvailableViaUDL,\n    showFormatsRequiredOnlineConversion,\n    contentLimit,\n  );\n\n  const aObj = formats_list_audioObj(audioInfo || []);\n\n  let list = [];\n  const sObjMaxQualityNum = getMaxQualityNum(sObj);\n  const vObjMaxQualityNum = getMaxQualityNum(vObj);\n  const demoQualityNum = Math.max(sObjMaxQualityNum, vObjMaxQualityNum);\n  const minQualityNum = demoQualityNum >= 360 ? 360 : 0;\n  const sDemo = sObj && sObj[demoQualityNum];\n  const vDemo = vObj && vObj[demoQualityNum];\n  const sDemoFps = sDemo ? sDemo.fps : -1;\n  const vDemoList = vDemo && Object.keys(vDemo);\n  const vDemoFps = (vDemoList && vDemoList.length) ? vDemoList.reduce((a, b) => (vDemo[a].fps > vDemo[b].fps ? a : b)) : -1;\n  if (vDemoFps > sDemoFps) list.push(vDemo[vDemoFps]);\n  list = [\n    ...list,\n    ...sortDescending(Object.keys(sObj))\n      .map(rec => sObj[rec]),\n  ];\n\n  const vObjFps = Object.keys(vObj)\n    .reduce((acc, qualityNum) => {\n      const item = vObj[qualityNum];\n      Object.keys(item).map((fps) => {\n        if (!(fps in acc)) acc[fps] = {};\n        acc[fps][qualityNum] = item[fps];\n        return true;\n      });\n      return acc;\n    }, {});\n\n  const vList = sortDescending(Object.keys(vObjFps))\n    .reduce((acc, fps) => {\n      sortDescending(Object.keys(vObjFps[fps]))\n        .map((qualityNum) => {\n          if (qualityNum >= minQualityNum) {\n            const item = vObjFps[fps][qualityNum];\n            let isExist = false;\n            for (let i = 0; i < list.length; i++) {\n              const rec = list[i];\n              if (item.qualityNum === rec.qualityNum && item.fps === rec.fps) {\n                isExist = true;\n                break;\n              }\n            }\n            if (!isExist) acc.push(item);\n          }\n          return true;\n        });\n      return acc;\n    }, []);\n\n  const showMoreFormats = loadMore || vList.length < 3;\n  if (aObj) list.push(aObj);\n  if (showMoreFormats) {\n    list = [\n      ...list,\n      ...vList,\n    ];\n  }\n\n  if (list.length > 0) {\n    if (showFormatsAvailableViaUDL) {\n      list = [\n        ...list,\n        { availableInUdl: true, mimeType: "audio/mp3" },\n      ];\n    }\n    list = [\n      ...list,\n      { downloadUsingUdl: true },\n    ];\n  }\n\n  return { list, showMoreFormats };\n};\n\nconst formatsListEmbed = (\n  streamInfo,\n  audioInfo,\n) => {\n  const sObj = streamObj(streamInfo || []);\n  const list = sortDescending(Object.keys(sObj))\n    .map(rec => sObj[rec]);\n  const aObj = formats_list_audioObj(audioInfo || []);\n  if (aObj) list.push(aObj);\n  return list;\n};\n\n// CONCATENATED MODULE: ./src/widget/components/page/container.jsx\n\n\n\nconst Scontainer = styled_components_browser_esm["a" /* default */].div`\n  background-color: ${props => props.background || "white"};\n  border: 1px solid ${props => props.borderColor || "black"};\n  border-radius: 2px;\n  box-shadow: 0 0 8px ${props => props.boxShadowColor || "rgba(0,0,0,0.5)"};\n  cursor: default;\n  user-select: none;\n  font-family: sans-serif;\n  width: 460px;\n`;\n\nconst container_mapState = state => ({\n  theme: state.theme\n});\n\nconst Container = ({\n  children\n}) => {\n  const {\n    theme\n  } = useSelector_useSelector(container_mapState);\n  const globals = theme && theme.globals;\n  const background = globals && globals.background;\n  const borderColor = globals && globals.border;\n  const boxShadowColor = globals && globals.shadow;\n  return /*#__PURE__*/react_default.a.createElement(Scontainer, {\n    background: background,\n    borderColor: borderColor,\n    boxShadowColor: boxShadowColor\n  }, children);\n};\n\n/* harmony default export */ var container = (Container);\n// CONCATENATED MODULE: ./src/widget/components/page/header.jsx\n\n\n\n\nconst StHeader = styled_components_browser_esm["a" /* default */].h4`\n  margin: 0 16px;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 48px;\n  color: ${props => props.color || "black"};\n`;\n\nconst header_mapState = state => ({\n  theme: state.theme\n});\n\nconst Header = ({\n  children\n}) => {\n  const {\n    theme\n  } = useSelector_useSelector(header_mapState);\n  const location = useLocation();\n  const pathname = location && location.pathname;\n  const color = pathname === "/advert" ? theme && theme.advert && theme.advert.title_color : theme && theme.header;\n  return /*#__PURE__*/react_default.a.createElement(StHeader, {\n    color: color\n  }, children);\n};\n\n/* harmony default export */ var page_header = (Header);\n// CONCATENATED MODULE: ./src/widget/components/icons/heart.jsx\n\n\nconst IconHeart = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "18.7px",\n  viewBox: "0 0 21 18.7",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 21 5.8 Q 21 4.65 20.6 3.6 20.15 2.55 19.3 1.7 18.5 0.85 17.4 0.45 16.35 0 15.2 0 14.05 0 12.95 0.45 11.9 0.85 11.1 1.7 L 10.5 2.3 9.9 1.7 Q 9.1 0.85 8.05 0.45 7 0 5.8 0 4.65 0 3.6 0.45 2.5 0.85 1.7 1.7 0.85 2.55 0.4 3.6 0 4.65 0 5.8 0 6.95 0.4 8 0.85 9.1 1.7 9.9 L 10.5 18.7 19.3 9.9 Q 20.15 9.1 20.6 8 21 6.95 21 5.8 M 15.2 1.2 Q 16.1 1.2 16.95 1.55 17.8 1.9 18.45 2.55 19.1 3.2 19.45 4.1 19.8 4.9 19.8 5.8 19.8 6.7 19.45 7.55 19.1 8.4 18.45 9.05 L 10.5 17 2.55 9.05 Q 1.9 8.4 1.55 7.55 1.25 6.7 1.25 5.8 1.25 4.9 1.55 4.1 1.9 3.2 2.55 2.55 3.2 1.9 4.05 1.55 4.9 1.2 5.8 1.2 6.75 1.2 7.55 1.55 8.4 1.9 9.05 2.55 L 10.5 4 11.95 2.55 Q 12.6 1.9 13.45 1.55 14.3 1.2 15.2 1.2 Z"\n}));\n\n/* harmony default export */ var heart = (IconHeart);\n// CONCATENATED MODULE: ./src/widget/components/icons/gear.jsx\n\n\nconst IconGear = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "21px",\n  viewBox: "0 0 21 21",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M19.5,7.8l-1-0.2c-0.1-0.3-0.2-0.5-0.3-0.7l0.6-0.8c0.5-0.7,0.4-1.7-0.2-2.4l-1.2-1.2C17, 2.1,16.5,1.9,16,1.9c-0.4,0-0.8,0.1-1.1,0.3l-0.8,0.6c-0.3-0.1-0.5-0.2-0.8-0.3l-0.2-1C13, 0.6,12.2,0,11.3,0H9.6C8.7,0,7.9,0.6,7.8,1.5l-0.2,1C7.4,2.7,7.1,2.8,6.9,2.9L6,2.3C5.7, 2.1,5.3,1.9,5,1.9c-0.5,0-1,0.2-1.3,0.5L2.4,3.7C1.8,4.4,1.7,5.3,2.2,6.1l0.6,0.9C2.7,7.2, 2.6,7.4,2.5,7.7l-1,0.2C0.6,8,0,8.8,0,9.7v1.7c0,0.9,0.6,1.7,1.5,1.8l1,0.2c0.1,0.3,0.2, 0.5,0.3,0.7L2.3,15c-0.5,0.7-0.4,1.7,0.2,2.4l1.2,1.2c0.3,0.3,0.8,0.5,1.3,0.5c0.4,0, 0.8-0.1,1.1-0.3l0.9-0.6c0.2,0.1,0.5,0.2,0.7,0.3l0.2,1C8,20.4,8.7,21,9.6,21h1.7c0.9,0, 1.7-0.6,1.8-1.5l0.2-1c0.3-0.1,0.5-0.2,0.7-0.3l0.8,0.6c0.3,0.2,0.7,0.3,1.1,0.3c0.5,0, 1-0.2,1.3-0.5l1.2-1.2c0.6-0.6,0.7-1.6,0.2-2.4l-0.6-0.8c0.1-0.2,0.2-0.5,0.3-0.7l1-0.2c0.9-0.1, 1.5-0.9,1.5-1.8V9.6C21,8.7,20.4,8,19.5,7.8z M19.8,11.4c0,0.3-0.2,0.5-0.5,0.6l-1.4,0.2c-0.3, 0-0.5,0.2-0.5,0.5c-0.1,0.4-0.3,0.8-0.5,1.2c-0.1,0.2-0.1,0.5,0,0.7l0.8,1.1c0.2,0.2,0.1, 0.6-0.1,0.8l-1.2,1.2c-0.1,0.1-0.3,0.2-0.4,0.2c-0.1,0-0.2,0-0.4-0.1l-1.1-0.8c-0.2-0.1-0.5-0.2-0.7, 0c-0.4,0.2-0.8,0.4-1.2,0.5c-0.2,0.1-0.4,0.3-0.5,0.5L12,19.3c0,0.3-0.3,0.5-0.6,0.5H9.6c-0.3, 0-0.5-0.2-0.6-0.5l-0.2-1.4c0-0.2-0.2-0.5-0.5-0.5c-0.4-0.1-0.8-0.3-1.1-0.5c-0.1-0.1-0.2-0.1-0.3-0.1c-0.1, 0-0.3,0-0.4,0.1l-1.1,0.8c-0.1,0.1-0.2,0.1-0.3,0.1c-0.2, 0-0.3-0.1-0.4-0.2l-1.2-1.2c-0.2-0.2-0.2-0.5-0.1-0.8l0.8-1.1c0.1-0.2,0.2-0.5, 0-0.7c-0.2-0.4-0.4-0.8-0.5-1.2c-0.1-0.2-0.3-0.4-0.5-0.5L1.7,12c-0.3,0-0.5-0.3-0.5-0.6V9.7c0-0.3, 0.2-0.5,0.5-0.6l1.3-0.2c0.3,0,0.5-0.2,0.5-0.5C3.7,8,3.9,7.6,4.1,7.2C4.2,7,4.2,6.7,4,6.5L3.2, 5.4C3.1,5.1,3.1,4.8,3.3,4.6l1.2-1.2l0,0C4.6,3.2,4.8,3.2,5,3.2c0.1,0,0.2,0,0.4,0.1l1.1, 0.8c0.2,0.1,0.5,0.2,0.7,0c0.4-0.2,0.8-0.4,1.2-0.5c0.2-0.1,0.4-0.3,0.5-0.5L9,1.7c0-0.3, 0.3-0.5,0.6-0.5h1.7c0.3,0,0.5,0.2,0.6,0.5l0.2,1.3c0,0.3,0.2,0.5,0.5,0.5c0.4,0.1,0.8,0.3, 1.2,0.5c0.2,0.1,0.5,0.1,0.7,0l1.1-0.8c0.1-0.1,0.2-0.1,0.3-0.1c0.2,0,0.3,0.1,0.4,0.2l1.2, 1.2c0.2,0.2,0.2,0.5,0.1,0.8l-0.8,1.1c-0.1,0.2-0.2,0.5,0,0.7c0.2,0.4,0.4,0.8,0.5,1.2c0.1, 0.2,0.3,0.4,0.5,0.5L19.3,9l0,0c0.3,0,0.5,0.3,0.5,0.6V11.4z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M10.5,6.4c-2.3,0-4.1,1.8-4.1,4.1s1.8,4.1,4.1,4.1s4.1-1.8,4.1-4.1S12.8,6.4,10.5, 6.4z M10.5,13.4c-1.6,0-2.9-1.3-2.9-2.9s1.3-2.9,2.9-2.9s2.9,1.3,2.9, 2.9S12.1,13.4,10.5,13.4z"\n}));\n\n/* harmony default export */ var gear = (IconGear);\n// CONCATENATED MODULE: ./src/widget/components/icons/help.jsx\n\n\nconst IconHelp = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "19.1px",\n  height: "21px",\n  viewBox: "0 0 19.1 21",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M9.4,5.7c-1.9,0-2.8,1.1-2.8,1.9c0,0.6,0.5,0.8,0.9,0.8c0.8,0,0.5-1.1,1.9-1.1c0.7,0, 1.3,0.3,1.3,1c0,0.8-0.8,1.2-1.3,1.6c-0.4,0.4-1,0.9-1,2.2c0,0.7,0.2,1,0.8,1c0.7,0, 0.8-0.3,0.8-0.6c0-0.7,0-1.2,0.8-1.8c0.4-0.3,1.6-1.3,1.6-2.6S11.3,5.7,9.4,5.7z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M9.2,14.1c-0.6,0-1.1,0.5-1.1,1.1c0,0.6,0.5,1.1,1.1,1.1c0.6,0,1.1-0.5, 1.1-1.1C10.3,14.6,9.8,14.1,9.2,14.1z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M17.4,4l-6.2-3.6c-1-0.6-2.3-0.6-3.4,0L1.7,4C0.6,4.6,0,5.7,0,6.9v7.1c0,1.2,0.6,2.3, 1.7,2.9l6.2,3.6c1,0.6,2.3,0.6,3.4,0l6.2-3.6c1-0.6,1.7-1.7,1.7-2.9V6.9C19.1,5.7,18.5, 4.6,17.4,4z M17.5,14.1c0,0.6-0.3,1.2-0.9,1.5l-6.2,3.6c-0.5,0.3-1.2,0.3-1.7, 0l-6.2-3.6c-0.5-0.3-0.9-0.9-0.9-1.5V6.9c0-0.6,0.3-1.2,0.9-1.5l6.2-3.6c0.5-0.3, 1.2-0.3,1.7,0l6.2,3.6c0.5,0.3,0.9,0.9,0.9,1.5L17.5,14.1L17.5,14.1z"\n}));\n\n/* harmony default export */ var help = (IconHelp);\n// CONCATENATED MODULE: ./src/widget/components/icons/feedback.jsx\n\n\nconst IconFeedback = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "18.5px",\n  height: "21px",\n  viewBox: "0 0 18.5 21",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M9.2,2.5c-2.4,0-4.3,1.9-4.3,4.3c0,1.5,0.7,2.8,2,3.6c1.3,0.8,2.8,0.9,4.3, 0.2c0.3-0.1,0.4-0.5,0.3-0.8c-0.1-0.3-0.5-0.4-0.8-0.3C9.6,10,8.5,9.9,7.6, 9.4C6.7,8.8,6.2,7.8,6.2,6.8c0-1.7,1.4-3.1,3.1-3.1s3.1,1.4,3.1,3.1c0, 0.3-0.3,0.6-0.6,0.6c-0.3,0-0.6-0.2-0.6-0.6c0,0,0,0,0,0c0-1-0.8-1.8-1.8-1.8S7.4, 5.8,7.4,6.8s0.8,1.8,1.8,1.8c0.5,0,0.9-0.2,1.2-0.5c0.3,0.3,0.8,0.5,1.2, 0.5c1,0,1.8-0.8,1.8-1.8C13.5,4.4,11.6,2.5,9.2,2.5z M9.8,6.9c0,0.3-0.3, 0.5-0.6,0.5c-0.3,0-0.6-0.3-0.6-0.6c0-0.3,0.3-0.6,0.6-0.6c0.3,0,0.6,0.2, 0.6,0.5C9.8,6.8,9.8,6.8,9.8,6.9z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M18.5,8.1c0-0.2-0.1-0.3-0.2-0.4L16,5.4V0.6C16,0.3,15.7,0,15.4,0H3.1C2.7, 0,2.5,0.3,2.5,0.6v4.7L0.2,7.6c0,0,0,0,0,0C0.1,7.8,0,7.9,0,8.1c0,0,0,0,0, 0v11.1c0,1,0.8,1.8,1.8,1.8h14.8c1,0,1.8-0.8,1.8-1.8L18.5,8.1C18.5,8.1, 18.5,8.1,18.5,8.1z M16,7.1l1,1l-1,1V7.1z M3.7,5.6C3.7,5.6,3.7,5.6,3.7, 5.6V1.2h11.1v4.4c0,0,0,0,0,0v4.7l-3.3,3.3H7l-3.3-3.3V5.6z M2.5,7.1v2l-1-1L2.5, 7.1zM1.2,18.9V9.6l4.7,4.7L1.2,18.9z M2.1,19.8L7,14.8h4.4l4.9, 4.9H2.1z M17.2,18.9l-4.7-4.7l4.7-4.7V18.9z"\n}));\n\n/* harmony default export */ var feedback = (IconFeedback);\n// CONCATENATED MODULE: ./src/widget/components/icons/arrow-back.jsx\n\n\nconst IconArrowBack = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "16px",\n  height: "16px",\n  viewBox: "0 0 16 16",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M16,9.5v-3H6.2l3.6-2.8V0.2L0,7.9l9.8,7.9v-3.5L6.3,9.5H16z"\n}));\n\n/* harmony default export */ var arrow_back = (IconArrowBack);\n// CONCATENATED MODULE: ./src/widget/components/page/footer.jsx\n\n\n\n\n\n\n\n\n\n\n\nconst footer_Container = styled_components_browser_esm["a" /* default */].div`\n  margin: 0 16px;\n  padding: 10px 0 14px;\n  display: flex;\n  border-top: 1px solid ${props => props.borderTop};\n  ${props => props.justifyContentEnd && "justify-content: flex-end;"}\n  & button {\n    & svg path { fill: ${props => props.buttonColor}; }\n    & span { color: ${props => props.buttonColor}; }\n    &:hover {\n      & svg path { fill: ${props => props.buttonHoverColor}; }\n      & span { color: ${props => props.buttonHoverColor}; }\n    }\n  }\n`;\nconst Button = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  padding: 0;\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  ${props => props.spaceBetween && "margin: 0 20px;"}\n`;\nconst ButtonBack = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  display: flex;\n  align-items: center;\n  border: none;\n  margin: 2px 0;\n  padding: 0;\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  & svg {\n    ${props => props.dir === "rtl" && "transform: scale3d(-1, 1, 1);"}\n  }\n`;\nconst TextBack = styled_components_browser_esm["a" /* default */].span`\n  font-weight: 500;\n  font-size: 14px;\n  &::before {\n    content: " ";\n    display: inline-block;\n    width: 9px;\n  }\n`;\n\nconst footer_mapState = state => ({\n  dir: state.dir,\n  theme: state.theme,\n  sendEvent: state.sendEvent,\n  downloadsCount: state.downloadsCount\n});\n\nconst Footer = () => {\n  const {\n    dir,\n    theme,\n    sendEvent,\n    downloadsCount\n  } = useSelector_useSelector(footer_mapState);\n  const location = useLocation();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const history = useHistory();\n  const pathname = location && location.pathname;\n  const isHome = pathname === "/";\n  const borderTop = theme && theme.footer_border_top;\n  const buttonStyles = theme && theme.icon_button;\n  const buttonColor = buttonStyles && buttonStyles.color;\n  const buttonHoverColor = buttonStyles && buttonStyles.hover;\n  return /*#__PURE__*/react_default.a.createElement(footer_Container, {\n    justifyContentEnd: isHome,\n    borderTop: borderTop,\n    buttonColor: buttonColor,\n    buttonHoverColor: buttonHoverColor\n  }, isHome ? /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, downloadsCount > 0 && /*#__PURE__*/react_default.a.createElement(Button, {\n    onClick: evt => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      sendEvent({\n        action: "share"\n      });\n      history.push("/advert");\n    },\n    spaceBetween: true\n  }, /*#__PURE__*/react_default.a.createElement(heart, null)), /*#__PURE__*/react_default.a.createElement(Button, {\n    onClick: evt => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      sendEvent({\n        action: "settings"\n      });\n      history.push("/settings");\n    }\n  }, /*#__PURE__*/react_default.a.createElement(gear, null)), /*#__PURE__*/react_default.a.createElement(Button, {\n    onClick: () => {\n      sendEvent({\n        action: "help"\n      });\n      history.push("/help");\n    },\n    spaceBetween: true\n  }, /*#__PURE__*/react_default.a.createElement(help, null)), /*#__PURE__*/react_default.a.createElement(Button, {\n    onClick: () => {\n      const {\n        language\n      } = i18n;\n      const {\n        type\n      } = config["a" /* default */];\n      const landingUrl = `https://unidownloader.com/${language}/contact-us?from_${type === "udl-usrscr" ? "usrscr" : "ext"}=1`;\n      window.open(landingUrl, "_blank");\n    }\n  }, /*#__PURE__*/react_default.a.createElement(feedback, null))) : /*#__PURE__*/react_default.a.createElement(ButtonBack, {\n    dir: dir,\n    onClick: () => history.go(-1)\n  }, /*#__PURE__*/react_default.a.createElement(arrow_back, null), /*#__PURE__*/react_default.a.createElement(TextBack, null, t("return_to_the_previous_screen"))));\n};\n\n/* harmony default export */ var footer = (Footer);\n// CONCATENATED MODULE: ./src/widget/components/error-boundary.jsx\n\n\n\nclass error_boundary_ErrorBoundary extends react["Component"] {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    const {\n      children,\n      theme,\n      embed\n    } = this.props;\n    const {\n      hasError\n    } = this.state;\n    const globals = theme && theme.globals;\n    const color = globals && globals.color;\n\n    if (hasError) {\n      // You can render any custom fallback UI\n      return /*#__PURE__*/react_default.a.createElement("svg", {\n        xmlns: "http://www.w3.org/2000/svg",\n        width: "38px",\n        height: "34px",\n        viewBox: "0 0 38 34",\n        style: {\n          width: embed && 20,\n          height: "100%"\n        }\n      }, /*#__PURE__*/react_default.a.createElement("path", {\n        fill: embed ? "white" : color,\n        d: " M 38 17 Q 38 9.95 32.4 5 26.85 0 19 0 11.15 0 5.55 5 0 9.95 0 17 0 22.198046875 3 26.25 L 0 34 9.25 31.65 Q 13.608203125 34 19 34 26.85 34 32.4 29 38 24.05 38 17 M 23.9 9 L 25.05 10.2 26.25 9 Q 27.5 7.75 28.75 9 29.95 10.25 28.75 11.45 L 27.55 12.65 28.8 13.9 Q 30.05 15.15 28.8 16.35 27.55 17.6 26.3 16.35 L 25.05 15.1 23.85 16.3 Q 22.6 17.55 21.4 16.35 20.15 15.1 21.4 13.85 L 22.6 12.65 21.45 11.5 Q 20.25 10.25 21.5 9 22.7 7.8 23.9 9 M 11.75 8.95 L 13 10.15 14.2 8.95 Q 15.4 7.7 16.65 9 17.85 10.2 16.65 11.4 L 15.45 12.6 16.65 13.8 Q 17.9 15.05 16.7 16.25 15.45 17.5 14.2 16.25 L 13 15.05 11.75 16.25 Q 10.5 17.5 9.3 16.3 8.05 15.05 9.3 13.8 L 10.5 12.6 9.3 11.4 Q 8.1 10.2 9.35 8.95 10.55 7.7 11.75 8.95 M 8.65 23.1 Q 19.35 17.75 29.4 23.1 L 29.4 25.7 Q 19.35 20.35 8.65 25.7 L 8.65 23.1 Z"\n      }));\n    }\n\n    return children;\n  }\n\n}\n\nconst error_boundary_mapStateToProps = state => ({\n  theme: state.theme\n});\n\n/* harmony default export */ var error_boundary = (connect_connect(error_boundary_mapStateToProps)(error_boundary_ErrorBoundary));\n// CONCATENATED MODULE: ./src/widget/components/page/index.jsx\n\n\n\n\n\n\n\nconst Page = ({\n  children,\n  title\n}) => {\n  const location = useLocation();\n  const pathname = location && location.pathname;\n  return /*#__PURE__*/react_default.a.createElement(error_boundary, null, /*#__PURE__*/react_default.a.createElement(container, null, /*#__PURE__*/react_default.a.createElement(page_header, null, title), children, pathname !== "/advert" && /*#__PURE__*/react_default.a.createElement(footer, null)));\n};\n\n/* harmony default export */ var page = (Page);\n// CONCATENATED MODULE: ./src/widget/components/icons/unidownloader.jsx\n\n\nconst IconUnidownloader = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "17.7px",\n  height: "20px",\n  viewBox: "0 0 17.7 20",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M0,5.9h2.9V5l8.8,4.9v0.1L2.9,15V9.1H0V20L17.7,9.8L0,0V5.9z"\n}));\n\n/* harmony default export */ var unidownloader = (IconUnidownloader);\n// CONCATENATED MODULE: ./src/widget/components/icons/cpu-activity.jsx\n\n\nconst IconCpuActivity = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "18px",\n  height: "18px",\n  viewBox: "0 0 18 18",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M10.9,6c-0.2-0.1-0.3,0-0.5,0.1s-0.2,0.3-0.2,0.4l-1.1,4.1L7.7, 5.5c0-0.1-0.1-0.3-0.2-0.4C7.3,5,7.2,5,7,5C6.9,5.1,6.8,5.2,6.7, 5.3L5.1,9.1H4.4c-0.1,0-0.3,0-0.4,0.1C4,9.3,3.9,9.4,3.9,9.6c0,0.2,0,0.3,0.2, 0.4c0.1,0.1,0.3,0.1,0.4,0.1l0.9,0l0,0c0.4,0,0.5-0.3,0.6-0.4l1.1-2.5l1.5, 5.5c0.1,0.2,0.1,0.3,0.2,0.4c0.1,0.1,0.2,0.1,0.4,0.1c0.1,0,0.2-0.1, 0.3-0.2c0.1-0.1,0.1-0.3,0.2-0.4l0,0l1.1-3.9l0.4,1.4h2.3c0.1,0,0.3-0.1, 0.4-0.1C13.9,9.9,14,9.8,14, 9.6s-0.1-0.3-0.1-0.4c-0.1-0.1-0.3-0.1-0.4-0.1h-1.5l-0.8-2.7C11.1,6.2,11.1, 6.1,10.9,6 M17.9,5.8c-0.1-0.1-0.3-0.2-0.4-0.2h-2.2c-0.1,0-0.3,0.1-0.4, 0.2c-0.1,0.1-0.1,0.2-0.2,0.3v8.5H3.3V3.3h11.4v1.4c0,0.1,0.1,0.3,0.2, 0.4c0.1,0.1,0.2,0.2,0.4,0.2s0.3,0,0.4-0.2c0.1-0.1,0.1-0.3, 0.2-0.4V3.3c0-0.3-0.1-0.5-0.4-0.7c-0.3-0.3-0.6-0.4-0.9-0.4h-2.1V0.6c0-0.1-0.1-0.3-0.2-0.4C12.1, 0.1,12,0,11.8,0c-0.2,0-0.3,0.1-0.4,0.2c-0.1,0.1-0.1,0.3-0.1, 0.4v1.7H9.6V0.6c0-0.1-0.1-0.3-0.2-0.4C9.3,0.1,9.2,0,9,0S8.7,0.1,8.6,0.2C8.5, 0.3,8.4,0.4,8.4,0.6v1.7H6.8V0.6c0-0.1,0-0.3-0.2-0.4C6.5,0.1,6.4,0,6.2,0C6, 0,5.9,0.1,5.8,0.2C5.7,0.3,5.7,0.4,5.7,0.6v1.7H3.5c-0.3,0-0.6,0.1-0.9,0.4C2.4, 2.8,2.3,3,2.2,3.3v2.4H0.6c-0.1,0-0.3,0.1-0.4,0.2C0.1,5.9,0,6,0,6.2c0,0.2,0.1, 0.3,0.2,0.4c0.1,0.1,0.3,0.2,0.4,0.2h1.7v1.7H0.6c-0.1,0-0.3,0.1-0.4,0.2C0.1,8.7, 0,8.8,0,9s0.1,0.3,0.2,0.4c0.1,0.1,0.3,0.2,0.4,0.2h1.7v1.7H0.6c-0.1,0-0.3,0.1-0.4, 0.1C0.1,11.5,0,11.6,0,11.8c0,0.2,0.1,0.3,0.2,0.4c0.1,0.1,0.3,0.2,0.4,0.2h1.7v2.3c0, 0.3,0.2,0.5,0.3,0.7c0.3,0.3,0.6,0.4,0.9,0.4h2.2v1.7c0,0.1,0.1,0.3,0.2,0.4C5.9,17.9, 6,18,6.2,18c0.2,0,0.3-0.1,0.4-0.1c0.1-0.1,0.2-0.3,0.2-0.4v-1.7h1.7v1.7c0,0.1,0.1,0.3, 0.2,0.4C8.7,17.9,8.8,18,9,18s0.3-0.1,0.4-0.1c0.1-0.1,0.2-0.3,0.2-0.4v-1.7h1.7v1.7c0, 0.1,0.1,0.3,0.1,0.4c0.1,0.1,0.2,0.1,0.4,0.1c0.2,0,0.3-0.1,0.4-0.1c0.1-0.1,0.2-0.3, 0.2-0.4v-1.7h2.3c0.3,0,0.5-0.1,0.7-0.4c0.3-0.3,0.4-0.6,0.4-0.9v-2.2h1.7c0.1,0,0.3-0.1, 0.4-0.2c0.1-0.1,0.1-0.2, 0.1-0.4c0-0.2-0.1-0.3-0.1-0.4c-0.1-0.1-0.3-0.1-0.4-0.1h-1.7V9.6h1.7c0.1,0,0.3-0.1, 0.4-0.2C17.9,9.3,18,9.2,18, 9s-0.1-0.3-0.1-0.4c-0.1-0.1-0.3-0.2-0.4-0.2h-1.7V6.8h1.7c0.1,0,0.3,0,0.4-0.2C17.9, 6.5,18,6.4,18,6.2C18,6,17.9,5.9,17.9,5.8z"\n}));\n\n/* harmony default export */ var cpu_activity = (IconCpuActivity);\n// CONCATENATED MODULE: ./src/widget/components/icons/external-link.jsx\n\n\nconst IconExternalLink = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "15px",\n  height: "15px",\n  viewBox: "0 0 15 15",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M14.1,0H8.9C8.4,0,8,0.4,8,0.9s0.4,0.9,0.9,0.9h2.9L7,6.7C6.8,6.9,6.7,7.1,6.7, 7.4S6.8,7.9,7,8c0.2,0.2,0.4,0.3,0.7,0.3c0.2,0,0.5-0.1,0.7-0.3l4.9-4.9v2.9c0, 0.5,0.4,0.9,0.9,0.9C14.6,7,15,6.6,15,6.1V0.9C15,0.4,14.6,0,14.1,0z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M10.6,13.4h-9v-9h6.8L10,2.8H0.8C0.4,2.8,0,3.1,0,3.6v10.6C0,14.6,0.4,15,0.8, 15h10.6c0.4,0,0.8-0.4,0.8-0.8V5l-1.6,1.6V13.4z"\n}));\n\n/* harmony default export */ var external_link = (IconExternalLink);\n// CONCATENATED MODULE: ./src/widget/components/icons/copy.jsx\n\n\nconst IconCopy = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "13px",\n  height: "15px",\n  viewBox: "0 0 13 15",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M9.5,0H1.4C0.6,0,0,0.6,0,1.4v9.5h1.4V1.4h8.2V0z M11.6,2.7H4.1c-0.8,0-1.4,0.6-1.4, 1.4v9.5c0,0.8,0.6,1.4,1.4,1.4h7.5c0.8,0,1.4-0.6,1.4-1.4V4.1C13,3.3,12.3,2.7, 11.6,2.7z M11.6,13.6H4.1V4.1h7.5V13.6z"\n}));\n\n/* harmony default export */ var icons_copy = (IconCopy);\n// CONCATENATED MODULE: ./src/widget/components/icons/qr-code.jsx\n\n\nconst IconQrCode = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "15px",\n  height: "15px",\n  viewBox: "0 0 15 15",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M0,0v6.8h6.8V0H0z M5.9,5.9H1V1h4.9L5.9,5.9L5.9,5.9z"\n}), /*#__PURE__*/react_default.a.createElement("rect", {\n  fill: color,\n  x: "2",\n  y: "2",\n  width: "2.9",\n  height: "2.9"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M8.2,0v6.8H15V0H8.2z M14,5.9H9.1V1H14V5.9z"\n}), /*#__PURE__*/react_default.a.createElement("rect", {\n  fill: color,\n  x: "10.1",\n  y: "2",\n  width: "2.9",\n  height: "2.9"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M0,8.2V15h6.8V8.2H0z M5.9,14H1V9.1h4.9L5.9,14L5.9,14z"\n}), /*#__PURE__*/react_default.a.createElement("rect", {\n  fill: color,\n  x: "2",\n  y: "10.1",\n  width: "2.9",\n  height: "2.9"\n}), /*#__PURE__*/react_default.a.createElement("polygon", {\n  fill: color,\n  points: "8.2,8.2 8.2,15 10.1,15 10.1,14 9.1,14 9.1,12.1 10.1,12.1 10.1,11.1 9.1,11.1 9.1,9.1 10.1,9.1 10.1,8.2 "\n}), /*#__PURE__*/react_default.a.createElement("rect", {\n  fill: color,\n  x: "14",\n  y: "8.2",\n  width: "1",\n  height: "1"\n}), /*#__PURE__*/react_default.a.createElement("polygon", {\n  fill: color,\n  points: "14,14 13,14 13,15 15,15 15,10.4 14,10.4 "\n}), /*#__PURE__*/react_default.a.createElement("rect", {\n  fill: color,\n  x: "11.1",\n  y: "8.2",\n  width: "2",\n  height: "1"\n}), /*#__PURE__*/react_default.a.createElement("polygon", {\n  fill: color,\n  points: "13,12.1 12.1,12.1 12.1,11.1 13,11.1 13,10.1 11.1,10.1 11.1,13 13,13 "\n}), /*#__PURE__*/react_default.a.createElement("rect", {\n  fill: color,\n  x: "11.1",\n  y: "14",\n  width: "1",\n  height: "1"\n}));\n\n/* harmony default export */ var qr_code = (IconQrCode);\n// CONCATENATED MODULE: ./src/widget/components/icons/check.jsx\n\n\nconst IconCheck = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "30px",\n  height: "21.5px",\n  viewBox: "0 0 30 21.5",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M29.7,0c-0.5-0.5-1.2-0.5-1.6,0L9.3,18.7L2,11.3c-0.5-0.5-1.2-0.5-1.6, 0c-0.5,0.5-0.5,1.2,0,1.6l8.2,8.2c0.5,0.5,1.2,0.5,1.6,0L29.7,1.6C30.1, 1.2,30.1,0.5,29.7,0z"\n}));\n\n/* harmony default export */ var check = (IconCheck);\n// CONCATENATED MODULE: ./src/widget/components/formats-table/cell.jsx\n\n\n\nconst StCell = styled_components_browser_esm["a" /* default */].td`\n  position: relative;\n  z-index: 1;\n  white-space: nowrap;\n  font-size: 14px;\n  color: ${props => props.color || "black"};\n  &:first-child::before,\n  &:last-child::after,\n  &:nth-child(5)[colspan]:not(:last-child)::after {\n    content: " ";\n    display: inline-block;\n    width: 16px;\n  }\n  &:first-child,\n  &:not(:nth-child(5)):last-child {\n    width: 32px;\n  }\n  &:nth-child(2) { padding: 0 10px; }\n  &:nth-child(3):not(:last-child) div svg {\n    fill: ${props => props.videoIconColor};\n  }\n  &:nth-child(3):last-child,\n  &:not(:nth-child(3)) {\n    & svg { vertical-align: middle; }\n  }\n  &:nth-child(4) {\n    &:not([colspan]):not(:empty) {\n      width: 18px;\n      & svg { fill: ${props => props.videoIconColor}; }\n      & + td { padding: 0 5px; }\n    }\n    &[colspan] + td { width: 20px; }\n  }\n  &:first-child svg {\n    fill: ${props => props.mediaTypeIconColor};\n  }\n  & button {\n    & svg { fill: ${props => props.serviceIconColor}; }\n    &:hover svg { fill: ${props => props.serviceIconHoverColor}; }\n  }\n`;\n\nconst cell_mapState = state => ({\n  theme: state.theme\n});\n\nconst Cell = ({\n  colSpan,\n  children\n}) => {\n  const {\n    theme\n  } = useSelector_useSelector(cell_mapState);\n  const formatsTable = theme && theme.formats_table;\n  const color = formatsTable && formatsTable.color;\n  const mediaTypeIconColor = formatsTable && formatsTable.media_type_icon;\n  const videoIconColor = formatsTable && formatsTable.video_icon;\n  const serviceIconStyles = formatsTable && formatsTable.service_icon;\n  const serviceIconColor = serviceIconStyles && serviceIconStyles.color;\n  const serviceIconHoverColor = serviceIconStyles && serviceIconStyles.hover;\n  return /*#__PURE__*/react_default.a.createElement(StCell, {\n    colSpan: colSpan,\n    color: color,\n    mediaTypeIconColor: mediaTypeIconColor,\n    videoIconColor: videoIconColor,\n    serviceIconColor: serviceIconColor,\n    serviceIconHoverColor: serviceIconHoverColor\n  }, children);\n};\n\n/* harmony default export */ var cell = (Cell);\n// CONCATENATED MODULE: ./src/widget/components/formats-table/row.jsx\n\n\n\n\n\n\n // import notification from "../ui/notifications";\n\n\n\n\n\n\n\n\n\nconst StRow = styled_components_browser_esm["a" /* default */].tr`\n  height: 35px;\n  cursor: pointer;\n  &::before,\n  &:first-child::after {\n    content: " ";\n    box-sizing: border-box;\n    position: absolute;\n    display: block;\n    z-index: 0;\n  }\n  &:hover::before {\n    margin-top: 4px;\n    left: 0;\n    right: 0;\n    height: 27px;\n    background-color: ${props => props.hoverBackground};\n  }\n  &:first-child::after {\n    left: 16px;\n    right: 16px;\n    height: 35px;\n    border-top: ${props => props.border};\n    border-bottom: ${props => props.border};\n  }\n`;\nconst VideoIconsContainer = styled_components_browser_esm["a" /* default */].div`\n  display: inline-flex;\n  align-items: center;\n  margin: 10px 6px;\n  padding: 0 6px;\n  & svg {\n    &:not(.fhd) { margin: 0 10px; }\n    &.fhd { margin: 0 6px; }\n  }\n`;\nconst row_Button = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n  &:disabled { opacity: 0.4; }\n  & svg { vertical-align: middle; }\n`;\n\nconst IconLogo = () => /*#__PURE__*/react_default.a.createElement(unidownloader, {\n  style: {\n    width: 12,\n    margin: "0 3px"\n  }\n});\n\nconst TooltipCell = ({\n  status\n}) => {\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/react_default.a.createElement(cell, null, /*#__PURE__*/react_default.a.createElement(ui_tooltip, {\n    title: t(status === "idle" ? "download_using_udl_tooltip" : "download_via_unidownloader_tooltip")\n  }, /*#__PURE__*/react_default.a.createElement(row_Button, null, /*#__PURE__*/react_default.a.createElement(external_link, {\n    style: {\n      transform: "translateY(-3px)"\n    }\n  }))));\n};\n\nconst RowStart = ({\n  data\n}) => /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(cell, null, getIconMediaType(data)), /*#__PURE__*/react_default.a.createElement(cell, null, getTitle(data)), /*#__PURE__*/react_default.a.createElement(cell, null, (data.fps === 60 || data.width > 1279) && /*#__PURE__*/react_default.a.createElement(VideoIconsContainer, null, getIconResolution(data), getIconFramerate(data))));\n\nconst Cells = ({\n  data\n}) => {\n  const {\n    status,\n    displayQrCodes,\n    addNotification\n  } = useAppState(["status", "displayQrCodes", "addNotification"]);\n  const [isNotificationShow, setIsNotificationShow] = Object(react["useState"])(false);\n  const history = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const url = data.directUrl || data.url || data.obj && data.obj.url;\n  const didMountRef = Object(react["useRef"])(null);\n  Object(react["useEffect"])(() => {\n    didMountRef.current = true;\n    return () => {\n      didMountRef.current = false;\n    };\n  }, []);\n\n  if (data.downloadUsingUdl) {\n    return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(cell, null, /*#__PURE__*/react_default.a.createElement(IconLogo, null)), /*#__PURE__*/react_default.a.createElement(cell, {\n      colSpan: 5\n    }, t(status === "idle" ? "download_using_udl" : "download_via_unidownloader")), /*#__PURE__*/react_default.a.createElement(TooltipCell, {\n      status: status\n    }));\n  }\n\n  if (data.availableInUdl) {\n    return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(RowStart, {\n      data: data\n    }), /*#__PURE__*/react_default.a.createElement(cell, null, /*#__PURE__*/react_default.a.createElement(IconLogo, null)), /*#__PURE__*/react_default.a.createElement(cell, {\n      colSpan: 2\n    }, t("udl_client")), /*#__PURE__*/react_default.a.createElement(TooltipCell, {\n      status: status\n    }));\n  }\n\n  if (data.conversionRequired) {\n    return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(RowStart, {\n      data: data\n    }), /*#__PURE__*/react_default.a.createElement(cell, null, /*#__PURE__*/react_default.a.createElement(cpu_activity, null)), /*#__PURE__*/react_default.a.createElement(cell, {\n      colSpan: 3\n    }, t("conversion_required")));\n  }\n\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(RowStart, {\n    data: data\n  }), /*#__PURE__*/react_default.a.createElement(cell, {\n    colSpan: 2\n  }, getSize(data)), !displayQrCodes && /*#__PURE__*/react_default.a.createElement(cell, null), /*#__PURE__*/react_default.a.createElement(cell, null, /*#__PURE__*/react_default.a.createElement(ui_tooltip, {\n    title: t("copy_link_to_clipboard_tooltip")\n  }, /*#__PURE__*/react_default.a.createElement(row_Button, {\n    disabled: !url,\n    onClick: evt => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      const textArea = document.createElement("textarea");\n      textArea.value = url;\n      document.body.appendChild(textArea);\n      textArea.select();\n      document.execCommand("Copy");\n      textArea.remove();\n\n      if (didMountRef.current && !isNotificationShow) {\n        setIsNotificationShow(true);\n        addNotification({\n          icon: check,\n          message: t("copy_link_to_clipboard_notification_message"),\n          onClose: () => {\n            if (didMountRef.current) {\n              setIsNotificationShow(false);\n            }\n          }\n        });\n      }\n    }\n  }, /*#__PURE__*/react_default.a.createElement(icons_copy, null)))), displayQrCodes && /*#__PURE__*/react_default.a.createElement(cell, null, /*#__PURE__*/react_default.a.createElement(ui_tooltip, {\n    title: t("qr_code_tooltip")\n  }, /*#__PURE__*/react_default.a.createElement(row_Button, {\n    onClick: evt => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      history.push(`/qrcode/${btoa(unescape(encodeURIComponent(data.obj.url)))}`);\n    }\n  }, /*#__PURE__*/react_default.a.createElement(qr_code, null)))));\n};\n\nconst Row = ({\n  data\n}) => {\n  const {\n    theme,\n    sendEvent,\n    download,\n    setDefaultItem,\n    warnBeforeConverting\n  } = useAppState(["theme", "sendEvent", "download", "setDefaultItem", "warnBeforeConverting"]);\n  const history = useHistory();\n  const {\n    i18n\n  } = useTranslation();\n\n  if (data) {\n    const formatsTable = theme && theme.formats_table;\n    const rowBorder = formatsTable && formatsTable.row_border;\n    const rowHoverBackground = formatsTable && formatsTable.row_hover_background;\n    return /*#__PURE__*/react_default.a.createElement(StRow, {\n      border: `1px solid ${rowBorder || "black"}`,\n      hoverBackground: rowHoverBackground || "rgba(0,0,0,0.3)",\n      onClick: evt => {\n        evt.preventDefault();\n        const landingUrl = utils_ctx["a" /* default */].getServiceUrl(utils_ctx["a" /* default */].window.location.href, i18n.language);\n\n        if (data.downloadUsingUdl) {\n          window.open(landingUrl, "_blank");\n          sendEvent({\n            action: "landing",\n            format: ""\n          });\n        } else if (data.availableInUdl) {\n          if (data.mimeType === "audio/mp3" && !data.bitrate) {\n            window.open(`${landingUrl}?tf=client-mp3`, "_blank");\n            sendEvent({\n              action: "landing_audio",\n              format: ""\n            });\n          } else {\n            const {\n              fps\n            } = data;\n            const tf = `client-mp4-${data.height}${fps > 30 ? `-${fps}` : ""}`;\n            window.open(`${landingUrl}?tf=${tf}`, "_blank");\n            sendEvent({\n              action: "landing_video",\n              format: data.qualityLabel\n            });\n          }\n        } else if (data.conversionRequired && warnBeforeConverting) {\n          setDefaultItem(data);\n          history.push("/confirm");\n        } else {\n          download(data);\n        }\n      }\n    }, /*#__PURE__*/react_default.a.createElement(Cells, {\n      data: data\n    }));\n  }\n\n  return null;\n};\n\n/* harmony default export */ var row = (Row);\n// CONCATENATED MODULE: ./src/widget/components/formats-table/index.jsx\n\n\n\nconst Table = styled_components_browser_esm["a" /* default */].table`\n  border-collapse: separate;\n  border-spacing: 0;\n  width: 100%;\n  position: relative;\n  empty-cells: hide;\n`;\n/* harmony default export */ var formats_table = (({\n  data\n}) => /*#__PURE__*/react_default.a.createElement(Table, null, /*#__PURE__*/react_default.a.createElement("tbody", null, data.map(rec => /*#__PURE__*/react_default.a.createElement(row, {\n  key: `${rec.width}:${rec.fps}:${Object.keys(rec).join("")}`,\n  data: rec\n})))));\n// CONCATENATED MODULE: ./src/widget/components/icons/plus.jsx\n\n\nconst IconPlus = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "10px",\n  height: "10px",\n  viewBox: "0 0 10 10",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M9.8,3.8C9.7,3.7,9.5,3.7,9.3,3.7h-3v-3c0-0.2-0.1-0.3-0.2-0.5C6,0.1,5.8,0,5.7, 0H4.3C4.2,0,4,0.1,3.8,0.2C3.7,0.3,3.7,0.5,3.7,0.7v2.9h-3c-0.2,0-0.3,0.1-0.5,0.2S0, 4.2,0,4.3v1.3C0,5.8,0.1,6,0.2,6.2c0.2,0.2,0.3,0.2,0.5,0.2h2.9v2.9c0,0.2,0.1,0.3, 0.2,0.5C4,9.9,4.2,10,4.3,10h1.3C5.8,10,6,9.9,6.2,9.8c0.2-0.2,0.2-0.3, 0.2-0.5v-3h2.9c0.2,0,0.3-0.1,0.5-0.2C9.9,6,10,5.8,10,5.7V4.3C10,4.2,9.9,4,9.8,3.8z"\n}));\n\n/* harmony default export */ var plus = (IconPlus);\n// CONCATENATED MODULE: ./src/widget/pages/main.jsx\n\n\n\n\n\n\n\n\n\nconst main_Button = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  display: flex;\n  align-items: center;\n  margin: 4px auto;\n  padding: 6px 3px;\n  cursor: pointer;\n  &:not(:hover) {\n    & svg path { fill: ${props => props.buttonColor}; }\n    & span { color: ${props => props.buttonColor}; }\n  }\n  &:hover {\n    & svg path { fill: ${props => props.buttonHoverColor}; }\n    & span { color: ${props => props.buttonHoverColor}; }\n  }\n  & svg { margin: 0 3px; }\n`;\nconst Text = styled_components_browser_esm["a" /* default */].span`\n  font-weight: 500;\n  font-size: 14px;\n  margin: 0 3px;\n  padding: 0;\n`;\nconst main_Header = styled_components_browser_esm["a" /* default */].h4`\n  margin: 16px;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 24px;\n  color: ${props => props.color || "black"};\n  & a {\n    text-decoration: underline;\n    cursor: pointer;\n  }\n`;\n\nconst Formats = ({\n  loadMore\n}) => {\n  const {\n    streamInfo,\n    videoInfo,\n    audioInfo,\n    contentLimit,\n    theme,\n    sendEvent,\n    showFormatsAvailableViaUDL,\n    showFormatsRequiredOnlineConversion\n  } = useAppState(["status", "videoInfo", "audioInfo", "streamInfo", "contentLimit", "theme", "sendEvent", "showFormatsAvailableViaUDL", "showFormatsRequiredOnlineConversion"]);\n  const history = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const buttonStyles = theme && theme.icon_button;\n  const buttonColor = buttonStyles && buttonStyles.color;\n  const buttonHoverColor = buttonStyles && buttonStyles.hover;\n  const title = t(loadMore ? "all_formats_for_download" : "formats_for_download");\n  const {\n    list,\n    showMoreFormats\n  } = formatsList(streamInfo, videoInfo, audioInfo, showFormatsAvailableViaUDL, showFormatsRequiredOnlineConversion, contentLimit, loadMore);\n  return /*#__PURE__*/react_default.a.createElement(page, {\n    title: title\n  }, /*#__PURE__*/react_default.a.createElement(formats_table, {\n    data: list\n  }), !showMoreFormats && list.length > 0 && /*#__PURE__*/react_default.a.createElement(main_Button, {\n    onClick: () => {\n      sendEvent({\n        action: "more"\n      });\n      history.push("/more");\n    },\n    buttonColor: buttonColor,\n    buttonHoverColor: buttonHoverColor\n  }, /*#__PURE__*/react_default.a.createElement(plus, null), /*#__PURE__*/react_default.a.createElement(Text, null, t("more_formats"))));\n};\n\nconst Unavailable = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useAppState(["theme"]);\n  const color = theme && theme.header;\n  Object(react["useEffect"])(() => {\n    const handler = e => {\n      if (e.target.localName === "a" && e.target.getAttribute("data-unidownloader-function") === "reload") {\n        e.preventDefault();\n        e.stopPropagation();\n        window.location.reload();\n      }\n    };\n\n    window.addEventListener("click", handler);\n    return () => {\n      window.removeEventListener("click", handler);\n    };\n  }, []);\n  return /*#__PURE__*/react_default.a.createElement(page, null, /*#__PURE__*/react_default.a.createElement(main_Header, {\n    color: color,\n    dangerouslySetInnerHTML: {\n      __html: t("direct_links_unavailable")\n    }\n  }), /*#__PURE__*/react_default.a.createElement(formats_table, {\n    data: [{\n      downloadUsingUdl: true\n    }]\n  }));\n};\n\nconst Main = ({\n  loadMore\n}) => {\n  const {\n    status\n  } = useAppState(["status"]);\n  if (status === "unavailable") return /*#__PURE__*/react_default.a.createElement(Unavailable, null);\n  return /*#__PURE__*/react_default.a.createElement(Formats, {\n    loadMore: loadMore\n  });\n};\n\n/* harmony default export */ var main = (Main);\n// CONCATENATED MODULE: ./src/widget/components/ui/checkbox.jsx\n\n\n\nconst Input = styled_components_browser_esm["a" /* default */].input`\n  display: none;\n  &:not(:checked) + label::after { opacity: 0; }\n  &:checked + label::after { opacity: 1; }\n  &:not(:disabled) + label { cursor: pointer; }\n  &:disabled + label { opacity: 0.5; }\n`;\nconst Label = styled_components_browser_esm["a" /* default */].label`\n  position: relative;\n  display: block;\n  font-size: 14px;\n  line-height: 18px;\n  ${props => props.dir === "rtl" ? "padding-right: 25px;" : "padding-left: 25px;"}\n  color: ${props => props.color};\n  &::before,\n  &::after {\n    content: " ";\n    display: block;\n    position: absolute;\n  }\n  &::before {\n    top: 0;\n    ${props => props.dir === "rtl" ? "right: 0;" : "left: 0;"}\n    width: 18px;\n    height: 18px;\n    border-radius: 3px;\n    box-sizing: border-box;\n    border: 2px solid  ${props => props.border};\n    background-color: ${props => props.background};\n  }\n  &::after {\n    width: 3px;\n    height: 7px;\n    top: 3px;\n    ${props => props.dir === "rtl" ? "right: 7px;" : "left: 7px;"}\n    border-right: 2px solid ${props => props.checkmark};\n    border-bottom: 2px solid ${props => props.checkmark};\n    transform: rotate(45deg);\n  }\n`;\n\nconst checkbox_mapState = state => ({\n  dir: state.dir,\n  theme: state.theme\n});\n\nconst CheckBox = ({\n  id,\n  name,\n  label,\n  checked,\n  disabled,\n  onChange\n}) => {\n  const {\n    dir,\n    theme\n  } = useSelector_useSelector(checkbox_mapState);\n  const checkboxId = id && `unidownloader-checkbox-${id}`;\n  const checkboxName = name && `unidownloader-checkbox-${name}`;\n  const checkboxStyles = theme && theme.checkbox;\n  const color = checkboxStyles && checkboxStyles.color;\n  const background = checkboxStyles && checkboxStyles.background;\n  const border = checkboxStyles && checkboxStyles.border;\n  const checkmark = checkboxStyles && checkboxStyles.checkmark;\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(Input, {\n    type: "checkbox",\n    id: checkboxId,\n    name: checkboxName,\n    checked: checked,\n    disabled: id && disabled,\n    onChange: onChange\n  }), /*#__PURE__*/react_default.a.createElement(Label, {\n    htmlFor: checkboxId,\n    dir: dir,\n    color: color,\n    background: background,\n    border: border,\n    checkmark: checkmark\n  }, label));\n};\n\n/* harmony default export */ var ui_checkbox = (CheckBox);\n// CONCATENATED MODULE: ./src/widget/components/icons/warning.jsx\n\n\nconst IconWarning = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "80px",\n  height: "73.7px",\n  viewBox: "0 0 80 73.7",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M37.6,0.5c1.5-0.7,3.3-0.7,4.9,0c1.2,0.5,2.3,1.5,3,2.6C56.7,23.6,68,44, 79.2,64.5c0.4,0.8,0.6,1.6,0.7,2.5v0.9c-0.2,2.4-1.8,4.7-4.1,5.5c-1.2, 0.5-2.5,0.3-3.8,0.4c-8.3,0-16.6,0-24.8,0c-0.6,0-1.1-0.2-1.4-0.7c-0.5-0.6-0.3-1.6, 0.3-2.1c0.5-0.4,1.3-0.3,1.9-0.3c8.6,0,17.2,0,25.8,0c1.5,0,2.9-1.2, 3.1-2.8c0.1-0.7-0.1-1.3-0.4-1.9C65.2,45.5,54,25.2,42.8, 4.8c-0.5-1-1.5-1.7-2.6-1.7c-1.2-0.1-2.3,0.6-2.9,1.6C26,25.1,14.8,45.5,3.5, 66c-0.8,1.3-0.3,3.2,1,4c0.6,0.4,1.3,0.6,2.1,0.5c8.5,0,17,0,25.5,0c0.6,0, 1.3-0.1,1.8,0.3c0.7,0.4,0.9,1.4,0.5,2.1c-0.3,0.5-0.9,0.8-1.5,0.8c-8.3, 0-16.6,0-24.9,0c-1.3,0-2.6,0.1-3.8-0.3c-2.3-0.8-4-3.1-4.2-5.5V67c0.1-1.8, 1.2-3.2,2-4.7C12.9,42.5,23.7,22.8,34.6,3.1C35.2,2,36.3,1,37.6,0.5z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M38.8,19.1c1.5-0.3,3.1,0,4.5,0.8c1.4,0.9,2.4,2.3,2.8,3.9c0.2,1,0.1,2,0.2, 2.9c0,4.1,0,8.2,0,12.4c0,1.4-0.4,2.8-1.3,3.9c-1.1,1.4-2.7,2.3-4.5,2.4c-1.9, 0.2-3.8-0.6-5.1-2c-1.1-1.2-1.6-2.7-1.6-4.3c0-4.7,0-9.5,0-14.2C33.8,22.1, 36.1,19.6,38.8,19.1M39.4,22.2c-1.1,0.2-2.1,1.1-2.4,2.1c-0.1,0.5-0.1, 0.9-0.1,1.4c0,4.5,0,9.1,0,13.6c0,1.5,1.1,2.8,2.5,3c1.4,0.3,2.9-0.5, 3.4-1.8c0.4-0.8,0.3-1.8,0.3-2.7c0-4.3,0-8.5,0-12.8C43.1,23.3,41.2,21.8,39.4,22.2z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M38.8,51.9c1.7-0.3,3.6,0.1,5,1.2c2.4,1.8,3.1,5.4,1.6,8c-0.9,1.6-2.5,2.7-4.3, 3c-2,0.4-4.2-0.4-5.6-1.9c-1.4-1.5-2-3.7-1.5-5.6C34.4,54.3,36.4,52.4,38.8, 51.9 M39.1,55.1c-1.1,0.3-2.1,1.4-2.2,2.5c-0.2,1,0.3,2.2,1.1,2.8c0.9,0.8,2.2, 1,3.3,0.5c1-0.4,1.7-1.3,1.8-2.3c0.2-1.1-0.2-2.3-1.1-2.9C41.2,55,40.1,54.8,39.1,55.1z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M39.4,70.6c1.1-0.5,2.4,0.5,2.1,1.7c-0.1,1.1-1.6,1.7-2.5,1C38.1,72.6,38.3,71,39.4,70.6z"\n}));\n\n/* harmony default export */ var icons_warning = (IconWarning);\n// CONCATENATED MODULE: ./src/widget/components/icons/spanner.jsx\n\n\nconst IconSpanner = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "21px",\n  viewBox: "0 0 21 21",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 20.7 4.95 Q 20.45 4.85 20.3 5.05 L 17.75 7.55 14.05 6.9 13.45 3.2 15.95 0.7 Q 16.1 0.55 16.05 0.3 15.95 0.1 15.75 0.05 14.3 -0.15 13 0.3 11.65 0.75 10.65 1.8 9.45 2.95 9.05 4.55 8.65 6.1 9.05 7.65 L 0.9 15.8 Q 0 16.7 0 17.95 0 19.2 0.9 20.1 1.75 21 3 21 4.3 21 5.15 20.1 L 13.35 11.95 Q 14.9 12.35 16.45 11.95 18.05 11.55 19.2 10.35 20.25 9.35 20.7 8 21.15 6.65 20.95 5.25 20.9 5 20.7 4.95 M 12.85 1.15 Q 13.8 0.75 14.85 0.75 L 12.75 2.85 Q 12.65 2.95 12.65 3.15 L 13.4 7.3 Q 13.4 7.4 13.5 7.5 13.55 7.6 13.7 7.6 L 17.85 8.3 Q 18 8.35 18.15 8.2 L 20.25 6.15 Q 20.25 7.2 19.85 8.15 19.45 9.1 18.7 9.85 17.15 11.4 14.9 11.4 12.7 11.4 11.15 9.85 9.6 8.3 9.6 6.05 9.6 3.85 11.15 2.3 11.9 1.55 12.85 1.15 M 10.65 10.35 Q 11.45 11.2 12.55 11.65 L 4.65 19.6 Q 4 20.25 3 20.25 2.1 20.25 1.4 19.6 0.75 18.9 0.75 17.95 0.75 17 1.4 16.35 L 9.35 8.4 Q 9.8 9.5 10.65 10.35 Z"\n}));\n\n/* harmony default export */ var spanner = (IconSpanner);\n// CONCATENATED MODULE: ./src/widget/components/ui/radio-button.jsx\n\n\n\nconst radio_button_Input = styled_components_browser_esm["a" /* default */].input`\n  display: none;\n  &:not(:checked) + label::after { opacity: 0; }\n  &:checked + label::after { opacity: 1; }\n  &:not(:disabled):not(:checked) + label { cursor: pointer; }\n  &:disabled + label { opacity: 0.5; }\n`;\nconst radio_button_Label = styled_components_browser_esm["a" /* default */].label`\n  position: relative;\n  display: block;\n  font-size: 14px;\n  line-height: 18px;\n  ${props => props.dir === "rtl" ? "padding-right: 25px;" : "padding-left: 25px;"}\n  color: ${props => props.color};\n  &::before,\n  &::after {\n    content: " ";\n    display: block;\n    position: absolute;\n    border-radius: 50%;\n    box-sizing: border-box;\n  }\n  &::before {\n    top: 0;\n    ${props => props.dir === "rtl" ? "right: 0;" : "left: 0;"}\n    width: 18px;\n    height: 18px;\n    border: 2px solid  ${props => props.border};\n    background-color: ${props => props.background};\n  }\n  &::after {\n    width: 10px;\n    height: 10px;\n    top: 4px;\n    ${props => props.dir === "rtl" ? "right: 4px;" : "left: 4px;"}\n    border: 5px solid  ${props => props.border};\n  }\n`;\n\nconst radio_button_mapState = state => ({\n  dir: state.dir,\n  theme: state.theme\n});\n\nconst Radio = ({\n  id,\n  name,\n  label,\n  checked,\n  disabled,\n  onChange\n}) => {\n  const {\n    dir,\n    theme\n  } = useSelector_useSelector(radio_button_mapState);\n  const radioButtonId = id && `unidownloader-radio-button-${id}`;\n  const radioButtonName = name && `unidownloader-radio-button-${name}`;\n  const radioButtonStyles = theme && theme.radio_button;\n  const color = radioButtonStyles && radioButtonStyles.color;\n  const background = radioButtonStyles && radioButtonStyles.background;\n  const border = radioButtonStyles && radioButtonStyles.border;\n  const checkmark = radioButtonStyles && radioButtonStyles.checkmark;\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(radio_button_Input, {\n    type: "radio",\n    id: radioButtonId,\n    name: radioButtonName,\n    checked: checked,\n    disabled: id && disabled,\n    onChange: onChange\n  }), /*#__PURE__*/react_default.a.createElement(radio_button_Label, {\n    htmlFor: radioButtonId,\n    dir: dir,\n    color: color,\n    background: background,\n    border: border,\n    checkmark: checkmark\n  }, label));\n};\n\n/* harmony default export */ var radio_button = (Radio);\n// CONCATENATED MODULE: ./src/widget/pages/settings.jsx\n\n\n\n\n\n\n\nconst settings_Container = styled_components_browser_esm["a" /* default */].div`\n  margin: 8px 16px 24px;\n  & label {  margin-bottom: 16px; }\n  & h4 { color: ${props => props.color} }\n`;\nconst Title = styled_components_browser_esm["a" /* default */].h4`\n  font-size: 16px;\n  font-weight: 400;\n  padding: 14px 0;\n`;\nconst PageContainer = ({\n  children\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useAppState(["theme"]);\n  const globals = theme && theme.globals;\n  const color = globals && globals.color;\n  return /*#__PURE__*/react_default.a.createElement(page, {\n    title: t("settings")\n  }, /*#__PURE__*/react_default.a.createElement(settings_Container, {\n    color: color\n  }, children));\n};\nconst MainSettings = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    displayQrCodes,\n    setDisplayQrCodes,\n    showFormatsAvailableViaUDL,\n    setShowFormatsAvailableViaUDL,\n    showFormatsRequiredOnlineConversion,\n    setShowFormatsRequiredOnlineConversion,\n    warnBeforeConverting,\n    setWarnBeforeConverting,\n    warnAboutCompetitorsDetection,\n    setWarnAboutCompetitorsDetection,\n    showSnapshotButton,\n    setShowSnapshotButton\n  } = useAppState(["displayQrCodes", "setDisplayQrCodes", "showFormatsAvailableViaUDL", "setShowFormatsAvailableViaUDL", "showFormatsRequiredOnlineConversion", "setShowFormatsRequiredOnlineConversion", "warnBeforeConverting", "setWarnBeforeConverting", "warnAboutCompetitorsDetection", "setWarnAboutCompetitorsDetection", "showSnapshotButton", "setShowSnapshotButton"]);\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "showFormatsAvailableViaUDL",\n    label: t("settings_show_formats_available_via_udl"),\n    checked: showFormatsAvailableViaUDL,\n    onChange: () => setShowFormatsAvailableViaUDL(!showFormatsAvailableViaUDL)\n  }), /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "showFormatsRequiredOnlineConversion",\n    label: t("settings_show_formats_required_online_conversion"),\n    checked: showFormatsRequiredOnlineConversion,\n    onChange: () => setShowFormatsRequiredOnlineConversion(!showFormatsRequiredOnlineConversion)\n  }), /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "warnBeforeConverting",\n    label: t("settings_warn_before_converting"),\n    checked: warnBeforeConverting,\n    onChange: () => setWarnBeforeConverting(!warnBeforeConverting)\n  }), /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "displayQrCodes",\n    label: t("settings_display_qr_codes"),\n    checked: displayQrCodes,\n    onChange: () => setDisplayQrCodes(!displayQrCodes)\n  }), /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "warnAboutCompetitorsDetection" // label={t("settings_warn_about_competitors_detection")}\n    ,\n    label: "\\u041F\\u0440\\u0435\\u0434\\u0443\\u043F\\u0440\\u0435\\u0436\\u0434\\u0430\\u0442\\u044C \\u043E\\u0431 \\u043E\\u0431\\u043D\\u0430\\u0440\\u0443\\u0436\\u0435\\u043D\\u0438\\u0438 \\u0441\\u0442\\u043E\\u0440\\u043E\\u043D\\u043D\\u0438\\u0445 \\u0440\\u0430\\u0441\\u0448\\u0438\\u0440\\u0435\\u043D\\u0438\\u0439 \\u0434\\u043B\\u044F \\u0441\\u043A\\u0430\\u0447\\u0438\\u0432\\u0430\\u043D\\u0438\\u044F \\u043C\\u0443\\u043B\\u044C\\u0442\\u0438\\u043C\\u0435\\u0434\\u0438\\u0430.",\n    checked: warnAboutCompetitorsDetection,\n    onChange: () => {\n      setWarnAboutCompetitorsDetection(!warnAboutCompetitorsDetection);\n    }\n  }), /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "showSnapshotButton",\n    label: t("settings_show_snapshot_button"),\n    checked: showSnapshotButton,\n    onChange: () => {\n      setShowSnapshotButton(!showSnapshotButton);\n    }\n  }));\n};\nconst AppButtonStyleSettings = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    appButtonStyle,\n    setAppButtonStyle\n  } = useAppState(["appButtonStyle", "setAppButtonStyle"]);\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(Title, null, t("settings_title_app_button_style")), /*#__PURE__*/react_default.a.createElement(radio_button, {\n    id: "buttonSolid",\n    name: "settingsAppButtonStyle",\n    label: t("settings_app_button_style_solid"),\n    checked: appButtonStyle === "Solid",\n    onChange: () => {\n      setAppButtonStyle("Solid");\n    }\n  }), /*#__PURE__*/react_default.a.createElement(radio_button, {\n    id: "buttonSplit",\n    name: "settingsAppButtonStyle",\n    label: t("settings_app_button_style_split"),\n    checked: appButtonStyle === "Split",\n    onChange: () => {\n      setAppButtonStyle("Split");\n    }\n  }));\n};\nconst LangSettings = () => {\n  const {\n    lang,\n    setLang\n  } = useAppState(["lang", "setLang"]);\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(Title, null, t("language")), /*#__PURE__*/react_default.a.createElement(radio_button, {\n    id: "autoDetect",\n    name: "settingsLanguage",\n    label: t("auto_detect"),\n    checked: lang === "autoDetect",\n    onChange: () => setLang("autoDetect")\n  }), /*#__PURE__*/react_default.a.createElement(radio_button, {\n    id: "en",\n    name: "settingsLanguage",\n    label: "English",\n    checked: lang === "en",\n    onChange: () => setLang("en")\n  }), /*#__PURE__*/react_default.a.createElement(radio_button, {\n    id: "ru",\n    name: "settingsLanguage",\n    label: "\\u0420\\u0443\\u0441\\u0441\\u043A\\u0438\\u0439",\n    checked: lang === "ru",\n    onChange: () => setLang("ru")\n  }));\n};\n\nconst Settings = () => /*#__PURE__*/react_default.a.createElement(PageContainer, null, /*#__PURE__*/react_default.a.createElement(MainSettings, null), /*#__PURE__*/react_default.a.createElement(AppButtonStyleSettings, null), /*#__PURE__*/react_default.a.createElement(LangSettings, null));\n\n/* harmony default export */ var settings = (Settings);\n// CONCATENATED MODULE: ./src/widget/pages/settings-full.jsx\n\n\n\n\n // import notification from "../components/ui/notifications";\n\n\n\n\nconst YandexMarketAdviser = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  justify-content: space-between;\n  & label { width: calc(100% - 70px); }\n`;\nconst settings_full_Button = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  padding: 0;\n  height: 21px;\n  & svg path { fill: ${props => props.buttonColor}; }\n  &:not(:disabled) {\n    cursor: pointer;\n    &:hover {\n      & svg path { fill: ${props => props.buttonHoverColor}; }\n      & span { color: ${props => props.buttonHoverColor}; }\n    }\n  }\n  &:disabled { opacity: 0.4; }\n`;\n\nconst SettingsFull = () => {\n  const {\n    theme,\n    loadYandexMarketAdviser,\n    setLoadYandexMarketAdviser,\n    addNotification\n  } = useAppState(["theme", "loadYandexMarketAdviser", "setLoadYandexMarketAdviser", "addNotification"]);\n  const {\n    t\n  } = useTranslation();\n  const buttonStyles = theme && theme.icon_button;\n  const buttonColor = buttonStyles && buttonStyles.color;\n  const buttonHoverColor = buttonStyles && buttonStyles.hover;\n  const [isNotificationShow, setIsNotificationShow] = Object(react["useState"])(false);\n  const didMountRef = Object(react["useRef"])(null);\n  const localLoadYandexMarketAdviser = Object(react["useRef"])(null);\n\n  if (localLoadYandexMarketAdviser.current === null) {\n    localLoadYandexMarketAdviser.current = loadYandexMarketAdviser;\n  }\n\n  Object(react["useEffect"])(() => {\n    didMountRef.current = true;\n    return () => {\n      didMountRef.current = false;\n    };\n  }, []);\n  Object(react["useEffect"])(() => {\n    if (didMountRef.current && loadYandexMarketAdviser !== localLoadYandexMarketAdviser.current) {\n      localLoadYandexMarketAdviser.current = loadYandexMarketAdviser;\n\n      if (!isNotificationShow) {\n        setIsNotificationShow(true);\n        addNotification({\n          icon: icons_warning,\n          message: t("warning"),\n          description: t("yandex_market_adviser_notification_description"),\n          onClose: () => {\n            if (didMountRef.current) {\n              setIsNotificationShow(false);\n            }\n          }\n        });\n      }\n    }\n  }, [loadYandexMarketAdviser, t, addNotification, isNotificationShow]);\n  return /*#__PURE__*/react_default.a.createElement(PageContainer, null, /*#__PURE__*/react_default.a.createElement(MainSettings, null), loadYandexMarketAdviser !== null && loadYandexMarketAdviser !== undefined && /*#__PURE__*/react_default.a.createElement(YandexMarketAdviser, null, /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "loadYandexMarketAdviser",\n    label: t("show_yandex_market_adviser"),\n    checked: loadYandexMarketAdviser,\n    onChange: () => setLoadYandexMarketAdviser(!loadYandexMarketAdviser)\n  }), /*#__PURE__*/react_default.a.createElement(settings_full_Button, {\n    disabled: !loadYandexMarketAdviser,\n    onClick: () => {\n      window.open("https://sovetnik.market.yandex.ru/app/settings/", "_blank");\n    },\n    buttonColor: buttonColor,\n    buttonHoverColor: buttonHoverColor\n  }, /*#__PURE__*/react_default.a.createElement(spanner, null))), /*#__PURE__*/react_default.a.createElement(AppButtonStyleSettings, null), /*#__PURE__*/react_default.a.createElement(LangSettings, null));\n};\n\n/* harmony default export */ var settings_full = (SettingsFull);\n// CONCATENATED MODULE: ./src/utils/scroll-to.js\nconst scrollTo = (element, to, duration) => {\n  if (duration <= 0) return;\n  const { scrollTop } = element;\n  const difference = to - scrollTop;\n  const perTick = (difference / duration) * 10;\n  setTimeout(() => {\n    Object.assign(element, { scrollTop: scrollTop + perTick });\n    if (element.scrollTop === to) return;\n    scrollTo(element, to, duration - 10);\n  }, 10);\n};\n\n/* harmony default export */ var scroll_to = (scrollTo);\n\n// CONCATENATED MODULE: ./src/widget/components/icons/enquiry.jsx\n\n\nconst IconEnquiry = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "23px",\n  height: "14px",\n  viewBox: "0 0 23 14",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M5.2,2.5H5c-1.2,0-2.2,1-2.2,2.2v0.5h1.4V4.7c0-0.5,0.4-0.9,0.9-0.9h0.3c0.5, 0,0.9,0.4,0.9,0.9c0,0.3-0.2,0.6-0.5,0.8L4.1,6.4v2.2h1.4V7.2l0.9-0.5c0.7-0.4, 1.2-1.1,1.2-2C7.5,3.5,6.4,2.5,5.2,2.5z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M4.1,9.9h1.4v1.4H4.1V9.9z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M20.7,0H2.3C1,0,0,1,0,2.3v9.4C0,13,1,14,2.3,14h18.4c1.3,0,2.3-1,2.3-2.3V2.3C23, 1,22,0,20.7,0z M1.4,11.7V2.3c0-0.5,0.4-1,1-1h6.5v11.3H2.3C1.8,12.6,1.4,12.2,1.4, 11.7z M21.7,11.7c0,0.5-0.4,1-1,1H10.2V1.4h10.6c0.5,0,1,0.4,1,1V11.7z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M11.5,3.6h8.8V5h-8.8V3.6z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M11.5,6.3h6.1v1.4h-6.1V6.3z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M11.5,9h4.1v1.4h-4.1V9z"\n}));\n\n/* harmony default export */ var enquiry = (IconEnquiry);\n// CONCATENATED MODULE: ./src/widget/components/icons/angle-down.jsx\n\n\nconst IconAngleDown = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "13.7px",\n  height: "8px",\n  viewBox: "0 0 13.7 8",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M13.5,0.2c-0.2-0.2-0.6-0.2-0.8,0L6.9,6.6L1,0.2c-0.2-0.2-0.6-0.2-0.8, 0s-0.2,0.6,0,0.8l6.2,6.9C6.5,8,6.7,8,6.8,8C7,8,7.2,8,7.3,7.8L13.5, 1C13.8,0.8,13.8,0.4,13.5,0.2z"\n}));\n\n/* harmony default export */ var angle_down = (IconAngleDown);\n// CONCATENATED MODULE: ./src/widget/components/ui/accordion/item.jsx\n\n\n\n\n\n\nconst item_Input = styled_components_browser_esm["a" /* default */].input`\n  display: none;\n  &:not(:checked) + label {\n    & div + svg { transform: ${props => props.iconTransform}; }\n    & + div {  height: 0; }\n  }\n  &:checked + label + div {\n    height: ${props => props.contentHeight && `${props.contentHeight}px`};\n  }\n`;\nconst item_Label = styled_components_browser_esm["a" /* default */].label`\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 2px;\n  min-height: 30px;\n  background-color: ${props => props.headerBackground};\n  color: ${props => props.headerColor};\n  padding: 4px 8px;\n  &:not(:first-of-type) { margin-top: 8px }\n  & svg { fill: ${props => props.headerColor} }\n`;\nconst TitleContainer = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: center;\n  max-width: calc(100% - 30px);\n  & + svg { transition: transform 0.3s ease-in-out }\n`;\nconst item_Title = styled_components_browser_esm["a" /* default */].span`\n  font-size: 14px;\n  margin: 0 8px;\n`;\nconst ContentMask = styled_components_browser_esm["a" /* default */].div`\n  overflow: hidden;\n  transition: height 0.3s ease-in-out;\n`;\nconst Content = styled_components_browser_esm["a" /* default */].div`\n  background-color: ${props => props.contentBackground};\n  color: ${props => props.contentColor};\n  font-size: 14px;\n  padding: 8px;\n  & a { color: ${props => props.contentColor} }\n`;\n\nconst item_mapState = state => ({\n  dir: state.dir,\n  theme: state.theme\n});\n\nconst Item = ({\n  type,\n  id,\n  name,\n  checked,\n  onCheck,\n  onChange,\n  header,\n  content\n}) => {\n  const {\n    dir,\n    theme\n  } = useSelector_useSelector(item_mapState);\n  const [contentNode, setContentNode] = Object(react["useState"])(null);\n  const [contentHeight, setContentHeight] = Object(react["useState"])(null);\n\n  const contentRef = node => {\n    setContentNode(node);\n\n    if (node !== null) {\n      const boundingClientRect = node.getBoundingClientRect();\n      const height = boundingClientRect && boundingClientRect.height;\n      if (height) setContentHeight(height);\n    }\n  };\n\n  const isCheckbox = type === "checkbox";\n  const [isChecked, setIsChecked] = Object(react["useState"])(checked);\n  const defaultChecked = isCheckbox ? isChecked : checked;\n  const accordionStyles = theme && theme.accordion;\n  const headerStyles = accordionStyles && accordionStyles.header;\n  const headerBackground = headerStyles && headerStyles.background;\n  const headerColor = headerStyles && headerStyles.color;\n  const contentStyles = accordionStyles && accordionStyles.content;\n  const contentBackground = contentStyles && contentStyles.background;\n  const contentColor = contentStyles && contentStyles.color;\n  const contentHyperlink = contentStyles && contentStyles.hyperlink;\n  const contentHyperlinkColor = contentHyperlink && contentHyperlink.color;\n  const contentHyperlinkHover = contentHyperlink && contentHyperlink.hover;\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(item_Input, {\n    type: isCheckbox ? "checkbox" : "radio",\n    id: id,\n    name: name,\n    defaultChecked: defaultChecked,\n    contentHeight: contentHeight,\n    iconTransform: `rotate(${dir === "rtl" ? -90 : 90}deg)`,\n    onChange: () => onChange(defaultChecked)\n  }), /*#__PURE__*/react_default.a.createElement(item_Label, {\n    htmlFor: id,\n    headerBackground: headerBackground,\n    headerColor: headerColor,\n    onClick: () => isCheckbox ? setIsChecked(!isChecked) : onCheck()\n  }, /*#__PURE__*/react_default.a.createElement(TitleContainer, null, /*#__PURE__*/react_default.a.createElement(enquiry, {\n    style: {\n      minWidth: 23\n    }\n  }), /*#__PURE__*/react_default.a.createElement(item_Title, null, header)), /*#__PURE__*/react_default.a.createElement(angle_down, null)), /*#__PURE__*/react_default.a.createElement(ContentMask, {\n    onTransitionEnd: () => {\n      if (defaultChecked && contentNode !== null) {\n        const containerNode = contentNode.parentNode.parentNode;\n        const boundingClientRect = containerNode.getBoundingClientRect();\n        const containerHeight = boundingClientRect && boundingClientRect.height;\n\n        if (containerHeight && contentHeight) {\n          const titleNode = contentNode.parentNode.previousSibling;\n          const titleOffsetTop = titleNode.offsetTop;\n          const containerOffsetTop = containerNode.offsetTop;\n          const contentOffsetTop = contentNode.offsetTop;\n          const {\n            scrollTop\n          } = containerNode;\n          const scrollTopMin = contentOffsetTop - containerOffsetTop + contentHeight - containerHeight;\n          const scrollTopMax = titleOffsetTop - containerOffsetTop;\n\n          if (scrollTop < scrollTopMin) {\n            scroll_to(containerNode, scrollTopMin, 200);\n          } else if (scrollTop > scrollTopMax) {\n            scroll_to(containerNode, scrollTopMax, 200);\n          }\n        }\n      }\n    }\n  }, /*#__PURE__*/react_default.a.createElement(Content, {\n    ref: contentRef,\n    contentBackground: contentBackground,\n    contentColor: contentColor,\n    contentHyperlinkColor: contentHyperlinkColor,\n    contentHyperlinkHover: contentHyperlinkHover\n  }, content)));\n};\n\n/* harmony default export */ var accordion_item = (Item);\n// CONCATENATED MODULE: ./src/widget/components/ui/accordion/index.jsx\n\n\n\n\nconst accordion_Container = styled_components_browser_esm["a" /* default */].div`\n  box-sizing: border-box;\n  overflow-y: auto;\n  height: 320px;\n  margin: 0 16px;\n  padding-bottom: 8px;\n  ${props => props.dir === "ltr" && "padding-right: 6px;"}\n  ${props => props.dir === "rtl" && "padding-left: 6px;"}\n  &::-webkit-scrollbar {\n    width: 4px;\n    background-color: ${props => props.scrollbarBackground};\n    border: 1px solid ${props => props.scrollbarBorder};\n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: ${props => props.scrollbarThumb};\n  }\n  scrollbar-color: ${props => props.scrollbarThumb} ${props => props.scrollbarBackgroundFirefox};\n  scrollbar-width: thin;\n`;\n\nconst accordion_mapState = state => ({\n  dir: state.dir,\n  theme: state.theme\n});\n\nconst Accordion = ({\n  type,\n  name,\n  data,\n  scrollTop,\n  onScroll,\n  onChange\n}) => {\n  const {\n    dir,\n    theme\n  } = useSelector_useSelector(accordion_mapState);\n  const [containerNode, setContainerNode] = Object(react["useState"])(null);\n  const [checkedItem, setCheckedItem] = Object(react["useState"])(data && data.map(e => e.checked).indexOf(true));\n  const itemName = `unidownloader-accordion-${name}`;\n  const scrollbarStyles = theme && theme.scrollbar;\n  const scrollbarBackground = scrollbarStyles && scrollbarStyles.background;\n  const scrollbarBackgroundFirefox = scrollbarStyles && scrollbarStyles.background_firefox;\n  const scrollbarBorder = scrollbarStyles && scrollbarStyles.border;\n  const scrollbarThumb = scrollbarStyles && scrollbarStyles.thumb;\n\n  if (scrollTop && containerNode) {\n    containerNode.scrollTop = scrollTop;\n  }\n\n  return /*#__PURE__*/react_default.a.createElement(accordion_Container, {\n    dir: dir,\n    scrollbarBackground: scrollbarBackground,\n    scrollbarBackgroundFirefox: scrollbarBackgroundFirefox,\n    scrollbarBorder: scrollbarBorder,\n    scrollbarThumb: scrollbarThumb,\n    ref: node => {\n      setContainerNode(node);\n    },\n    onScroll: () => {\n      if (onScroll && containerNode) {\n        onScroll(containerNode.scrollTop);\n      }\n    }\n  }, data && data.map((item, i) => /*#__PURE__*/react_default.a.createElement(accordion_item, {\n    key: item.header,\n    type: type,\n    id: `${itemName}-${i}`,\n    name: itemName,\n    checked: type === "checkbox" ? item.checked : i === checkedItem,\n    onCheck: () => {\n      setCheckedItem(i === checkedItem ? -1 : i);\n    },\n    onChange: checked => {\n      if (onChange) onChange(i, checked);\n    },\n    header: item.header,\n    content: item.content\n  })));\n};\n\n/* harmony default export */ var accordion = (Accordion);\n// CONCATENATED MODULE: ./src/widget/components/icons/camera.jsx\n\n\nconst IconCamera = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "22px",\n  height: "18px",\n  viewBox: "0 0 22 18",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M 22 4.9 Q 22 3.8 21.2 3.05 20.4 2.25 19.3 2.25 L 16.4 2.25 16 1.3 Q 15.65 0.5 14.9 0.2 14.55 0.05 14.25 0 L 7.75 0 Q 7.45 0.05 7.1 0.2 6.35 0.5 6 1.3 L 5.6 2.25 2.7 2.25 Q 1.6 2.25 0.85 3.05 0.05 3.8 0 4.9 L 0 15.3 Q 0.05 16.4 0.85 17.15 1.6 17.95 2.7 18 L 19.3 18 Q 20.4 17.95 21.2 17.15 22 16.4 22 15.3 L 22 4.9 M 11 4.9 Q 13.15 4.9 14.7 6.4 16.2 7.95 16.2 10.1 16.2 12.3 14.7 13.8 13.15 15.3 11 15.3 8.85 15.3 7.35 13.8 5.8 12.3 5.8 10.1 5.8 7.95 7.35 6.4 8.85 4.9 11 4.9 M 13.4 7.75 Q 12.4 6.75 11 6.75 9.6 6.75 8.6 7.75 7.65 8.7 7.65 10.1 7.65 11.5 8.6 12.5 9.6 13.5 11 13.5 12.4 13.5 13.4 12.5 14.35 11.5 14.35 10.1 14.35 8.7 13.4 7.75 Z"\n}));\n\n/* harmony default export */ var camera = (IconCamera);\n// CONCATENATED MODULE: ./src/widget/pages/help.jsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst help_Button = styled_components_browser_esm["a" /* default */].button`\n  outline: none;\n  border: none;\n  margin: 22px auto 11px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  background-color: transparent;\n  & svg path { fill: ${props => props.buttonColor}; }\n  & span { color: ${props => props.buttonColor}; }\n  &:hover {\n    & svg path { fill: ${props => props.buttonHoverColor}; }\n    & span { color: ${props => props.buttonHoverColor}; }\n  }\n`;\nconst help_Text = styled_components_browser_esm["a" /* default */].span`\n  font-size: 14px;\n  &::before {\n    content: " ";\n    display: inline-block;\n    width: 7px;\n  }\n`;\nconst StSpan = styled_components_browser_esm["a" /* default */].span`\n  font-size: 14px;\n  line-height: 20px;\n  vertical-align: middle;\n  & a {\n    cursor: pointer;\n    text-decoration: underline;\n    color: ${props => props.contentHyperlinkColor};\n    &:hover { color: ${props => props.contentHyperlinkHover} }\n  }\n  & li::before {\n    content: "\\u25CF";\n    margin: 0 6px;\n  }\n`;\n\nconst Span = ({\n  html\n}) => /*#__PURE__*/react_default.a.createElement(StSpan, {\n  dangerouslySetInnerHTML: {\n    __html: html\n  }\n});\n\nconst help_mapState = state => ({\n  theme: state.theme,\n  helpState: state.helpState\n});\n\nconst ImgInline = (img, key, isNbspBefore) => {\n  const {\n    theme\n  } = useSelector_useSelector(help_mapState);\n  const accordionStyles = theme && theme.accordion;\n  const contentStyles = accordionStyles && accordionStyles.content;\n  const contentColor = contentStyles && contentStyles.color;\n  const style = {\n    fill: contentColor,\n    verticalAlign: "middle"\n  };\n\n  if (isNbspBefore) {\n    return /*#__PURE__*/react_default.a.createElement("nobr", {\n      key: key\n    }, "\\xA0", react_default.a.createElement(img, {\n      style\n    }));\n  }\n\n  return react_default.a.createElement(img, {\n    key,\n    style\n  });\n};\n\nconst Article = ({\n  content\n}) => {\n  const {\n    i18n\n  } = useTranslation();\n  let endsWithNbsp = false;\n  return content.replace(/{%lang%}/g, i18n.language).split("\x3c!--[").reduce((result, item) => {\n    if (item.startsWith("img-camera")) {\n      result.push(ImgInline(camera, result, endsWithNbsp));\n    } else if (item.startsWith("img-copy")) {\n      result.push(ImgInline(icons_copy, result, endsWithNbsp));\n    } else if (item.startsWith("img-qr-code")) {\n      result.push(ImgInline(qr_code, result, endsWithNbsp));\n    } else if (item.startsWith("img-fps-60")) {\n      result.push(ImgInline(fps_60, result, endsWithNbsp));\n    } else if (item.startsWith("img-sound-on")) {\n      result.push(ImgInline(sound_on, result, endsWithNbsp));\n    }\n\n    const index = item.indexOf("]--\x3e");\n    let str = index === -1 ? item : item.substring(index + 4);\n    const nbspPos = str.length - 6;\n    endsWithNbsp = str.indexOf("&nbsp;", nbspPos) !== -1;\n    if (endsWithNbsp) str = str.substring(0, nbspPos);\n    if (str !== "") result.push( /*#__PURE__*/react_default.a.createElement(Span, {\n      key: result,\n      html: str\n    }));\n    return result;\n  }, []);\n};\n\nconst Help = () => {\n  const {\n    theme,\n    helpState\n  } = useSelector_useSelector(help_mapState);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const articles = i18n.t("help_articles", {\n    returnObjects: true\n  });\n\n  const getScrollTop = () => helpState && helpState.scrollTop || 0;\n\n  const getItemChecked = () => helpState && helpState.itemChecked || new Array(articles.length).fill(false);\n\n  const buttonStyles = theme && theme.icon_button;\n  const buttonColor = buttonStyles && buttonStyles.color;\n  const buttonHoverColor = buttonStyles && buttonStyles.hover;\n  Object(react["useEffect"])(() => {\n    const handler = e => {\n      if (e.target.localName === "a" && e.target.getAttribute("data-unidownloader-page") === "settings") {\n        e.preventDefault();\n        e.stopPropagation();\n        history.push("/settings");\n      }\n    };\n\n    window.addEventListener("click", handler);\n    return () => {\n      window.removeEventListener("click", handler);\n    };\n  }, [history]);\n  return /*#__PURE__*/react_default.a.createElement(page, {\n    title: t("help")\n  }, /*#__PURE__*/react_default.a.createElement(accordion // type="radio"\n  , {\n    type: "checkbox",\n    name: "help",\n    data: articles.map((item, i) => ({\n      checked: getItemChecked()[i],\n      header: item.title,\n      content: /*#__PURE__*/react_default.a.createElement(Article, {\n        content: item.article\n      })\n    })),\n    scrollTop: getScrollTop(),\n    onScroll: scrollTop => {\n      const itemChecked = getItemChecked();\n      dispatch(actions_actions.setHelpState({\n        scrollTop,\n        itemChecked\n      }));\n    },\n    onChange: (item, checked) => {\n      const scrollTop = getScrollTop();\n      const itemChecked = getItemChecked();\n      itemChecked[item] = checked;\n      dispatch(actions_actions.setHelpState({\n        scrollTop,\n        itemChecked\n      }));\n    }\n  }), /*#__PURE__*/react_default.a.createElement(help_Button, {\n    buttonColor: buttonColor,\n    buttonHoverColor: buttonHoverColor,\n    onClick: () => {\n      const landingUrl = `https://unidownloader.com/${i18n.language}/contact-us?from_${config["a" /* default */].type === "udl-usrscr" ? "usrscr" : "ext"}=1`;\n      window.open(landingUrl, "_blank");\n    }\n  }, /*#__PURE__*/react_default.a.createElement(feedback, null), /*#__PURE__*/react_default.a.createElement(help_Text, null, t("drop_us_a_line"))));\n};\n\n/* harmony default export */ var pages_help = (Help);\n// CONCATENATED MODULE: ./src/widget/components/ui/button.jsx\n\n\n\nconst StButton = styled_components_browser_esm["a" /* default */].button`\n  outline: none;\n  padding: 6px 8px;\n  display: inline-flex;\n  align-items: center;\n  vertical-align: middle;\n  background-color: ${props => props.background};\n  color: ${props => props.color};\n  border-radius: 2px;\n  border: ${props => {\n  if (props.styleName === "glowBorder") {\n    return `1px solid ${props.border || "black"}`;\n  }\n\n  return "none";\n}};\n  & svg {\n    fill: ${props => props.color};\n    ${props => props.dir === "rtl" && "transform: scaleX(-1);"}\n    & + span {\n      ${props => props.dir === "rtl" ? "margin-right: 6px;" : "margin-left: 6px;"}\n    }\n  }\n  &:not(:disabled) {\n    cursor: pointer;\n    &:hover {\n      ${props => props.styleName === "glowBorder" && `\n        border-color: ${props.hoverBorder};\n        box-shadow: ${props.hoverBoxShadow};\n      `}\n      background-color: ${props => props.hoverBackground};\n      color: ${props => props.hoverColor};\n      & svg { fill: ${props => props.hoverColor}; }\n    }\n    ${props => props.styleName === "glowBorder" && `\n      &:active {\n        border-color: ${props.activerBorder};\n        box-shadow: ${props.activeBoxShadow};\n        background-color: ${props.activeBackground};\n        color: ${props.activeColor};\n        & svg { fill: ${props.activeColor}; }\n      }\n    `}\n  }\n  &:disabled { opacity: 0.5; }\n`;\nconst button_Text = styled_components_browser_esm["a" /* default */].span`\n  font-size: 16px;\n`;\n\nconst button_mapState = state => ({\n  dir: state.dir,\n  theme: state.theme\n});\n\nconst button_Button = ({\n  type,\n  disabled,\n  onClick,\n  icon,\n  text,\n  styleName\n}) => {\n  const {\n    dir,\n    theme\n  } = useSelector_useSelector(button_mapState);\n  const buttonStyles = theme && (styleName === "glowBorder" ? theme.button_glow_border : theme.button_solid);\n  const border = buttonStyles && buttonStyles.border;\n  const background = buttonStyles && buttonStyles.background;\n  const color = buttonStyles && buttonStyles.color;\n  const hoverBorder = buttonStyles && buttonStyles.hover_border;\n  const hoverBackground = buttonStyles && buttonStyles.hover_background;\n  const hoverBoxShadow = buttonStyles && buttonStyles.hover_box_shadow;\n  const hoverColor = buttonStyles && buttonStyles.hover_color;\n  const activeBorder = buttonStyles && buttonStyles.active_border;\n  const activeBackground = buttonStyles && buttonStyles.active_background;\n  const activeBoxShadow = buttonStyles && buttonStyles.active_box_shadow;\n  const activeColor = buttonStyles && buttonStyles.active_color;\n  return /*#__PURE__*/react_default.a.createElement(StButton, {\n    type: type,\n    disabled: disabled,\n    onClick: onClick,\n    dir: dir,\n    styleName: styleName,\n    border: border,\n    background: background,\n    color: color,\n    hoverBorder: hoverBorder,\n    hoverBackground: hoverBackground,\n    hoverBoxShadow: hoverBoxShadow,\n    hoverColor: hoverColor,\n    activeBorder: activeBorder,\n    activeBackground: activeBackground,\n    activeBoxShadow: activeBoxShadow,\n    activeColor: activeColor\n  }, icon && react_default.a.createElement(icon), text && /*#__PURE__*/react_default.a.createElement(button_Text, null, text));\n};\n\n/* harmony default export */ var ui_button = (button_Button);\n// CONCATENATED MODULE: ./src/widget/components/icons/arrow-fat-down.jsx\n\n\nconst IconArrowFatDown = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "14px",\n  height: "16px",\n  viewBox: "0 0 14 16",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M14,8.9c-0.1-0.1-0.2-0.2-0.3-0.2H10V0.3C10,0.1,9.8,0,9.7,0H4.3C4.1,0,4, 0.1,4,0.3v8.3H0.3C0.2,8.7,0.1,8.7,0,8.9C0,9,0,9.1,0.1,9.2l6.6,6.7C6.8, 16,6.9,16,7,16s0.2,0,0.2-0.1l6.7-6.7C14,9.1,14,9,14,8.9z"\n}));\n\n/* harmony default export */ var arrow_fat_down = (IconArrowFatDown);\n// CONCATENATED MODULE: ./src/widget/pages/confirm.jsx\n\n\n\n\n\n\n\n\n\n\nconst confirm_Container = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  justify-content: space-between;\n  margin: 6px 10px;\n  color: ${props => props.color};\n  & .iconCpuActivity {\n    display: block;\n    fill: ${props => props.color};\n    width: 56px;\n    height: 56px;\n    margin: 0 6px;\n  }\n`;\nconst Conlumn = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  margin: 0 6px;\n`;\nconst Paragraph = styled_components_browser_esm["a" /* default */].p`\n  font-size: 14px;\n  width: 350px;\n  margin-bottom: 16px;\n`;\nconst Form = styled_components_browser_esm["a" /* default */].form`\n  margin-bottom: 11px;\n  & button {\n    margin-bottom: 12px;\n    &:not(:first-of-type) {\n      ${props => props.dir === "rtl" ? "margin-right: 8px;" : "margin-left: 8px;"}\n    }\n  }\n`;\n\nconst Confirm = () => {\n  const {\n    dir,\n    theme,\n    download,\n    warnBeforeConverting,\n    setWarnBeforeConverting\n  } = useAppState(["dir", "theme", "download", "warnBeforeConverting", "setWarnBeforeConverting"]);\n  const history = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const globals = theme && theme.globals;\n  const color = globals && globals.color;\n  return /*#__PURE__*/react_default.a.createElement(page, {\n    title: t("confirm_conversion_title")\n  }, /*#__PURE__*/react_default.a.createElement(confirm_Container, {\n    color: color\n  }, /*#__PURE__*/react_default.a.createElement(cpu_activity, {\n    className: "iconCpuActivity"\n  }), /*#__PURE__*/react_default.a.createElement(Conlumn, null, /*#__PURE__*/react_default.a.createElement(Paragraph, null, t("confirm_conversion_message")), /*#__PURE__*/react_default.a.createElement(Form, {\n    dir: dir,\n    onSubmit: evt => {\n      evt.preventDefault();\n      download();\n    }\n  }, /*#__PURE__*/react_default.a.createElement(ui_button, {\n    onClick: evt => {\n      evt.preventDefault();\n      history.go(-1);\n    },\n    text: t("cancel"),\n    styleName: "glowBorder"\n  }), /*#__PURE__*/react_default.a.createElement(ui_button, {\n    type: "submit",\n    icon: arrow_fat_down,\n    text: t("continue"),\n    disabled: !download,\n    styleName: "glowBorder"\n  }), /*#__PURE__*/react_default.a.createElement(ui_checkbox, {\n    id: "doNotShowOnLoad",\n    label: t("do_not_show_on_load"),\n    checked: !warnBeforeConverting,\n    onChange: () => setWarnBeforeConverting(!warnBeforeConverting)\n  })))));\n};\n\n/* harmony default export */ var pages_confirm = (Confirm);\n// CONCATENATED MODULE: ./src/widget/components/icons/share.jsx\n\n\nconst IconShare = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "19px",\n  height: "20.8px",\n  viewBox: "0 0 19 20.8",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M18.4,3.6c0,1.6-1.3,2.8-2.8,2.8s-2.9-1.3-2.9-2.8c0-1.6,1.3-2.8,2.8-2.8S18.4,2,18.4,3.6z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M15.5,7C13.6,7,12,5.5,12,3.5C12,1.6,13.5,0,15.5,0S19,1.6,19,3.6C19,5.5,17.5,7,15.5,7z M15.5,1.4c-1.2,0-2.2,1-2.2,2.2s1,2.2,2.2,2.2s2.2-1,2.2-2.2S16.7,1.4,15.5,1.4z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M18.4,17.4c0,1.6-1.3,2.8-2.8,2.8s-2.8-1.3-2.8-2.8c0-1.6,1.3-2.8,2.8-2.8S18.4,15.8,18.4,17.4z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M15.5,20.8c-1.9,0-3.5-1.5-3.5-3.5c0-1.9,1.5-3.5,3.5-3.5s3.5,1.5,3.5,3.5S17.5,20.8,15.5,20.8z M15.5,15.2c-1.2,0-2.2,1-2.2,2.2s1,2.2,2.2,2.2s2.2-1,2.2-2.2S16.7,15.2,15.5,15.2z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M6.3,10.5c0,1.6-1.3,2.8-2.8,2.8c-1.6,0-2.8-1.3-2.8-2.8S2,7.7,3.5,7.7C5,7.7,6.3,8.9,6.3,10.5z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M3.5,13.9c-1.9,0-3.5-1.5-3.5-3.5s1.5-3.5,3.5-3.5C5.4,6.9,7,8.4,7,10.4S5.4,13.9,3.5,13.9z M3.5,8.3c-1.2,0-2.2,1-2.2,2.2c0,1.2,1,2.2,2.2,2.2s2.2-1,2.2-2.2C5.7,9.3,4.6,8.3,3.5,8.3z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M5.5,10c-0.3,0-0.6-0.2-0.8-0.4c-0.2-0.4,0-0.9,0.4-1.2l8-4.6c0.4-0.2,0.9-0.1,1.2,0.3 C14.5,4.5,14.4,5,14,5.3L6,9.9C5.8,10,5.6,10,5.5,10z"\n}), /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M13.5,17.2c-0.1,0-0.3,0-0.4-0.1l-8-4.6c-0.4-0.2-0.6-0.8-0.3-1.2C5,10.9,5.6,10.7,6,11l8, 4.6c0.4,0.2,0.6,0.8,0.3,1.2C14.1,17,13.8,17.2,13.5,17.2z"\n}));\n\n/* harmony default export */ var share = (IconShare);\n// CONCATENATED MODULE: ./src/widget/components/icons/over-ru.jsx\n\n\nconst IconOverRu = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "51.25px",\n  height: "13px",\n  viewBox: "0 0 51.25 13",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 7.1 4.25 Q 6.8 4.1 6.45 4.1 L 1.7 4.1 1.7 2.55 7.1 1.7 7.1 0 1.85 0.85 Q 1.35 0.95 1 1.1 0.7 1.2 0.5 1.45 0.25 1.7 0.1 2 0 2.3 0 2.75 L 0 11.3 Q 0 11.65 0.1 11.95 0.25 12.25 0.5 12.5 0.7 12.75 1 12.85 1.35 13 1.7 13 L 6.45 13 Q 6.8 13 7.1 12.85 7.45 12.75 7.65 12.5 7.9 12.25 8.05 11.95 8.15 11.65 8.15 11.3 L 8.15 5.8 Q 8.15 5.45 8.05 5.15 7.9 4.85 7.65 4.6 7.45 4.35 7.1 4.25 M 6.45 5.8 L 6.45 11.3 1.7 11.3 1.7 5.8 6.45 5.8 M 18.85 4.8 Q 18.7 4.45 18.5 4.25 18.25 4 17.95 3.9 17.65 3.75 17.3 3.75 L 12.7 3.75 Q 12.35 3.75 12 3.9 11.7 4 11.5 4.25 11.25 4.45 11.1 4.8 11 5.1 11 5.45 L 11 11.3 Q 11 11.65 11.1 11.95 11.25 12.25 11.5 12.5 11.7 12.75 12 12.85 12.35 13 12.7 13 L 17.3 13 Q 17.65 13 17.95 12.85 18.25 12.75 18.5 12.5 18.7 12.25 18.85 11.95 19 11.65 19 11.3 L 19 5.45 Q 19 5.1 18.85 4.8 M 12.7 11.3 L 12.7 5.45 17.3 5.45 17.3 11.3 12.7 11.3 M 24.35 3.75 Q 23.95 3.75 23.65 3.9 23.35 4 23.1 4.25 22.9 4.45 22.75 4.8 22.6 5.1 22.6 5.45 L 22.6 11.3 21.3 11.3 21.3 13 22.6 13 Q 22.95 13 23.3 12.85 23.6 12.75 23.85 12.5 24.05 12.25 24.2 11.95 24.35 11.65 24.35 11.3 L 24.35 5.45 28.25 5.45 28.25 13 29.95 13 29.95 3.75 24.35 3.75 M 40.6 5.45 Q 40.6 5.1 40.5 4.8 40.35 4.45 40.1 4.25 39.9 4 39.55 3.9 39.25 3.75 38.9 3.75 L 34.5 3.75 Q 34.15 3.75 33.8 3.9 33.5 4 33.3 4.25 33.05 4.45 32.9 4.8 32.8 5.1 32.8 5.45 L 32.8 11.3 Q 32.8 11.65 32.9 11.95 33.05 12.25 33.3 12.5 33.5 12.75 33.8 12.85 34.15 13 34.5 13 L 40.6 13 40.6 11.3 34.5 11.3 34.5 9.25 40.6 9.25 40.6 5.45 M 38.9 7.55 L 34.5 7.55 34.5 5.45 38.9 5.45 38.9 7.55 M 51.15 4.8 Q 51 4.45 50.75 4.25 50.55 4 50.2 3.9 49.9 3.75 49.55 3.75 L 45.15 3.75 Q 44.8 3.75 44.45 3.9 44.15 4 43.95 4.25 43.7 4.45 43.55 4.8 43.45 5.1 43.45 5.45 L 43.45 11.3 Q 43.45 11.65 43.55 11.95 43.7 12.25 43.95 12.5 44.15 12.75 44.45 12.85 44.8 13 45.15 13 L 51.25 13 51.25 11.3 45.15 11.3 45.15 9.25 51.25 9.25 51.25 5.45 Q 51.25 5.1 51.15 4.8 M 45.15 7.55 L 45.15 5.45 49.55 5.45 49.55 7.55 45.15 7.55 Z"\n}));\n\n/* harmony default export */ var over_ru = (IconOverRu);\n// CONCATENATED MODULE: ./src/widget/components/icons/over-en.jsx\n\n\nconst IconOverEn = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "38.25px",\n  height: "9.25px",\n  viewBox: "0 0 38.25 9.25",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 6.95 0.15 Q 6.65 0 6.3 0 L 1.7 0 Q 1.35 0 1 0.15 0.7 0.25 0.5 0.5 0.25 0.7 0.1 1.05 0 1.35 0 1.7 L 0 7.55 Q 0 7.9 0.1 8.2 0.25 8.5 0.5 8.75 0.7 9 1 9.1 1.35 9.25 1.7 9.25 L 6.3 9.25 Q 6.65 9.25 6.95 9.1 7.25 9 7.5 8.75 7.7 8.5 7.85 8.2 8 7.9 8 7.55 L 8 1.7 Q 8 1.35 7.85 1.05 7.7 0.7 7.5 0.5 7.25 0.25 6.95 0.15 M 1.7 7.55 L 1.7 1.7 6.3 1.7 6.3 7.55 1.7 7.55 M 14.3 7.2 L 11.5 0 9.7 0 13.4 9.25 15.2 9.25 18.9 0 17.1 0 14.3 7.2 M 28.4 1.05 Q 28.25 0.7 28 0.5 27.8 0.25 27.45 0.15 27.15 0 26.8 0 L 22.4 0 Q 22.05 0 21.7 0.15 21.4 0.25 21.2 0.5 20.95 0.7 20.8 1.05 20.7 1.35 20.7 1.7 L 20.7 7.55 Q 20.7 7.9 20.8 8.2 20.95 8.5 21.2 8.75 21.4 9 21.7 9.1 22.05 9.25 22.4 9.25 L 28.5 9.25 28.5 7.55 22.4 7.55 22.4 5.5 28.5 5.5 28.5 1.7 Q 28.5 1.35 28.4 1.05 M 26.8 1.7 L 26.8 3.8 22.4 3.8 22.4 1.7 26.8 1.7 M 38.25 1.7 Q 38.25 1.35 38.15 1.05 38 0.7 37.75 0.5 37.55 0.25 37.25 0.15 36.9 0 36.55 0 L 34.75 0 Q 34.4 0 34.1 0.1 33.8 0.25 33.55 0.45 33.3 0.7 33.2 1 33.059375 1.28125 33.05 1.55 L 33.05 0 31.35 0 31.35 9.25 33.05 9.25 33.05 1.7 36.55 1.7 36.55 3.25 38.25 3.25 38.25 1.7 Z"\n}));\n\n/* harmony default export */ var over_en = (IconOverEn);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-0.jsx\n\n\nconst IconNum0 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "25.9px",\n  height: "33px",\n  viewBox: "0 0 25.9 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 23.05 0.4 Q 22.15 0 21.2 0 L 4.7 0 Q 3.75 0 2.9 0.4 2 0.8 1.35 1.4 0.7 2.05 0.35 2.9 0 3.75 0 4.75 L 0 28.3 Q 0 29.25 0.35 30.15 0.45 30.4 0.6 30.6 0.9 31.15 1.35 31.6 2 32.25 2.9 32.65 3.75 33 4.7 33 L 21.2 33 Q 22.15 33 23.05 32.65 23.9 32.25 24.5 31.6 24.95 31.15 25.3 30.6 25.45 30.4 25.55 30.15 25.9 29.25 25.9 28.3 L 25.9 4.75 Q 25.9 3.75 25.55 2.9 25.15 2.05 24.5 1.4 23.9 0.8 23.05 0.4 M 4.7 4.75 L 21.2 4.75 21.2 28.3 4.7 28.3 4.7 4.75 Z"\n}));\n\n/* harmony default export */ var num_0 = (IconNum0);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-1.jsx\n\n\nconst IconNum1 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "10.4px",\n  height: "33px",\n  viewBox: "0 0 10.4 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 10.4 0 L 0 0 0 4.75 5.65 4.75 5.65 33 10.4 33 10.4 0 Z"\n}));\n\n/* harmony default export */ var num_1 = (IconNum1);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-2.jsx\n\n\nconst IconNum2 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "24.95px",\n  height: "33px",\n  viewBox: "0 0 24.95 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 23 1.4 Q 22.35 0.8 21.5 0.4 20.65 0 19.65 0 L 4.75 0 Q 3.75 0 2.9 0.4 2.05 0.8 1.4 1.4 0.75 2.05 0.4 2.9 0 3.75 0 4.75 L 0 9 4.75 9 4.75 4.75 19.65 4.75 19.65 11.55 3.3 19.25 Q 2.45 19.65 1.85 20.15 1.2 20.65 0.8 21.25 0.4 21.85 0.25 22.6 0 23.35 0 24.35 L 0 33 24.95 33 24.95 24.05 20.25 24.05 20.25 28.3 4.75 28.3 4.75 23.5 21.05 15.85 Q 21.95 15.45 22.6 14.95 23.2 14.45 23.6 13.85 24 13.25 24.2 12.5 24.4 11.75 24.4 10.75 L 24.4 4.75 Q 24.4 3.75 24 2.9 23.6 2.05 23 1.4 Z"\n}));\n\n/* harmony default export */ var num_2 = (IconNum2);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-3.jsx\n\n\nconst IconNum3 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "25.8px",\n  height: "33px",\n  viewBox: "0 0 25.8 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 20.75 8.3 L 20.75 10.45 Q 20.75 12.25 20 13.1 19.25 13.95 17.5 14.05 L 7.9 14.05 7.9 18.65 17.65 18.65 Q 19.55 18.65 20.35 19.5 21.2 20.35 21.2 22.2 L 21.2 24.75 Q 21.2 26.65 20.35 27.5 19.55 28.4 17.65 28.4 L 8.15 28.4 Q 6.25 28.4 5.45 27.5 4.6 26.65 4.6 24.75 L 4.6 23 0 23 0 25 Q 0 33 8 33 L 17.8 33 Q 25.8 33 25.8 25 L 25.8 23.35 Q 25.8 20.25 24.7 18.4 23.6 16.55 21.5 15.9 23.4 15.05 24.35 13.25 25.35 11.45 25.35 8.65 L 25.35 8.05 Q 25.35 4 23.4 2 21.4 0 17.35 0 L 8.5 0 Q 0.5 0 0.5 8.05 L 0.5 10 5.1 10 5.1 8.3 Q 5.1 6.4 5.95 5.5 6.75 4.65 8.6 4.65 L 17.2 4.65 Q 19.05 4.65 19.9 5.5 20.75 6.4 20.75 8.3 Z"\n}));\n\n/* harmony default export */ var num_3 = (IconNum3);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-4.jsx\n\n\nconst IconNum4 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "26.25px",\n  height: "33px",\n  viewBox: "0 0 26.25 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 21.8 21.65 L 21.8 0 16.25 0 0 21.65 0 26.15 17.1 26.15 17.1 33 21.8 33 21.8 26.15 26.25 26.15 26.25 21.65 21.8 21.65 M 17.1 5.7 L 17.1 21.65 5.1 21.65 17.1 5.7 Z"\n}));\n\n/* harmony default export */ var num_4 = (IconNum4);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-5.jsx\n\n\nconst IconNum5 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "24.9px",\n  height: "33px",\n  viewBox: "0 0 24.9 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 24.05 4.75 L 24.05 0 0.95 0 0.95 16.75 16.7 16.75 Q 18.6 16.75 19.45 17.6 20.25 18.45 20.25 20.35 L 20.25 24.75 Q 20.25 26.65 19.45 27.5 18.6 28.4 16.7 28.4 L 8.15 28.4 Q 6.25 28.4 5.45 27.5 4.6 26.65 4.6 24.75 L 4.6 23 0 23 0 25 Q 0 33 8 33 L 16.9 33 Q 20.9 33 22.85 31 24.8 29 24.9 25 L 24.9 20.15 Q 24.9 16.05 22.9 14.1 20.9 12.15 16.9 12.15 L 5.65 12.15 5.65 4.75 24.05 4.75 Z"\n}));\n\n/* harmony default export */ var num_5 = (IconNum5);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-6.jsx\n\n\nconst IconNum6 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "24.45px",\n  height: "33px",\n  viewBox: "0 0 24.45 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 24.45 9 L 24.45 4.75 Q 24.45 3.75 24.1 2.9 23.75 2.05 23.1 1.4 22.45 0.8 21.6 0.4 20.75 0 19.75 0 L 4.7 0 Q 3.75 0 2.9 0.4 2 0.8 1.35 1.4 0.7 2.05 0.35 2.9 0 3.75 0 4.75 L 0 28.3 Q 0 29.25 0.35 30.15 0.7 31 1.35 31.6 2 32.25 2.9 32.65 3.75 33 4.7 33 L 19.75 33 Q 20.75 33 21.6 32.65 22.45 32.25 23.1 31.6 23.75 31 24.1 30.15 24.45 29.25 24.45 28.3 L 24.45 18.9 Q 24.45 17.9 24.1 17.05 23.75 16.2 23.1 15.55 22.45 14.9 21.6 14.55 20.75 14.15 19.75 14.15 L 4.7 14.15 4.7 4.75 19.75 4.75 19.75 9 24.45 9 M 4.7 18.9 L 19.75 18.9 19.75 28.3 4.7 28.3 4.7 18.9 Z"\n}));\n\n/* harmony default export */ var num_6 = (IconNum6);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-7.jsx\n\n\nconst IconNum7 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "25.4px",\n  height: "33px",\n  viewBox: "0 0 25.4 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 9.05 33 L 25.4 1.45 25.4 0 0 0 0 4.75 18.4 4.75 3.6 33 9.05 33 Z"\n}));\n\n/* harmony default export */ var num_7 = (IconNum7);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-8.jsx\n\n\nconst IconNum8 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "25.8px",\n  height: "33px",\n  viewBox: "0 0 25.8 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 25.35 8.65 L 25.35 8.05 Q 25.35 0 17.35 0 L 8.5 0 Q 0.45 0 0.45 8.05 L 0.45 8.65 Q 0.45 11.45 1.45 13.25 2.45 15.05 4.3 15.9 2.2 16.55 1.1 18.4 0 20.25 0 23.35 L 0 25 Q 0 33 8 33 L 17.8 33 Q 25.8 33 25.8 25 L 25.8 23.35 Q 25.8 20.25 24.7 18.4 23.6 16.55 21.5 15.9 23.4 15.05 24.35 13.25 25.35 11.45 25.35 8.65 M 20.7 8.3 L 20.7 10.45 Q 20.7 12.25 19.95 13.1 19.25 13.95 17.5 14.05 L 8.3 14.05 Q 6.6 13.95 5.85 13.1 5.1 12.25 5.1 10.45 L 5.1 8.3 Q 5.1 6.4 5.9 5.5 6.75 4.65 8.6 4.65 L 17.2 4.65 Q 19.05 4.65 19.9 5.5 20.7 6.4 20.7 8.3 M 20.35 19.5 Q 21.2 20.35 21.2 22.2 L 21.2 24.75 Q 21.2 26.65 20.35 27.5 19.55 28.4 17.65 28.4 L 8.15 28.4 Q 6.25 28.4 5.45 27.5 4.6 26.65 4.6 24.75 L 4.6 22.2 Q 4.6 20.35 5.45 19.5 6.25 18.65 8.15 18.65 L 17.65 18.65 Q 19.55 18.65 20.35 19.5 Z"\n}));\n\n/* harmony default export */ var num_8 = (IconNum8);\n// CONCATENATED MODULE: ./src/widget/components/icons/num-9.jsx\n\n\nconst IconNum9 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "24.45px",\n  height: "33px",\n  viewBox: "0 0 24.45 33",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 23.1 1.4 Q 22.45 0.8 21.6 0.4 20.75 0 19.75 0 L 4.7 0 Q 3.75 0 2.9 0.4 2 0.8 1.35 1.4 0.7 2.05 0.35 2.9 0 3.75 0 4.75 L 0 14.15 Q 0 15.15 0.35 16 0.7 16.85 1.35 17.5 2 18.1 2.9 18.5 3.75 18.9 4.7 18.9 L 19.75 18.9 19.75 28.3 4.7 28.3 4.7 24.05 0 24.05 0 28.3 Q 0 29.25 0.35 30.15 0.7 31 1.35 31.6 2 32.25 2.9 32.65 3.75 33 4.7 33 L 19.75 33 Q 20.75 33 21.6 32.65 22.45 32.25 23.1 31.6 23.75 31 24.1 30.15 24.45 29.25 24.45 28.3 L 24.45 4.75 Q 24.45 3.75 24.1 2.9 23.75 2.05 23.1 1.4 M 19.75 14.15 L 4.7 14.15 4.7 4.75 19.75 4.75 19.75 14.15 Z"\n}));\n\n/* harmony default export */ var num_9 = (IconNum9);\n// CONCATENATED MODULE: ./src/widget/pages/advert.jsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst advert_Container = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  justify-content: space-between;\n  margin: 6px 16px 26px;\n  color: ${props => props.color};\n  & + button {\n    display: flex;\n    margin: 0 auto 24px;\n  }\n  & b { color: ${props => props.numColor} }\n`;\nconst Counter = styled_components_browser_esm["a" /* default */].div`\n  border: 1px solid ${props => props.figureBorder};\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  width: 80px;\n  height: 80px;\n  margin: 10px;\n  &::before,\n  &::after {\n    border: 2px solid ${props => props.figureColor};\n    content: " ";\n    display: block;\n    position: absolute;\n    width: 70px;\n    height: 70px;\n  }\n  &::before {\n    background-color: ${props => props.figureColor};\n    transform: rotate(45deg);\n  }\n  &::after { border-radius: 2px }\n  & svg { fill: ${props => props.figureNumColor} }\n`;\nconst IconOverContainer = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: flex-end;\n  position: relative;\n  z-index: 1;\n`;\nconst NumberContainer = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  justify-content: center;\n  transform: ${props => `scale(${props.scale})`};\n  & svg { margin: 0 3px }\n`;\nconst advert_Conlumn = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n`;\nconst advert_Paragraph = styled_components_browser_esm["a" /* default */].p`\n  font-size: 14px;\n  width: 310px;\n  margin-bottom: 12px;\n`;\nconst ButtonCancel = styled_components_browser_esm["a" /* default */].button`\n  outline: none;\n  border: none;\n  padding: 0;\n  margin: 0 auto 24px;\n  display: block;\n  cursor: pointer;\n  font-size: 16px;\n  background-color: transparent;\n  color: ${props => props.color};\n  &:hover { color: ${props => props.hover}; }\n`;\n\nconst IconOver = () => {\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/react_default.a.createElement(IconOverContainer, null, t("lang") === "ru" ? /*#__PURE__*/react_default.a.createElement(over_ru, null) : /*#__PURE__*/react_default.a.createElement(over_en, null));\n};\n\nconst advert_Number = ({\n  num\n}) => {\n  const str = (num > 999 ? 999 : num).toString();\n  return /*#__PURE__*/react_default.a.createElement(NumberContainer, {\n    scale: num > 99 ? 0.6 : 1\n  }, [...str].reduce((result, item) => {\n    switch (item) {\n      case "1":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_1, {\n          key: result\n        }));\n        break;\n\n      case "2":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_2, {\n          key: result\n        }));\n        break;\n\n      case "3":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_3, {\n          key: result\n        }));\n        break;\n\n      case "4":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_4, {\n          key: result\n        }));\n        break;\n\n      case "5":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_5, {\n          key: result\n        }));\n        break;\n\n      case "6":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_6, {\n          key: result\n        }));\n        break;\n\n      case "7":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_7, {\n          key: result\n        }));\n        break;\n\n      case "8":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_8, {\n          key: result\n        }));\n        break;\n\n      case "9":\n        result.push( /*#__PURE__*/react_default.a.createElement(num_9, {\n          key: result\n        }));\n        break;\n\n      default:\n        result.push( /*#__PURE__*/react_default.a.createElement(num_0, {\n          key: result\n        }));\n    }\n\n    return result;\n  }, []));\n};\n\nconst plural = (n, lang, arr) => {\n  if (lang === "ru") {\n    const num = n % 100;\n    if (num >= 11 && num <= 19) return arr[2];\n\n    switch (num % 10) {\n      case 1:\n        return arr[0];\n\n      case 2:\n      case 3:\n      case 4:\n        return arr[1];\n\n      default:\n        return arr[2];\n    }\n  } else if (lang === "en") {\n    if (n === 1) return arr[0];\n    return arr[1];\n  }\n\n  return "";\n};\n\nconst advert_mapState = state => ({\n  theme: state.theme,\n  sendEvent: state.sendEvent,\n  downloadsCount: state.downloadsCount\n});\n\nconst Advert = () => {\n  const {\n    theme,\n    sendEvent,\n    downloadsCount\n  } = useSelector_useSelector(advert_mapState);\n  const {\n    i18n,\n    t\n  } = useTranslation();\n  const history = useHistory();\n  const advert = theme && theme.advert;\n  const color = advert && advert.color || "gray";\n  const numColor = advert && advert.num_color || "gray";\n  const figureColor = advert && advert.figure || "black";\n  const figureBorder = advert && advert.figure_border || "black";\n  const figureNumColor = advert && advert.figure_num_color || "black";\n  const buttonCancel = advert && advert.button_cancel;\n  const buttonCancelColor = buttonCancel && buttonCancel.color || "gray";\n  const buttonCancelHover = buttonCancel && buttonCancel.hover || "black";\n  return /*#__PURE__*/react_default.a.createElement(page, {\n    title: t("social_media_sharing_title")\n  }, /*#__PURE__*/react_default.a.createElement(advert_Container, {\n    color: color,\n    numColor: numColor\n  }, /*#__PURE__*/react_default.a.createElement(Counter, {\n    figureColor: figureColor,\n    figureBorder: figureBorder,\n    figureNumColor: figureNumColor\n  }, downloadsCount > 999 && /*#__PURE__*/react_default.a.createElement(IconOver, null), /*#__PURE__*/react_default.a.createElement(advert_Number, {\n    num: downloadsCount\n  })), /*#__PURE__*/react_default.a.createElement(advert_Conlumn, null, t("social_media_sharing_message").replace(/{%already%}/g, downloadsCount > 1 ? `${t("already")} ` : "").replace(/{%video%}/g, plural(downloadsCount, i18n.language, t("plural_video").split(","))).split(/\\n/).map(paragraph => /*#__PURE__*/react_default.a.createElement(advert_Paragraph, {\n    key: paragraph\n  }, paragraph.split("{%downloadsCount%}").map((part, i) => /*#__PURE__*/react_default.a.createElement("span", {\n    key: part\n  }, i > 0 && /*#__PURE__*/react_default.a.createElement("b", null, downloadsCount), part)))))), /*#__PURE__*/react_default.a.createElement(ui_button, {\n    onClick: () => {\n      sendEvent({\n        action: "share_btn"\n      });\n      window.open(`https://unidownloader.com/${i18n.language}/udl-helper?share=1`, "_blank");\n    },\n    icon: share,\n    text: t("social_media_sharing_button_ok")\n  }), /*#__PURE__*/react_default.a.createElement(ButtonCancel, {\n    color: buttonCancelColor,\n    hover: buttonCancelHover,\n    onClick: () => history.go(-1)\n  }, t("social_media_sharing_button_cancel")));\n};\n\n/* harmony default export */ var pages_advert = (Advert);\n// EXTERNAL MODULE: ./node_modules/react-use-cache/dist/index.js\nvar react_use_cache_dist = __webpack_require__(37);\n\n// EXTERNAL MODULE: ./node_modules/qrcode.react/lib/index.js\nvar lib = __webpack_require__(38);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n\n// CONCATENATED MODULE: ./src/widget/components/ui/spinner.jsx\n\n\n\nconst spinAnimation = styled_components_browser_esm["b" /* keyframes */]`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\nconst Svg = styled_components_browser_esm["a" /* default */].svg`\n  margin: auto;\n  max-height: calc(100% - 6px);\n  animation-name: ${spinAnimation};\n  animation-duration: 0.9s;\n  animation-timing-function: linear;\n  animation-iteration-count: infinite;\n`;\n\nconst spinner_mapState = state => ({\n  theme: state.theme\n});\n\nconst Spinner = ({\n  color\n}) => {\n  const {\n    theme\n  } = useSelector_useSelector(spinner_mapState);\n  const themeSpinner = theme && theme.spinner || "#3498db";\n  return /*#__PURE__*/react_default.a.createElement(Svg, {\n    xmlns: "http://www.w3.org/2000/svg",\n    width: "24px",\n    height: "24px",\n    viewBox: "0 0 24 24"\n  }, /*#__PURE__*/react_default.a.createElement("path", {\n    fill: color || themeSpinner,\n    d: " M 12 0 Q 7.05 0 3.5 3.45 L 5.6 5.55 Q 8.26796875 3 12 3 15.7 3 18.3 5.6 18.337890625 5.6373046875 18.35 5.65 L 20.5 3.5 Q 20.4876953125 3.4876953125 20.45 3.45 16.95 0 12 0 Z"\n  }));\n};\n\n/* harmony default export */ var spinner = (Spinner);\n// CONCATENATED MODULE: ./src/widget/components/icons/warning-2.jsx\n\n\nconst IconWarning2 = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "45.9px",\n  height: "40px",\n  viewBox: "0 0 45.9 40",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 24.2 29.85 Q 23.7 29.3 22.95 29.3 22.2 29.3 21.7 29.85 21.15 30.35 21.15 31.1 21.15 31.85 21.7 32.35 22.2 32.9 22.95 32.9 23.7 32.9 24.2 32.35 24.75 31.85 24.75 31.1 24.75 30.35 24.2 29.85 M 24.2 10.4 Q 23.7 9.85 22.95 9.85 22.2 9.85 21.7 10.4 21.15 10.9 21.15 11.65 L 21.15 24.85 Q 21.15 25.55 21.7 26.1 22.2 26.6 22.95 26.6 23.7 26.6 24.2 26.1 24.75 25.55 24.75 24.85 L 24.75 11.65 Q 24.75 10.9 24.2 10.4 M 40.95 23.45 Q 41.1 22.75 40.75 22.1 L 29.25 3.55 Q 28.25 1.9 26.55 0.95 24.9 0 22.95 0 21 0 19.3 0.95 17.65 1.9 16.65 3.55 L 1.1 28.65 Q 0.05 30.4 0 32.4 -0.05 34.4 0.95 36.15 1.95 37.95 3.65 38.95 5.4 40 7.45 40 L 38.45 40 Q 40.3 40 41.95 39.15 43.55 38.3 44.6 36.7 45.65 35.2 45.85 33.35 46.05 31.5 45.35 29.8 45.1 29.1 44.4 28.85 43.75 28.55 43.05 28.8 42.35 29.1 42.05 29.75 41.75 30.45 42.05 31.15 42.4 32 42.3 32.95 42.15 33.9 41.65 34.7 41.1 35.5 40.25 35.95 39.4 36.4 38.45 36.4 L 7.45 36.4 Q 6.4 36.4 5.5 35.85 4.6 35.35 4.1 34.4 3.55 33.5 3.6 32.45 3.6 31.4 4.15 30.5 L 19.65 5.4 Q 20.2 4.55 21.05 4.1 21.95 3.6 22.95 3.6 23.95 3.6 24.8 4.1 25.7 4.55 26.2 5.4 L 37.7 24 Q 38.05 24.6 38.8 24.8 39.5 24.95 40.15 24.55 40.8 24.2 40.95 23.45 Z"\n}));\n\n/* harmony default export */ var warning_2 = (IconWarning2);\n// CONCATENATED MODULE: ./src/widget/pages/qr-code.jsx\n\n\n\n\n\n\n\n\n\nconst qr_code_Container = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 16px;\n  & div { margin-bottom: 24px; }\n  & p { width: 280px; }\n  & canvas {\n    border: 16px solid white;\n    display: block;\n    margin: 0 auto 24px;\n  }\n`;\nconst qr_code_Paragraph = styled_components_browser_esm["a" /* default */].p`\n  font-size: 14px;\n  line-height: 20px;\n  color: ${props => props.color};\n  margin: 0 16px 24px;\n`;\n\nconst qr_code_mapState = state => ({\n  theme: state.theme\n});\n\nconst QRcodeContent = ({\n  data\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useSelector_useSelector(qr_code_mapState);\n  const themeQrCode = theme && theme.qr_code;\n  const errorColor = themeQrCode && themeQrCode.error;\n  return data.err === null ? /*#__PURE__*/react_default.a.createElement(lib_default.a, {\n    size: 256,\n    value: data.url,\n    bgColor: "white",\n    fgColor: "black"\n  }) : /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(warning_2, {\n    color: errorColor\n  }), /*#__PURE__*/react_default.a.createElement(qr_code_Paragraph, {\n    color: errorColor\n  }, t("qr_code_error")));\n};\n\nconst QRcodePage = ({\n  url\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useSelector_useSelector(qr_code_mapState);\n  const themeQrCode = theme && theme.qr_code;\n  const color = themeQrCode && themeQrCode.color;\n  const {\n    isFetching,\n    data\n  } = Object(react_use_cache_dist["useCache"])(async () => {\n    try {\n      const res = await fetch("https://unidownloader.com/api/storage/findOrCreate", {\n        method: "POST",\n        mode: "cors",\n        // no-cors, *cors, same-origin\n        headers: {\n          "Content-Type": "application/json"\n        },\n        redirect: "follow",\n        referrerPolicy: "no-referrer",\n        body: JSON.stringify({\n          webpage_url: url\n        })\n      });\n\n      if (res.status === 200) {\n        const bundle = await res.json();\n        return {\n          url: `https://unidownloader.com/r/${bundle.increment}`,\n          err: null\n        };\n      }\n\n      return {\n        url: null,\n        err: res.statusText\n      };\n    } catch (e) {\n      return {\n        url: null,\n        err: e\n      };\n    }\n  }, url);\n  return /*#__PURE__*/react_default.a.createElement(page, {\n    title: t("qr_code_title")\n  }, /*#__PURE__*/react_default.a.createElement(qr_code_Container, null, isFetching ? /*#__PURE__*/react_default.a.createElement(spinner, null) : /*#__PURE__*/react_default.a.createElement(QRcodeContent, {\n    data: data\n  })), /*#__PURE__*/react_default.a.createElement(qr_code_Paragraph, {\n    color: color\n  }, t("qr_code_description")));\n};\n\n/* harmony default export */ var pages_qr_code = (QRcodePage);\n// CONCATENATED MODULE: ./src/widget/components/ui/dropdown.jsx\n\n\n\n\nconst dropdown_Container = styled_components_browser_esm["a" /* default */].div`\n  padding: ${props => props.isBottomToTop ? "0 0 4px 0" : "4px 0 0 0"};\n  position: absolute;\n  top: ${props => props.posY}px;\n  left: ${props => props.posX}px;\n  transform: ${props => props.isBottomToTop ? "translateY(-100%)" : "none"};\n  opacity: ${props => props.isDropdownShow ? 1 : 0};\n  transition: opacity 0.25s ease-in-out;\n`;\nconst Mask = styled_components_browser_esm["a" /* default */].div`\n  overflow: ${props => props.isAnimated ? "hidden" : "visible"};\n`;\nconst dropdown_Content = styled_components_browser_esm["a" /* default */].div`\n  transform: ${props => props.isDropdownShow ? "none" : props.transform};\n  transition: ${props => props.isAnimated ? "transform 0.25s ease-in-out" : "none"};\n`;\n\nconst dropdown_mapState = state => ({\n  dir: state.dir,\n  module: state.module\n});\n\nconst Overlay = ({\n  content,\n  element,\n  trigger,\n  isElementClicked,\n  isElementMouseOver\n}) => {\n  const {\n    dir,\n    module\n  } = useSelector_useSelector(dropdown_mapState);\n  const {\n    getScrollContainer\n  } = module;\n  const dropdown = document.getElementById("unidownloader-dropdown");\n  const [dropdownNode, setDropdownNode] = Object(react["useState"])();\n  const [isDropdown, setIsDropdown] = Object(react["useState"])(false);\n  const [isDropdownShow, setIsDropdownShow] = Object(react["useState"])(false);\n  const [isDropdownMouseOver, setIsDropdownMouseOver] = Object(react["useState"])(false);\n  const [isAnimated, setIsAnimated] = Object(react["useState"])(false);\n  const [isMouseOver, setIsMouseOver] = Object(react["useState"])(false);\n  const [isTimeout, setIsTimeout] = Object(react["useState"])(false);\n  const [posX, setPosX] = Object(react["useState"])(0);\n  const [posY, setPosY] = Object(react["useState"])(0);\n  const [isBottomToTop, setIsBottomToTop] = Object(react["useState"])(false);\n  const [isDropdownClickedOutside, setIsDropdownClickedOutside] = Object(react["useState"])(false);\n  Object(react["useEffect"])(() => {\n    if (isDropdownClickedOutside) setIsDropdownClickedOutside(false);\n  }, [isDropdownClickedOutside]);\n  Object(react["useEffect"])(() => {\n    const handleClick = event => {\n      if (!dropdownNode.contains(event.target)) {\n        setIsDropdownClickedOutside(true);\n      }\n    };\n\n    if (dropdownNode && isDropdown && trigger === "click") {\n      document.addEventListener("click", handleClick, true);\n    }\n\n    const handlePopstate = () => {\n      setIsDropdown(false);\n    };\n\n    window.addEventListener("popstate", handlePopstate);\n    return () => {\n      document.removeEventListener("click", handleClick, true);\n      window.removeEventListener("popstate", handlePopstate);\n    };\n  }, [dropdownNode, isDropdown, trigger]);\n  Object(react["useEffect"])(() => {\n    const setPos = () => {\n      const elementRect = element.getBoundingClientRect();\n\n      if (elementRect) {\n        const nodeRect = dropdownNode.getBoundingClientRect();\n\n        if (nodeRect) {\n          const margin = 4;\n          const {\n            innerHeight\n          } = window;\n          const scrollTop = getScrollContainer ? getScrollContainer().scrollTop : window.pageYOffset;\n          const elementTop = elementRect.top;\n          const elementRight = elementRect.right;\n          const elementBottom = elementRect.bottom;\n          const elementLeft = elementRect.left;\n          const nodeWidth = nodeRect.width;\n          const nodeHeight = nodeRect.height;\n\n          if (elementBottom + nodeHeight > innerHeight && elementTop - nodeHeight > 0) {\n            setPosY(scrollTop + elementTop);\n            setIsBottomToTop(true);\n          } else {\n            setPosY(scrollTop + elementBottom);\n            setIsBottomToTop(false);\n          }\n\n          const {\n            clientWidth\n          } = document.body;\n\n          if (dir === "rtl") {\n            if (elementLeft + nodeWidth + margin > clientWidth) {\n              setPosX(clientWidth - nodeWidth - margin);\n            } else {\n              setPosX(elementLeft);\n            }\n          } else if (elementRight - nodeWidth - margin < 0) {\n            setPosX(margin);\n          } else {\n            setPosX(elementRight - nodeWidth);\n          }\n        }\n      }\n    };\n\n    const resizeObserver = new ResizeObserver(setPos);\n\n    if (isDropdown && dropdownNode && element) {\n      setPos();\n      document.addEventListener("scroll", setPos);\n      window.addEventListener("resize", setPos);\n      resizeObserver.observe(dropdownNode);\n    }\n\n    return () => {\n      if (isDropdown && dropdownNode && element) {\n        document.removeEventListener("scroll", setPos);\n        window.removeEventListener("resize", setPos);\n        resizeObserver.unobserve(dropdownNode);\n      }\n    };\n  }, [dropdownNode, isDropdown, element, dir, getScrollContainer]);\n  Object(react["useEffect"])(() => {\n    if (dropdown && element && !isDropdown && !isAnimated && !isDropdownShow && (trigger === "click" && isElementClicked || trigger === "hover" && isElementMouseOver)) {\n      setIsDropdown(true);\n    }\n  }, [dropdown, element, isAnimated, isDropdownShow, trigger, isElementClicked, isElementMouseOver, isDropdown]);\n  Object(react["useEffect"])(() => {\n    if (isDropdown) {\n      setTimeout(() => {\n        setIsAnimated(true);\n        setIsDropdownShow(true);\n      }, 1);\n    }\n  }, [isDropdown]);\n\n  if (isMouseOver) {\n    if (!isDropdownMouseOver) {\n      setIsDropdownMouseOver(true);\n    }\n  } else if (!isTimeout) {\n    if (isDropdownMouseOver) {\n      setIsDropdownMouseOver(false);\n    }\n  }\n\n  if (isDropdownShow && !isAnimated && !isDropdownMouseOver && (trigger === "click" && isDropdownClickedOutside || trigger === "hover" && !isElementMouseOver)) {\n    setIsAnimated(true);\n    setIsDropdownShow(false);\n  }\n\n  if (dropdown && isDropdown) {\n    return Object(react_dom["createPortal"])( /*#__PURE__*/react_default.a.createElement(dropdown_Container, {\n      ref: node => {\n        if (node) {\n          setDropdownNode(node);\n        }\n      },\n      posX: posX,\n      posY: posY,\n      isBottomToTop: isBottomToTop,\n      isDropdownShow: isDropdownShow,\n      onMouseEnter: () => {\n        setIsMouseOver(true);\n      },\n      onMouseLeave: () => {\n        setIsTimeout(true);\n        setIsMouseOver(false);\n        setTimeout(() => {\n          setIsTimeout(false);\n        }, 200);\n      }\n    }, /*#__PURE__*/react_default.a.createElement(Mask, {\n      isAnimated: isAnimated\n    }, /*#__PURE__*/react_default.a.createElement(dropdown_Content, {\n      isAnimated: isAnimated,\n      isDropdownShow: isDropdownShow,\n      transform: `translateY(${isBottomToTop ? 100 : -100}%)`,\n      onTransitionEnd: () => {\n        setIsAnimated(false);\n        if (!isDropdownShow) setIsDropdown(false);\n      }\n    }, content))), dropdown);\n  }\n\n  return null;\n};\n\nconst Dropdown = ({\n  children,\n  overlay,\n  trigger\n}) => {\n  const [element, setElement] = Object(react["useState"])();\n  const [isElementClicked, setIsElementClicked] = Object(react["useState"])(false);\n  Object(react["useEffect"])(() => {\n    if (isElementClicked) setIsElementClicked(false);\n  }, [isElementClicked]);\n  const [isMouseOver, setIsMouseOver] = Object(react["useState"])(false);\n  const [isElementMouseOver, setIsElementMouseOver] = Object(react["useState"])(false);\n  const [isTimeout, setIsTimeout] = Object(react["useState"])(false);\n  Object(react["useEffect"])(() => {\n    if (isMouseOver) {\n      setIsElementMouseOver(true);\n    } else if (!isTimeout) {\n      setIsElementMouseOver(false);\n    }\n  }, [isMouseOver, isTimeout]);\n  Object(react["useEffect"])(() => {\n    const handleClick = () => {\n      if (trigger === "click") setIsElementClicked(true);\n\n      if (trigger === "hover") {\n        const onClick = children && children.props && children.props.onClick;\n        if (onClick) onClick();\n      }\n    };\n\n    if (element) {\n      element.addEventListener("click", handleClick);\n    }\n\n    return () => {\n      if (element) {\n        element.removeEventListener("click", handleClick);\n      }\n    };\n  }, [children, trigger, element]);\n  return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, Object(react["cloneElement"])(children, { ...(trigger === "hover" && {\n      onMouseEnter: () => {\n        setIsMouseOver(true);\n      },\n      onMouseLeave: () => {\n        setIsTimeout(true);\n        setIsMouseOver(false);\n        setTimeout(() => {\n          setIsTimeout(false);\n        }, 200);\n      }\n    }),\n    onClick: null,\n    ref: node => {\n      if (node) setElement(node);\n    }\n  }), /*#__PURE__*/react_default.a.createElement(Overlay, {\n    content: overlay,\n    element: element,\n    trigger: trigger || "hover",\n    isElementClicked: isElementClicked,\n    isElementMouseOver: isElementMouseOver\n  }));\n};\n\n/* harmony default export */ var ui_dropdown = (Dropdown);\n// CONCATENATED MODULE: ./src/widget/components/icons/download.jsx\n\n\nconst IconDownload = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "16.5px",\n  height: "20px",\n  viewBox: "0 0 16.5 20",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M16.5,7.1h-4.7V0h-7v7.1H0l8.2,8.2L16.5,7.1z M0,17.7V20h16.5v-2.3H0z"\n}));\n\n/* harmony default export */ var icons_download = (IconDownload);\n// CONCATENATED MODULE: ./src/widget/app.jsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst app_Button = styled_components_browser_esm["a" /* default */].button`\n  outline: none;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: ${props => props.enabled === false ? "default" : "pointer"};\n  ${props => {\n  if (props.download) {\n    const result = `\n        padding: 0 9px;\n        border: 1px solid ${props.border};\n      `;\n\n    if (props.dir === "ltr") {\n      return `\n          ${result}\n          border-right: none;\n          border-top-left-radius: 2px;\n          border-bottom-left-radius: 2px;\n        `;\n    }\n\n    if (props.dir === "rtl") {\n      return `\n          ${result}\n          border-left: none;\n          border-top-right-radius: 2px;\n          border-bottom-right-radius: 2px;\n        `;\n    }\n  }\n\n  if (props.dropdown) {\n    const result = `\n        padding: 0;\n        border: 1px solid ${props.border};\n      `;\n\n    if (props.dir === "ltr") {\n      return `\n          ${result}\n          border-left: none;\n          border-top-right-radius: 2px;\n          border-bottom-right-radius: 2px;\n        `;\n    }\n\n    if (props.dir === "rtl") {\n      return `\n          ${result}\n          border-right: none;\n          border-top-left-radius: 2px;\n          border-bottom-left-radius: 2px;\n        `;\n    }\n  }\n\n  return `\n      padding: 0 6px;\n      border: none;\n      border-radius: 2px;\n    `;\n}}\n  ${props => {\n  if (props.enabled === false) return "background-color: rgba(128,128,128,0.65);";\n\n  if (props.dropdown) {\n    return `\n        background-color: #fff6e5;\n        &:hover {\n          background-color: #fff3dd;\n          & span {\n            color: #282828;\n            &::after {\n              border-right-color: #282828;\n              border-bottom-color: #282828;\n            }\n          }\n        }\n      `;\n  }\n\n  if (props.download) {\n    return `\n        background-color: #ffa200;\n        &:hover { background-color: #ff982a }\n        &:active { background-color: #ff8400}\n      `;\n  }\n\n  return `\n      background-color: #ffa200;\n      &:active { background-color: #ff8400 }\n    `;\n}}\n  & svg {\n    max-height: calc(100% - 10px);\n    margin: 0 4px;\n    fill: white;\n  }\n  & span {\n    color: ${props => props.dropdown ? "#5e5e5e" : "white"};\n    ${props => props.dropdown && `\n      display: flex;\n      padding: 0 6px;\n      &::before {\n        content: " ";\n        width: 4px;\n      }\n      &::after {\n        content: " ";\n        width: 9px;\n        height: 9px;\n        margin: 0 4px;\n        transform: rotate(45deg) scale(0.7);\n        border-right: 2px solid #5e5e5e;\n        border-bottom: 2px solid #5e5e5e;\n      }\n    `}\n  }\n`;\nconst app_Text = styled_components_browser_esm["a" /* default */].span`\n  user-select: none;\n  margin: 0 4px;\n`;\n\nconst AppBody = () => /*#__PURE__*/react_default.a.createElement(react_router_Switch, null, /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  exact: true,\n  path: "/",\n  render: () => /*#__PURE__*/react_default.a.createElement(main, null)\n}), /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  path: "/more",\n  render: () => /*#__PURE__*/react_default.a.createElement(main, {\n    loadMore: "true"\n  })\n}), /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  path: "/settings",\n  render: () => /*#__PURE__*/react_default.a.createElement(settings_full, null)\n}), /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  path: "/help",\n  render: () => /*#__PURE__*/react_default.a.createElement(pages_help, null)\n}), /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  path: "/confirm",\n  render: () => /*#__PURE__*/react_default.a.createElement(pages_confirm, null)\n}), /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  path: "/advert",\n  render: () => /*#__PURE__*/react_default.a.createElement(pages_advert, null)\n}), /*#__PURE__*/react_default.a.createElement(react_router_Route, {\n  path: "/qrcode/:data",\n  render: ({\n    match\n  }) => /*#__PURE__*/react_default.a.createElement(pages_qr_code, {\n    url: decodeURIComponent(escape(atob(match.params.data)))\n  })\n}));\n\nconst App = () => {\n  const {\n    status,\n    defaultItem,\n    buttonTitle,\n    dir,\n    sendEvent,\n    download,\n    appButtonStyle\n  } = useAppState(["status", "defaultItem", "buttonTitle", "dir", "sendEvent", "download", "appButtonStyle"]);\n  const {\n    i18n,\n    t\n  } = useTranslation();\n  const isSplit = appButtonStyle === "Split";\n  const openLandingUrl = Object(react["useCallback"])(() => {\n    const landingUrl = utils_ctx["a" /* default */].getServiceUrl(utils_ctx["a" /* default */].window.location.href, i18n.language);\n    window.open(landingUrl, "_blank");\n    sendEvent({\n      action: "landing",\n      format: ""\n    });\n  }, [i18n, sendEvent]);\n  const [splitDownloadButtonNode, setSplitDownloadButtonNode] = Object(react["useState"])();\n  Object(react["useEffect"])(() => {\n    const handleClick = evt => {\n      evt.preventDefault();\n\n      if (status === "unavailable") {\n        openLandingUrl();\n      } else {\n        download();\n      }\n    };\n\n    if (splitDownloadButtonNode) {\n      splitDownloadButtonNode.addEventListener("click", handleClick);\n    }\n\n    return () => {\n      if (splitDownloadButtonNode) {\n        splitDownloadButtonNode.removeEventListener("click", handleClick);\n      }\n    };\n  }, [splitDownloadButtonNode, status, openLandingUrl, download]);\n\n  if (appButtonStyle) {\n    return /*#__PURE__*/react_default.a.createElement(error_boundary, null, /*#__PURE__*/react_default.a.createElement(react_router_MemoryRouter, null, isSplit && /*#__PURE__*/react_default.a.createElement(app_Button, {\n      download: "true",\n      dir: dir,\n      border: "#d5d0d0",\n      ref: node => {\n        if (node) {\n          setSplitDownloadButtonNode(node);\n        }\n      }\n    }, /*#__PURE__*/react_default.a.createElement(icons_download, null)), /*#__PURE__*/react_default.a.createElement(ui_dropdown, {\n      overlay: /*#__PURE__*/react_default.a.createElement(AppBody, null),\n      trigger: isSplit ? "click" : "hover"\n    }, isSplit ? /*#__PURE__*/react_default.a.createElement(app_Button, {\n      dropdown: "true",\n      dir: dir,\n      border: "#d5d0d0"\n    }, /*#__PURE__*/react_default.a.createElement(app_Text, {\n      id: "unidownloader-btn-text"\n    }, status === "unavailable" ? t("udl_portal") : buttonTitle)) : /*#__PURE__*/react_default.a.createElement(app_Button, {\n      onClick: () => {\n        if (status === "unavailable") {\n          openLandingUrl();\n        } else if (defaultItem) {\n          download();\n        }\n      }\n    }, /*#__PURE__*/react_default.a.createElement(icons_download, null), /*#__PURE__*/react_default.a.createElement(app_Text, {\n      id: "unidownloader-btn-text"\n    }, `${t("download").toUpperCase()} ${buttonTitle}`)))));\n  }\n\n  return null;\n};\n\n/* harmony default export */ var app = (App);\n// CONCATENATED MODULE: ./src/widget/live-stream.jsx\n\n\n\n\n\n\nconst LiveStream = () => {\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/react_default.a.createElement(ui_tooltip, {\n    title: t("live_stream_tooltip")\n  }, /*#__PURE__*/react_default.a.createElement(app_Button, {\n    enabled: false\n  }, /*#__PURE__*/react_default.a.createElement(unidownloader, null), /*#__PURE__*/react_default.a.createElement(app_Text, {\n    id: "unidownloader-btn-text"\n  }, t("live_stream").toUpperCase())));\n};\n\n/* harmony default export */ var live_stream = (LiveStream);\n// CONCATENATED MODULE: ./src/widget/components/icons/cancel.jsx\n\n\nconst IconCancel = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "14px",\n  height: "14px",\n  viewBox: "0 0 14 14",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: "M7,0C3.2,0,0,3.1,0,7s3.2,7,7,7s7-3.2,7-7S10.9,0,7,0z M10.5,9.3c0.3, 0.3,0.3,0.8,0,1.2c-0.3,0.3-0.8,0.3-1.2,0L7,8.1l-2.3,2.3c-0.3,0.3-0.8, 0.3-1.2,0c-0.3-0.3-0.3-0.8,0-1.2L5.8,7L3.5,4.7c-0.3-0.3-0.3-0.8, 0-1.2c0.3-0.3,0.8-0.3,1.2,0L7,5.8l2.3-2.3c0.3-0.3,0.8-0.3,1.2,0c0.3, 0.3,0.3,0.8,0,1.2L8.2,7L10.5,9.3z"\n}));\n\n/* harmony default export */ var icons_cancel = (IconCancel);\n// CONCATENATED MODULE: ./src/widget/components/ui/progress-bar.jsx\n\n\n\n\n\n\nconst progress_bar_Container = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: center;\n`;\nconst Progress = styled_components_browser_esm["a" /* default */].div`\n  background-color: ${props => props.background || "black"};\n  width: 85px;\n  height: 8px;\n  border-radius: 6px;\n  position: relative;\n  overflow: hidden;\n  ${props => props.borderColor && `border: 1px solid ${props.borderColor};`}\n  &::before {\n    background-color: ${props => props.progressColor || "gray"};\n    content: " ";\n    position: absolute;\n    display: ${props => props.percent ? "block" : "none"}%;\n    width: ${props => props.percent || 0}%;\n    height: 8px;\n    border-radius: 4px;\n  }\n`;\nconst Cancel = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n  display: flex;\n  &::before {\n    content: " ";\n    width: 6px;\n  }\n`;\n\nconst progress_bar_mapState = state => ({\n  progress: state.progress,\n  cancel: state.cancel,\n  theme: state.theme\n});\n\nconst ProgressBar = ({\n  color\n}) => {\n  const {\n    progress,\n    cancel,\n    theme\n  } = useSelector_useSelector(progress_bar_mapState);\n  const {\n    t\n  } = useTranslation();\n  const tasks = progress && Object.keys(progress);\n  const percent = tasks && parseFloat(tasks.reduce((acc, key) => acc + progress[key] / tasks.length, 0).toFixed(2));\n  const progressBarStyles = theme && theme.progress_bar;\n  const background = progressBarStyles && progressBarStyles.background;\n  const progressColor = progressBarStyles && progressBarStyles.progress;\n  const cancelColor = progressBarStyles && progressBarStyles.cancel;\n\n  const tooltipText = () => {\n    if (progress) {\n      if (progress.muxing !== 0) return t("cancel_conversion");\n      return t("cancel_download");\n    }\n\n    return null;\n  };\n\n  console.log("PROGRESS:", percent, progress);\n  return /*#__PURE__*/react_default.a.createElement(progress_bar_Container, null, /*#__PURE__*/react_default.a.createElement(Progress, {\n    percent: percent || 20,\n    background: color ? "transparent" : background,\n    progressColor: color || progressColor,\n    borderColor: color\n  }), /*#__PURE__*/react_default.a.createElement(ui_tooltip, {\n    title: tooltipText()\n  }, /*#__PURE__*/react_default.a.createElement(Cancel, {\n    onClick: evt => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      console.log("cancel called", cancel);\n      if (cancel) cancel();\n    }\n  }, /*#__PURE__*/react_default.a.createElement(icons_cancel, {\n    color: color || cancelColor\n  }))));\n};\n\n/* harmony default export */ var progress_bar = (ProgressBar);\n// CONCATENATED MODULE: ./src/widget/components/icons/lightning.jsx\n\n\nconst IconLightning = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "80px",\n  height: "73.95px",\n  viewBox: "0 0 80 73.95",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 15.9 70.75 Q 15.35 71.3 15.35 72.05 15.35 72.85 15.9 73.4 16.45 73.9 17.2 73.9 18 73.9 18.5 73.35 19.05 72.85 19.05 72.05 19.05 71.3 18.5 70.75 18 70.2 17.2 70.2 16.45 70.2 15.9 70.75 M 38.4 4.65 Q 38.9 3.65 40 3.65 41.1 3.65 41.6 4.65 L 76.1 67.65 Q 76.5 68.45 75.95 69.35 75.4 70.2 74.4 70.2 L 24.6 70.2 Q 23.85 70.2 23.3 70.75 22.75 71.3 22.75 72.05 22.75 72.85 23.3 73.4 23.8 73.9 24.6 73.9 L 74.4 73.9 Q 77.5 73.9 79.15 71.2 80.7 68.6 79.35 65.95 L 79.35 65.9 44.9 2.9 Q 43.3 0 40 0 36.65 0 35.1 2.9 L 0.7 65.8 Q -0.75 68.6 0.9 71.25 2.55 73.95 5.65 73.95 L 9.8 73.95 Q 10.55 73.95 11.1 73.4 11.65 72.9 11.65 72.1 11.65 71.3 11.05 70.75 10.55 70.25 9.8 70.25 L 5.65 70.25 Q 4.55 70.25 4.05 69.35 3.5 68.5 3.95 67.55 L 38.4 4.65 M 41.85 16.6 Q 41.85 15.95 41.45 15.45 41 14.9 40.35 14.8 39.75 14.65 39.15 14.95 38.55 15.3 38.3 15.9 L 27.2 43.65 Q 26.85 44.65 27.4 45.35 27.9 46.15 28.95 46.15 L 38.15 46.15 38.15 64.65 Q 38.15 65.3 38.55 65.85 39.05 66.4 39.65 66.45 40.3 66.6 40.9 66.3 41.5 66 41.7 65.35 L 52.85 37.65 Q 53.15 36.65 52.65 35.85 52.1 35.1 51.15 35.1 L 41.85 35.1 41.85 16.6 M 41.85 44.3 Q 41.85 43.6 41.3 43.05 40.8 42.45 40 42.45 L 31.65 42.45 38.15 26.2 38.15 36.95 Q 38.15 37.7 38.7 38.25 39.25 38.8 40 38.8 L 48.35 38.8 41.85 55.05 41.85 44.3 Z"\n}));\n\n/* harmony default export */ var lightning = (IconLightning);\n// CONCATENATED MODULE: ./src/widget/components/icons/info.jsx\n\n\nconst IconInfo = ({\n  style,\n  color,\n  className\n}) => /*#__PURE__*/react_default.a.createElement("svg", {\n  xmlns: "http://www.w3.org/2000/svg",\n  width: "21px",\n  height: "21px",\n  viewBox: "0 0 21 21",\n  style: style,\n  className: className\n}, /*#__PURE__*/react_default.a.createElement("path", {\n  fill: color,\n  d: " M 17.95 3.1 Q 14.85 0 10.5 0 6.15 0 3.1 3.1 0 6.2 0 10.55 0 14.9 3.1 17.95 6.15 21 10.5 21 14.85 21 17.95 17.95 21 14.85 21 10.55 21 6.2 17.95 3.1 M 10.5 1.9 Q 14.05 1.9 16.6 4.45 19.1 7 19.1 10.55 19.1 14.1 16.6 16.6 14.05 19.15 10.5 19.15 6.95 19.15 4.4 16.6 1.9 14.1 1.9 10.55 1.9 7 4.4 4.45 6.95 1.9 10.5 1.9 M 11.2 9.2 Q 10.9 8.95 10.5 8.95 10.1 8.95 9.8 9.2 9.55 9.5 9.55 9.9 L 9.55 15.6 Q 9.55 16 9.8 16.3 10.1 16.6 10.5 16.6 10.9 16.6 11.2 16.3 11.45 16 11.45 15.6 L 11.45 9.9 Q 11.45 9.5 11.2 9.2 M 10.45 7 Q 11 7 11.35 6.65 11.75 6.25 11.75 5.75 11.75 5.2 11.35 4.85 11 4.45 10.45 4.45 10 4.45 9.6 4.85 9.25 5.2 9.25 5.75 9.25 6.25 9.6 6.65 9.95 7 10.45 7 Z"\n}));\n\n/* harmony default export */ var icons_info = (IconInfo);\n// CONCATENATED MODULE: ./src/utils/save-file.js\nlet saving = false;\nconst save_file_saveFile = function (url, filename) {\n  if (!saving) {\n    saving = true;\n    const a = document.createElement("a");\n    a.href = url;\n    a.download = filename;\n    console.log(document.createElement);\n    a.addEventListener = function (event, listener) {\n      console.log("FAKE!!!", event, listener);\n    };\n    // document.body.appendChild(a);\n    if (document.createEvent) {\n      const event = document.createEvent("MouseEvents");\n      event.initEvent("click", true, true);\n      a.dispatchEvent(event);\n    } else {\n      a.click();\n    }\n    saving = false;\n  }\n};\n\n/* harmony default export */ var save_file = (save_file_saveFile);\n\n// CONCATENATED MODULE: ./src/widget/components/snapshot-button.jsx\n\n\n\n\n\n\n\n\nconst snapshot_button_Container = styled_components_browser_esm["a" /* default */].div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n`;\nconst snapshot_button_Button = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n`;\n\nconst SnapshotButton = () => {\n  const {\n    status,\n    snap,\n    defaultItem,\n    sendEvent,\n    showSnapshotButton\n  } = useAppState(["status", "snap", "defaultItem", "sendEvent", "showSnapshotButton"]);\n  const {\n    t\n  } = useTranslation(); // TODO это жонглирование обработчиком click вызвано работой одноклассников\n  // возможно можно "чисто" вынести эту логику, сделав универсальной для компонент содержащих onClick\n  // идея заключается в том что бы иньектить эту логику ТОЛЬКО для ui работающего в ok\n\n  const snapshot = document.getElementById("unidownloader-snapshot");\n  Object(react["useEffect"])(() => {\n    const handleClick = () => {\n      sendEvent({\n        action: "snap"\n      });\n      save_file(snap(), `${defaultItem.title}.jpeg`);\n    };\n\n    if (snapshot) {\n      snapshot.addEventListener("click", handleClick);\n\n      if (showSnapshotButton) {\n        snapshot.setAttribute("style", "");\n      } else {\n        snapshot.setAttribute("style", "display:none");\n      }\n    }\n\n    return () => {\n      if (snapshot) {\n        snapshot.removeEventListener("click", handleClick);\n      }\n    };\n  }, [showSnapshotButton, snapshot, snap, sendEvent, defaultItem]);\n  const snapshotButton = /*#__PURE__*/react_default.a.createElement(ui_tooltip, {\n    title: t("take_screenshot_tooltip")\n  }, /*#__PURE__*/react_default.a.createElement(snapshot_button_Container, null, /*#__PURE__*/react_default.a.createElement(snapshot_button_Button, null, /*#__PURE__*/react_default.a.createElement(camera, {\n    color: "white"\n  })))); // TODO снапшоты можно снимать в любое время\n  // ограничение на статус вызвано тем что мы не имеем title\n  // title можно получать из верстки не дожидаясь video info\n  // в том числе и на трансляциях\n\n  if (status === "idle" && snapshot) {\n    return Object(react_dom["createPortal"])(showSnapshotButton ? snapshotButton : null, snapshot);\n  }\n\n  return null;\n};\n\n/* harmony default export */ var snapshot_button = (SnapshotButton);\n// CONCATENATED MODULE: ./src/widget/components/ui/notifications/notification.jsx\n\n\n\n\nconst Holder = styled_components_browser_esm["a" /* default */].div`\n  transition: ${props => props.transition};\n  margin: ${props => props.margin};\n  max-height: ${props => props.maxHeight};\n`;\nconst notification_Container = styled_components_browser_esm["a" /* default */].div`\n  background-color: ${props => props.background || "white"};\n  user-select: none;\n  border-radius: 2px;\n  border: 1px solid ${props => props.border};\n  padding: 8px;\n  transition: transform 0.25s ease-in-out;\n  transform: ${props => props.transform};\n  font-family: sans-serif;\n  font-weight: 500;\n  & .unidownloader-icon { fill: ${props => props.iconColor}; }\n`;\nconst HeaderContainer = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst notification_Header = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: center;\n  &::after {\n    content: " ";\n    width: 54px;\n  }\n`;\nconst IconContainer = styled_components_browser_esm["a" /* default */].div`\n  background-color: #ff7a0f;\n  background-image: linear-gradient(#ff7a0f, #ffa70d);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 18px;\n  height: 18px;\n  border-radius: 2px;\n  & svg {\n    display: block;\n    width: 13px;\n    fill: white;\n  }\n`;\nconst Message = styled_components_browser_esm["a" /* default */].span`\n  font-size: 16px;\n  color: ${props => props.color};\n  ${props => props.dir === "rtl" ? "margin-right: 10px;" : "margin-left: 10px;"}\n`;\nconst ButtonClose = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  position: relative;\n  width: 21px;\n  height: 21px;\n  box-sizing: border-box;\n  border: 1px solid ${props => props.border};\n  &::before,\n  &::after {\n    content: " ";\n    display: block;\n    position: absolute;\n    width: 13px;\n    height: 1px;\n    top: 9px;\n    left: 3px;\n    background-color: ${props => props.border || "black"};\n  }\n  &::before { transform: rotate(-45deg); }\n  &::after { transform: rotate(45deg); }\n`;\nconst notification_Content = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 6px;\n  border-top: 1px solid ${props => props.borderTop};\n  padding: 20px 0;\n`;\nconst Description = styled_components_browser_esm["a" /* default */].span`\n  display: inline-block;\n  font-size: 14px;\n  color: ${props => props.color};\n  line-height: 28px;\n  max-width: 320px;\n  ${props => props.dir === "rtl" ? "margin-right: 20px;" : "margin-left: 20px;"}\n`;\n\nconst Notification = ({\n  index,\n  theOnly,\n  icon,\n  message,\n  description,\n  bottomContent,\n  duration,\n  close,\n  onClose\n}) => {\n  const {\n    dir,\n    theme,\n    removeNotification\n  } = useAppState(["dir", "theme", "removeNotification"]);\n  const [transition, setTransition] = Object(react["useState"])(`all ${theOnly ? 0.01 : 0.25}s ease-in-out`);\n  const [margin, setMargin] = Object(react["useState"])(0);\n  const [maxHeight, setMaxHeight] = Object(react["useState"])(0);\n  const [isLoaded, setIsLoaded] = Object(react["useState"])(false);\n  const transformRTL = "translateX(100%) translateX(30px)";\n  const transformLTR = "translateX(-100%) translateX(-30px)";\n  const [transform, setTransform] = Object(react["useState"])(dir === "rtl" ? transformRTL : transformLTR);\n  const [isClosed, setIsClosed] = Object(react["useState"])(false);\n  Object(react["useEffect"])(() => {\n    if (isLoaded) {\n      setTimeout(() => setTransform("none"), 0);\n    } else {\n      setMargin("0 30px 30px");\n    }\n  }, [isLoaded]);\n  Object(react["useEffect"])(() => {\n    let timeout;\n\n    if (isClosed) {\n      setTransform(dir === "rtl" ? transformRTL : transformLTR);\n    } else if (duration !== -1) {\n      timeout = setTimeout(() => {\n        setIsClosed(true);\n      }, duration || 4500);\n    }\n\n    return () => timeout && clearTimeout(timeout);\n  }, [isClosed, dir, duration]);\n\n  if (close) {\n    close(() => setIsClosed(true));\n  }\n\n  const Icon = () => icon && react_default.a.createElement(icon, {\n    className: "unidownloader-icon"\n  });\n\n  const notificationStyles = theme && theme.notification;\n  const background = notificationStyles && notificationStyles.background;\n  const border = notificationStyles && notificationStyles.border;\n  const borderTop = notificationStyles && notificationStyles.border_top;\n  const closeButtonBorder = notificationStyles && notificationStyles.close_button;\n  const iconColor = notificationStyles && notificationStyles.icon;\n  const messageColor = notificationStyles && notificationStyles.message;\n  const descriptionColor = notificationStyles && notificationStyles.description;\n  return /*#__PURE__*/react_default.a.createElement(Holder, {\n    transition: transition,\n    margin: margin,\n    maxHeight: maxHeight,\n    onTransitionEnd: () => {\n      if (transition !== "all 0s ease 0s") {\n        setTransition("all 0s ease 0s");\n\n        if (!isLoaded) {\n          setIsLoaded(true);\n        } else if (isClosed) {\n          if (onClose) onClose();\n          removeNotification(index);\n        }\n      }\n    }\n  }, /*#__PURE__*/react_default.a.createElement(notification_Container, {\n    transform: transform,\n    background: background,\n    border: border,\n    iconColor: iconColor,\n    ref: node => {\n      if (node && !isClosed) {\n        const nodeRect = node.getBoundingClientRect();\n        const nodeHeight = Math.round(nodeRect.height);\n        setMaxHeight(`${nodeHeight}px`);\n      }\n    },\n    onTransitionEnd: () => {\n      if (transform !== "none") {\n        setTransition("all 0.25s ease-in-out");\n        setTimeout(() => {\n          setMargin(0);\n          setMaxHeight(0);\n        }, 0);\n      }\n    }\n  }, /*#__PURE__*/react_default.a.createElement(HeaderContainer, null, /*#__PURE__*/react_default.a.createElement(notification_Header, null, description || !icon ? /*#__PURE__*/react_default.a.createElement(IconContainer, null, /*#__PURE__*/react_default.a.createElement(unidownloader, null)) : /*#__PURE__*/react_default.a.createElement(Icon, null), message && /*#__PURE__*/react_default.a.createElement(Message, {\n    dir: dir,\n    color: messageColor\n  }, message)), /*#__PURE__*/react_default.a.createElement(ButtonClose, {\n    onClick: evt => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      setIsClosed(true);\n    },\n    border: closeButtonBorder\n  })), description && /*#__PURE__*/react_default.a.createElement(notification_Content, {\n    borderTop: borderTop\n  }, /*#__PURE__*/react_default.a.createElement(Icon, null), /*#__PURE__*/react_default.a.createElement(Description, {\n    dir: dir,\n    color: descriptionColor,\n    dangerouslySetInnerHTML: {\n      __html: description\n    }\n  })), bottomContent));\n};\n\n/* harmony default export */ var notifications_notification = (Notification);\n// CONCATENATED MODULE: ./src/widget/components/ui/notifications/index.jsx\nfunction notifications_extends() { notifications_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return notifications_extends.apply(this, arguments); }\n\n\n\n\n\n/* harmony default export */ var ui_notifications = (() => {\n  const {\n    notifications\n  } = useAppState(["notifications"]);\n  const notificationsHolder = document.getElementById("unidownloader-notifications");\n  const dom = notifications.map((notification, index) => /*#__PURE__*/react_default.a.createElement(notifications_notification, notifications_extends({}, notification, {\n    key: notification.id,\n    index: index,\n    theOnly: notifications.length === 1\n  })));\n  return Object(react_dom["createPortal"])(dom, notificationsHolder);\n});\n// CONCATENATED MODULE: ./src/widget/widget.jsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet isActiveDownloadNotificationShow = false;\nlet isCompetitorsDetectionNotificationShow = true; // TODO: false;\n\nconst widget_Container = styled_components_browser_esm["a" /* default */].div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 0 -4px;\n  & button { margin: 0 4px; }\n`;\nconst ButtonUnderline = styled_components_browser_esm["a" /* default */].button`\n  outline: none;\n  border: none;\n  padding: 6px 8px;\n  margin: 0 auto 24px;\n  display: block;\n  cursor: pointer;\n  font-size: 16px;\n  text-decoration: underline;\n  background-color: transparent;\n  color: ${props => props.color};\n  &:hover {\n    color: ${props => props.hover};\n  }\n`;\n\nconst BottomContent = ({\n  close\n}) => {\n  const {\n    theme\n  } = useAppState(["theme"]);\n  const notificationStyles = theme && theme.notification;\n  const buttonUnderline = notificationStyles && notificationStyles.button_underline;\n  const color = buttonUnderline && buttonUnderline.color;\n  const hover = buttonUnderline && buttonUnderline.hover;\n  return /*#__PURE__*/react_default.a.createElement(widget_Container, null, /*#__PURE__*/react_default.a.createElement(ButtonUnderline, {\n    color: color,\n    hover: hover,\n    onClick: close\n  }, "\\u042F \\u043F\\u043E\\u043D\\u0438\\u043C\\u0430\\u044E \\u0440\\u0438\\u0441\\u043A"), /*#__PURE__*/react_default.a.createElement(ui_button // onClick={() => {}}\n  , {\n    icon: icons_info,\n    text: "\\u041A\\u0430\\u043A \\u0438\\u0441\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u044D\\u0442\\u0443 \\u043F\\u0440\\u043E\\u0431\\u043B\\u0435\\u043C\\u0443?"\n  }));\n};\n\nconst widget_Widget = () => {\n  const {\n    status,\n    snap,\n    warnAboutCompetitorsDetection,\n    addNotification\n  } = useAppState(["status", "snap", "warnAboutCompetitorsDetection", "addNotification"]);\n  const didMountRef = Object(react["useRef"])(null);\n  Object(react["useEffect"])(() => {\n    didMountRef.current = true;\n    return () => {\n      didMountRef.current = false;\n    };\n  }, []);\n  const {\n    t\n  } = useTranslation();\n  Object(react["useEffect"])(() => {\n    const showActiveDownloadNotification = () => {\n      if (didMountRef.current && !isActiveDownloadNotificationShow) {\n        addNotification({\n          icon: icons_warning,\n          message: t("active_download_warning_notification_message"),\n          description: t("active_download_warning_notification_description"),\n          onClose: () => {\n            if (didMountRef.current) {\n              isActiveDownloadNotificationShow = false;\n            }\n          }\n        });\n      }\n    };\n\n    if (status === "downloading") {\n      window.onbeforeunload = () => {\n        showActiveDownloadNotification();\n        return "Do you really want to close?";\n      };\n\n      window.addEventListener("popstate", showActiveDownloadNotification, false);\n    }\n\n    return () => {\n      window.onbeforeunload = null;\n      window.removeEventListener("popstate", showActiveDownloadNotification, false);\n    };\n  }, [status, t, addNotification]);\n  Object(react["useEffect"])(() => {\n    const showCompetitorsDetectionNotification = () => {\n      if (didMountRef.current && warnAboutCompetitorsDetection && !isCompetitorsDetectionNotificationShow) {\n        isCompetitorsDetectionNotificationShow = true;\n\n        let close = func => {\n          close = func;\n        };\n\n        addNotification({\n          icon: lightning,\n          message: "Внимание!",\n          description: `Обнаружено расширение <b>${competitors_detection()}</b> для загрузки мультимедиа файлов.\n          Одновременная работа нескольких браузерных расширений может привести к <b>сбоям</b> в работе вашего браузера.`,\n          bottomContent: /*#__PURE__*/react_default.a.createElement(BottomContent, {\n            close: () => close()\n          }),\n          duration: -1,\n          close\n        });\n      }\n    };\n\n    const observer = new MutationObserver(() => {\n      if (competitors_detection()) {\n        showCompetitorsDetectionNotification();\n        observer.disconnect();\n      }\n    });\n\n    if (warnAboutCompetitorsDetection) {\n      if (competitors_detection()) {\n        showCompetitorsDetectionNotification();\n      } else {\n        observer.observe(document, {\n          attributes: false,\n          childList: true,\n          characterData: false,\n          subtree: true\n        });\n      }\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [warnAboutCompetitorsDetection, addNotification, t]);\n  const components = {\n    downloading: /*#__PURE__*/react_default.a.createElement(progress_bar, null),\n    liveStream: /*#__PURE__*/react_default.a.createElement(live_stream, null),\n    gettingInfo: /*#__PURE__*/react_default.a.createElement(spinner, null),\n    idle: /*#__PURE__*/react_default.a.createElement(app, null),\n    unavailable: /*#__PURE__*/react_default.a.createElement(app, null)\n  };\n\n  if (status in components) {\n    return /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, components[status], snap && /*#__PURE__*/react_default.a.createElement(snapshot_button, null), /*#__PURE__*/react_default.a.createElement(ui_notifications, null));\n  }\n\n  return null;\n};\n\n/* harmony default export */ var widget_widget = (widget_Widget);\n// CONCATENATED MODULE: ./src/widget/embed/body.jsx\n\n\n\n\n\n\n\n\nconst body_Container = styled_components_browser_esm["a" /* default */].div`\n  background-color: rgba(0,0,0,0.85);\n  border-radius: 3px;\n  padding: 6px 0;\n  user-select: none;\n`;\nconst body_Table = styled_components_browser_esm["a" /* default */].table`\n  border-collapse: separate;\n  border-spacing: 0;\n`;\nconst body_Row = styled_components_browser_esm["a" /* default */].tr`\n  cursor: pointer;\n  &:hover td { background-color: rgba(255,255,255,0.25); }\n`;\nconst body_Cell = styled_components_browser_esm["a" /* default */].td`\n  color: white;\n  height: 20px;\n  &:nth-child(1),\n  &:nth-child(3) {\n    padding: 0 6px;\n  }\n  &:nth-child(2) { padding: 0; }\n  & svg {\n    display: block;\n    max-width: 12px;\n    margin: auto;\n    fill: white;\n  }\n`;\n\nconst body_mapState = state => ({\n  streamInfo: state.streamInfo,\n  audioInfo: state.audioInfo,\n  sendEvent: state.sendEvent,\n  download: state.module.download\n});\n\nconst Body = () => {\n  const {\n    streamInfo,\n    audioInfo,\n    sendEvent,\n    download\n  } = useSelector_useSelector(body_mapState);\n  const {\n    i18n,\n    t\n  } = useTranslation();\n  const list = formatsListEmbed(streamInfo, audioInfo);\n  return /*#__PURE__*/react_default.a.createElement(body_Container, null, /*#__PURE__*/react_default.a.createElement(body_Table, null, /*#__PURE__*/react_default.a.createElement("tbody", null, list.map(item => {\n    const mediaType = getMediaType(item);\n    return /*#__PURE__*/react_default.a.createElement(body_Row, {\n      key: `${item.width}:${item.fps}:${Object.keys(item).join("")}`,\n      onClick: evt => {\n        evt.preventDefault();\n        download(item);\n      }\n    }, /*#__PURE__*/react_default.a.createElement(body_Cell, null, getIconMediaType(item)), /*#__PURE__*/react_default.a.createElement(body_Cell, mediaType === "audio" && {\n      colSpan: 2\n    }, getTitleEmbed(item)), mediaType === "video" && /*#__PURE__*/react_default.a.createElement(body_Cell, null, `(${item.width}x${item.height})`));\n  }), /*#__PURE__*/react_default.a.createElement(body_Row, {\n    onClick: evt => {\n      evt.preventDefault();\n      const landingUrl = utils_ctx["a" /* default */].getServiceUrl(utils_ctx["a" /* default */].window.location.href, i18n.language);\n      window.open(landingUrl, "_blank");\n      sendEvent({\n        action: "landing",\n        format: ""\n      });\n    }\n  }, /*#__PURE__*/react_default.a.createElement(body_Cell, null, /*#__PURE__*/react_default.a.createElement(plus, null)), /*#__PURE__*/react_default.a.createElement(body_Cell, {\n    colSpan: 2\n  }, t("more_formats"))))));\n};\n\n/* harmony default export */ var body = (Body);\n// CONCATENATED MODULE: ./src/widget/embed/app.jsx\n\n\n\n\n\n\n\n\n\n\nconst embed_app_Button = styled_components_browser_esm["a" /* default */].button`\n  background-color: transparent;\n  outline: none;\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n  & svg {\n    margin: 0 4px;\n    fill: white;\n  }\n`;\nconst embed_app_Text = styled_components_browser_esm["a" /* default */].span`\n  user-select: none;\n  white-space: nowrap;\n  font-weight: 600;\n  color: white;\n  ${props => props.checkmark ? `\n    &::before {\n      display: inline-block;\n      content: " ";\n      width: 4px;\n    }\n    &::after {\n      display: inline-block;\n      content: " ";\n      width: 9px;\n      height: 9px;\n      margin: 0 4px;\n      transform: rotate(45deg) scale(0.7);\n      border-right: 3px solid white;\n      border-bottom: 3px solid white;\n    }\n  ` : `\n    margin: 0 4px;\n  `}\n`;\n\nconst app_mapState = state => ({\n  status: state.status,\n  sendEvent: state.sendEvent,\n  title: state.defaultItem ? getExtTitle(state.defaultItem) : "",\n  download: state.download\n});\n\nconst app_App = () => {\n  const {\n    status,\n    sendEvent,\n    title,\n    download\n  } = useSelector_useSelector(app_mapState);\n  const {\n    i18n,\n    t\n  } = useTranslation();\n  return /*#__PURE__*/react_default.a.createElement(error_boundary, {\n    embed: true\n  }, status === "unavailable" ? /*#__PURE__*/react_default.a.createElement(embed_app_Button, {\n    onClick: evt => {\n      evt.preventDefault();\n      const landingUrl = utils_ctx["a" /* default */].getServiceUrl(utils_ctx["a" /* default */].window.location.href, i18n.language);\n      window.open(landingUrl, "_blank");\n      sendEvent({\n        action: "landing",\n        format: ""\n      });\n    }\n  }, /*#__PURE__*/react_default.a.createElement(icons_download, null), /*#__PURE__*/react_default.a.createElement(embed_app_Text, null, t("udl_portal"))) : /*#__PURE__*/react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/react_default.a.createElement(embed_app_Button, {\n    onClick: evt => {\n      evt.preventDefault();\n      download();\n    }\n  }, /*#__PURE__*/react_default.a.createElement(icons_download, null)), /*#__PURE__*/react_default.a.createElement(ui_dropdown, {\n    overlay: /*#__PURE__*/react_default.a.createElement(body, null),\n    trigger: "click"\n  }, /*#__PURE__*/react_default.a.createElement(embed_app_Button, null, /*#__PURE__*/react_default.a.createElement(embed_app_Text, {\n    checkmark: true\n  }, title)))));\n};\n\n/* harmony default export */ var embed_app = (app_App);\n// CONCATENATED MODULE: ./src/widget/embed/index.jsx\n\n\n\n\n\n\nconst embed_mapState = state => ({\n  status: state.status\n});\n\nconst WidgetEmbed = () => {\n  const {\n    status\n  } = useSelector_useSelector(embed_mapState);\n  if (status === "downloading") return /*#__PURE__*/react_default.a.createElement(progress_bar, {\n    color: "white"\n  });\n  if (status === "gettingInfo") return /*#__PURE__*/react_default.a.createElement(spinner, {\n    color: "white"\n  });\n  if (status === "idle" || status === "unavailable") return /*#__PURE__*/react_default.a.createElement(embed_app, null);\n  return null;\n};\n\n/* harmony default export */ var widget_embed = (WidgetEmbed);\n// CONCATENATED MODULE: ./src/utils/get-content-limit.js\nconst getDefaultMemorySize = function () {\n  return 2 * 1024 * 1024 * 1024;\n};\n\nconst getFreeMemorySize = function () {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.jsHeapSizeLimit - window.performance.memory.usedJSHeapSize;\n  }\n  return null;\n};\n\nconst getPlatform = (() => {\n  let platform = "";\n  const desc = window.navigator.platform.toLowerCase();\n  // Mac68K MacPPC MacIntel\n  if (/^mac.*/.test(desc)) platform = "macOS";\n  // Win16 Win32 WinCE\n  if (/^win.*/.test(desc)) platform = "windows";\n  if (/^linux.*/.test(desc)) platform = "linux";\n  return platform;\n});\n\n/* harmony default export */ var get_content_limit = (async () => {\n  const platform = getPlatform();\n  const freeMemorySize = getFreeMemorySize();\n  const freeMemory = (freeMemorySize && freeMemorySize > 0) ? freeMemorySize : getDefaultMemorySize(platform);\n  let limit = 0;\n  switch (platform) {\n  case "macOS":\n  case "linux":\n    limit = 0.75 * freeMemory;\n    break;\n  case "windows":\n    limit = 0.1 * freeMemory;\n    break;\n  default:\n    limit = 0.5 * freeMemory;\n  }\n  const storage = navigator.storage ? await navigator.storage.estimate() : null;\n  return storage ? Math.min(limit, storage.quota - storage.usage) : limit;\n});\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction defineProperty_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread.js\n\nfunction objectSpread_objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \'function\') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty_defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js\nvar helpers_typeof = __webpack_require__(39);\nvar typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof_default()(call) === "object" || typeof call === "function")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nvar setPrototypeOf = __webpack_require__(12);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object(setPrototypeOf["a" /* default */])(subClass, superClass);\n}\n// CONCATENATED MODULE: ./node_modules/i18next/dist/esm/i18next.js\n\n\n\n\n\n\n\n\n\nvar consoleLogger = {\n  type: \'logger\',\n  log: function log(args) {\n    this.output(\'log\', args);\n  },\n  warn: function warn(args) {\n    this.output(\'warn\', args);\n  },\n  error: function error(args) {\n    this.output(\'error\', args);\n  },\n  output: function output(type, args) {\n    if (console && console[type]) console[type].apply(console, args);\n  }\n};\n\nvar i18next_Logger = function () {\n  function Logger(concreteLogger) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Logger);\n\n    this.init(concreteLogger, options);\n  }\n\n  _createClass(Logger, [{\n    key: "init",\n    value: function init(concreteLogger) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.prefix = options.prefix || \'i18next:\';\n      this.logger = concreteLogger || consoleLogger;\n      this.options = options;\n      this.debug = options.debug;\n    }\n  }, {\n    key: "setDebug",\n    value: function setDebug(bool) {\n      this.debug = bool;\n    }\n  }, {\n    key: "log",\n    value: function log() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return this.forward(args, \'log\', \'\', true);\n    }\n  }, {\n    key: "warn",\n    value: function warn() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return this.forward(args, \'warn\', \'\', true);\n    }\n  }, {\n    key: "error",\n    value: function error() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return this.forward(args, \'error\', \'\');\n    }\n  }, {\n    key: "deprecate",\n    value: function deprecate() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return this.forward(args, \'warn\', \'WARNING DEPRECATED: \', true);\n    }\n  }, {\n    key: "forward",\n    value: function forward(args, lvl, prefix, debugOnly) {\n      if (debugOnly && !this.debug) return null;\n      if (typeof args[0] === \'string\') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);\n      return this.logger[lvl](args);\n    }\n  }, {\n    key: "create",\n    value: function create(moduleName) {\n      return new Logger(this.logger, objectSpread_objectSpread({}, {\n        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")\n      }, this.options));\n    }\n  }]);\n\n  return Logger;\n}();\n\nvar baseLogger = new i18next_Logger();\n\nvar i18next_EventEmitter = function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    this.observers = {};\n  }\n\n  _createClass(EventEmitter, [{\n    key: "on",\n    value: function on(events, listener) {\n      var _this = this;\n\n      events.split(\' \').forEach(function (event) {\n        _this.observers[event] = _this.observers[event] || [];\n\n        _this.observers[event].push(listener);\n      });\n      return this;\n    }\n  }, {\n    key: "off",\n    value: function off(event, listener) {\n      if (!this.observers[event]) return;\n\n      if (!listener) {\n        delete this.observers[event];\n        return;\n      }\n\n      this.observers[event] = this.observers[event].filter(function (l) {\n        return l !== listener;\n      });\n    }\n  }, {\n    key: "emit",\n    value: function emit(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (this.observers[event]) {\n        var cloned = [].concat(this.observers[event]);\n        cloned.forEach(function (observer) {\n          observer.apply(void 0, args);\n        });\n      }\n\n      if (this.observers[\'*\']) {\n        var _cloned = [].concat(this.observers[\'*\']);\n\n        _cloned.forEach(function (observer) {\n          observer.apply(observer, [event].concat(args));\n        });\n      }\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nfunction defer() {\n  var res;\n  var rej;\n  var promise = new Promise(function (resolve, reject) {\n    res = resolve;\n    rej = reject;\n  });\n  promise.resolve = res;\n  promise.reject = rej;\n  return promise;\n}\nfunction makeString(object) {\n  if (object == null) return \'\';\n  return \'\' + object;\n}\nfunction i18next_copy(a, s, t) {\n  a.forEach(function (m) {\n    if (s[m]) t[m] = s[m];\n  });\n}\n\nfunction getLastOfPath(object, path, Empty) {\n  function cleanKey(key) {\n    return key && key.indexOf(\'###\') > -1 ? key.replace(/###/g, \'.\') : key;\n  }\n\n  function canNotTraverseDeeper() {\n    return !object || typeof object === \'string\';\n  }\n\n  var stack = typeof path !== \'string\' ? [].concat(path) : path.split(\'.\');\n\n  while (stack.length > 1) {\n    if (canNotTraverseDeeper()) return {};\n    var key = cleanKey(stack.shift());\n    if (!object[key] && Empty) object[key] = new Empty();\n\n    if (Object.prototype.hasOwnProperty.call(object, key)) {\n      object = object[key];\n    } else {\n      object = {};\n    }\n  }\n\n  if (canNotTraverseDeeper()) return {};\n  return {\n    obj: object,\n    k: cleanKey(stack.shift())\n  };\n}\n\nfunction setPath(object, path, newValue) {\n  var _getLastOfPath = getLastOfPath(object, path, Object),\n      obj = _getLastOfPath.obj,\n      k = _getLastOfPath.k;\n\n  obj[k] = newValue;\n}\nfunction pushPath(object, path, newValue, concat) {\n  var _getLastOfPath2 = getLastOfPath(object, path, Object),\n      obj = _getLastOfPath2.obj,\n      k = _getLastOfPath2.k;\n\n  obj[k] = obj[k] || [];\n  if (concat) obj[k] = obj[k].concat(newValue);\n  if (!concat) obj[k].push(newValue);\n}\nfunction getPath(object, path) {\n  var _getLastOfPath3 = getLastOfPath(object, path),\n      obj = _getLastOfPath3.obj,\n      k = _getLastOfPath3.k;\n\n  if (!obj) return undefined;\n  return obj[k];\n}\nfunction getPathWithDefaults(data, defaultData, key) {\n  var value = getPath(data, key);\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  return getPath(defaultData, key);\n}\nfunction deepExtend(target, source, overwrite) {\n  for (var prop in source) {\n    if (prop !== \'__proto__\' && prop !== \'constructor\') {\n      if (prop in target) {\n        if (typeof target[prop] === \'string\' || target[prop] instanceof String || typeof source[prop] === \'string\' || source[prop] instanceof String) {\n          if (overwrite) target[prop] = source[prop];\n        } else {\n          deepExtend(target[prop], source[prop], overwrite);\n        }\n      } else {\n        target[prop] = source[prop];\n      }\n    }\n  }\n\n  return target;\n}\nfunction regexEscape(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \'\\\\$&\');\n}\nvar _entityMap = {\n  \'&\': \'&amp;\',\n  \'<\': \'&lt;\',\n  \'>\': \'&gt;\',\n  \'"\': \'&quot;\',\n  "\'": \'&#39;\',\n  \'/\': \'&#x2F;\'\n};\nfunction i18next_escape(data) {\n  if (typeof data === \'string\') {\n    return data.replace(/[&<>"\'\\/]/g, function (s) {\n      return _entityMap[s];\n    });\n  }\n\n  return data;\n}\nvar isIE10 = typeof window !== \'undefined\' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf(\'MSIE\') > -1;\n\nvar i18next_ResourceStore = function (_EventEmitter) {\n  _inherits(ResourceStore, _EventEmitter);\n\n  function ResourceStore(data) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      ns: [\'translation\'],\n      defaultNS: \'translation\'\n    };\n\n    _classCallCheck(this, ResourceStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceStore).call(this));\n\n    if (isIE10) {\n      i18next_EventEmitter.call(_assertThisInitialized(_this));\n    }\n\n    _this.data = data || {};\n    _this.options = options;\n\n    if (_this.options.keySeparator === undefined) {\n      _this.options.keySeparator = \'.\';\n    }\n\n    return _this;\n  }\n\n  _createClass(ResourceStore, [{\n    key: "addNamespaces",\n    value: function addNamespaces(ns) {\n      if (this.options.ns.indexOf(ns) < 0) {\n        this.options.ns.push(ns);\n      }\n    }\n  }, {\n    key: "removeNamespaces",\n    value: function removeNamespaces(ns) {\n      var index = this.options.ns.indexOf(ns);\n\n      if (index > -1) {\n        this.options.ns.splice(index, 1);\n      }\n    }\n  }, {\n    key: "getResource",\n    value: function getResource(lng, ns, key) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n      var path = [lng, ns];\n      if (key && typeof key !== \'string\') path = path.concat(key);\n      if (key && typeof key === \'string\') path = path.concat(keySeparator ? key.split(keySeparator) : key);\n\n      if (lng.indexOf(\'.\') > -1) {\n        path = lng.split(\'.\');\n      }\n\n      return getPath(this.data, path);\n    }\n  }, {\n    key: "addResource",\n    value: function addResource(lng, ns, key, value) {\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n        silent: false\n      };\n      var keySeparator = this.options.keySeparator;\n      if (keySeparator === undefined) keySeparator = \'.\';\n      var path = [lng, ns];\n      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);\n\n      if (lng.indexOf(\'.\') > -1) {\n        path = lng.split(\'.\');\n        value = ns;\n        ns = path[1];\n      }\n\n      this.addNamespaces(ns);\n      setPath(this.data, path, value);\n      if (!options.silent) this.emit(\'added\', lng, ns, key, value);\n    }\n  }, {\n    key: "addResources",\n    value: function addResources(lng, ns, resources) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        silent: false\n      };\n\n      for (var m in resources) {\n        if (typeof resources[m] === \'string\' || Object.prototype.toString.apply(resources[m]) === \'[object Array]\') this.addResource(lng, ns, m, resources[m], {\n          silent: true\n        });\n      }\n\n      if (!options.silent) this.emit(\'added\', lng, ns, resources);\n    }\n  }, {\n    key: "addResourceBundle",\n    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n        silent: false\n      };\n      var path = [lng, ns];\n\n      if (lng.indexOf(\'.\') > -1) {\n        path = lng.split(\'.\');\n        deep = resources;\n        resources = ns;\n        ns = path[1];\n      }\n\n      this.addNamespaces(ns);\n      var pack = getPath(this.data, path) || {};\n\n      if (deep) {\n        deepExtend(pack, resources, overwrite);\n      } else {\n        pack = objectSpread_objectSpread({}, pack, resources);\n      }\n\n      setPath(this.data, path, pack);\n      if (!options.silent) this.emit(\'added\', lng, ns, resources);\n    }\n  }, {\n    key: "removeResourceBundle",\n    value: function removeResourceBundle(lng, ns) {\n      if (this.hasResourceBundle(lng, ns)) {\n        delete this.data[lng][ns];\n      }\n\n      this.removeNamespaces(ns);\n      this.emit(\'removed\', lng, ns);\n    }\n  }, {\n    key: "hasResourceBundle",\n    value: function hasResourceBundle(lng, ns) {\n      return this.getResource(lng, ns) !== undefined;\n    }\n  }, {\n    key: "getResourceBundle",\n    value: function getResourceBundle(lng, ns) {\n      if (!ns) ns = this.options.defaultNS;\n      if (this.options.compatibilityAPI === \'v1\') return objectSpread_objectSpread({}, {}, this.getResource(lng, ns));\n      return this.getResource(lng, ns);\n    }\n  }, {\n    key: "getDataByLanguage",\n    value: function getDataByLanguage(lng) {\n      return this.data[lng];\n    }\n  }, {\n    key: "toJSON",\n    value: function toJSON() {\n      return this.data;\n    }\n  }]);\n\n  return ResourceStore;\n}(i18next_EventEmitter);\n\nvar postProcessor = {\n  processors: {},\n  addPostProcessor: function addPostProcessor(module) {\n    this.processors[module.name] = module;\n  },\n  handle: function handle(processors, value, key, options, translator) {\n    var _this = this;\n\n    processors.forEach(function (processor) {\n      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);\n    });\n    return value;\n  }\n};\n\nvar checkedLoadedFor = {};\n\nvar i18next_Translator = function (_EventEmitter) {\n  _inherits(Translator, _EventEmitter);\n\n  function Translator(services) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Translator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Translator).call(this));\n\n    if (isIE10) {\n      i18next_EventEmitter.call(_assertThisInitialized(_this));\n    }\n\n    i18next_copy([\'resourceStore\', \'languageUtils\', \'pluralResolver\', \'interpolator\', \'backendConnector\', \'i18nFormat\', \'utils\'], services, _assertThisInitialized(_this));\n    _this.options = options;\n\n    if (_this.options.keySeparator === undefined) {\n      _this.options.keySeparator = \'.\';\n    }\n\n    _this.logger = baseLogger.create(\'translator\');\n    return _this;\n  }\n\n  _createClass(Translator, [{\n    key: "changeLanguage",\n    value: function changeLanguage(lng) {\n      if (lng) this.language = lng;\n    }\n  }, {\n    key: "exists",\n    value: function exists(key) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        interpolation: {}\n      };\n      var resolved = this.resolve(key, options);\n      return resolved && resolved.res !== undefined;\n    }\n  }, {\n    key: "extractFromKey",\n    value: function extractFromKey(key, options) {\n      var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;\n      if (nsSeparator === undefined) nsSeparator = \':\';\n      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n      var namespaces = options.ns || this.options.defaultNS;\n\n      if (nsSeparator && key.indexOf(nsSeparator) > -1) {\n        var m = key.match(this.interpolator.nestingRegexp);\n\n        if (m && m.length > 0) {\n          return {\n            key: key,\n            namespaces: namespaces\n          };\n        }\n\n        var parts = key.split(nsSeparator);\n        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();\n        key = parts.join(keySeparator);\n      }\n\n      if (typeof namespaces === \'string\') namespaces = [namespaces];\n      return {\n        key: key,\n        namespaces: namespaces\n      };\n    }\n  }, {\n    key: "translate",\n    value: function translate(keys, options, lastKey) {\n      var _this2 = this;\n\n      if (_typeof(options) !== \'object\' && this.options.overloadTranslationOptionHandler) {\n        options = this.options.overloadTranslationOptionHandler(arguments);\n      }\n\n      if (!options) options = {};\n      if (keys === undefined || keys === null) return \'\';\n      if (!Array.isArray(keys)) keys = [String(keys)];\n      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;\n\n      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),\n          key = _this$extractFromKey.key,\n          namespaces = _this$extractFromKey.namespaces;\n\n      var namespace = namespaces[namespaces.length - 1];\n      var lng = options.lng || this.language;\n      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;\n\n      if (lng && lng.toLowerCase() === \'cimode\') {\n        if (appendNamespaceToCIMode) {\n          var nsSeparator = options.nsSeparator || this.options.nsSeparator;\n          return namespace + nsSeparator + key;\n        }\n\n        return key;\n      }\n\n      var resolved = this.resolve(keys, options);\n      var res = resolved && resolved.res;\n      var resUsedKey = resolved && resolved.usedKey || key;\n      var resExactUsedKey = resolved && resolved.exactUsedKey || key;\n      var resType = Object.prototype.toString.apply(res);\n      var noObject = [\'[object Number]\', \'[object Function]\', \'[object RegExp]\'];\n      var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;\n      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;\n      var handleAsObject = typeof res !== \'string\' && typeof res !== \'boolean\' && typeof res !== \'number\';\n\n      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === \'string\' && resType === \'[object Array]\')) {\n        if (!options.returnObjects && !this.options.returnObjects) {\n          this.logger.warn(\'accessing an object - but returnObjects options is not enabled!\');\n          return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key \'".concat(key, " (").concat(this.language, ")\' returned an object instead of string.");\n        }\n\n        if (keySeparator) {\n          var resTypeIsArray = resType === \'[object Array]\';\n          var copy = resTypeIsArray ? [] : {};\n          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;\n\n          for (var m in res) {\n            if (Object.prototype.hasOwnProperty.call(res, m)) {\n              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);\n              copy[m] = this.translate(deepKey, objectSpread_objectSpread({}, options, {\n                joinArrays: false,\n                ns: namespaces\n              }));\n              if (copy[m] === deepKey) copy[m] = res[m];\n            }\n          }\n\n          res = copy;\n        }\n      } else if (handleAsObjectInI18nFormat && typeof joinArrays === \'string\' && resType === \'[object Array]\') {\n        res = res.join(joinArrays);\n        if (res) res = this.extendTranslation(res, keys, options, lastKey);\n      } else {\n        var usedDefault = false;\n        var usedKey = false;\n        var needsPluralHandling = options.count !== undefined && typeof options.count !== \'string\';\n        var hasDefaultValue = Translator.hasDefaultValue(options);\n        var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count) : \'\';\n        var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;\n\n        if (!this.isValidLookup(res) && hasDefaultValue) {\n          usedDefault = true;\n          res = defaultValue;\n        }\n\n        if (!this.isValidLookup(res)) {\n          usedKey = true;\n          res = key;\n        }\n\n        var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;\n\n        if (usedKey || usedDefault || updateMissing) {\n          this.logger.log(updateMissing ? \'updateKey\' : \'missingKey\', lng, namespace, key, updateMissing ? defaultValue : res);\n\n          if (keySeparator) {\n            var fk = this.resolve(key, objectSpread_objectSpread({}, options, {\n              keySeparator: false\n            }));\n            if (fk && fk.res) this.logger.warn(\'Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.\');\n          }\n\n          var lngs = [];\n          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);\n\n          if (this.options.saveMissingTo === \'fallback\' && fallbackLngs && fallbackLngs[0]) {\n            for (var i = 0; i < fallbackLngs.length; i++) {\n              lngs.push(fallbackLngs[i]);\n            }\n          } else if (this.options.saveMissingTo === \'all\') {\n            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);\n          } else {\n            lngs.push(options.lng || this.language);\n          }\n\n          var send = function send(l, k, fallbackValue) {\n            if (_this2.options.missingKeyHandler) {\n              _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);\n            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {\n              _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? fallbackValue : res, updateMissing, options);\n            }\n\n            _this2.emit(\'missingKey\', l, namespace, k, res);\n          };\n\n          if (this.options.saveMissing) {\n            if (this.options.saveMissingPlurals && needsPluralHandling) {\n              lngs.forEach(function (language) {\n                _this2.pluralResolver.getSuffixes(language).forEach(function (suffix) {\n                  send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);\n                });\n              });\n            } else {\n              send(lngs, key, defaultValue);\n            }\n          }\n        }\n\n        res = this.extendTranslation(res, keys, options, resolved, lastKey);\n        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);\n        if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);\n      }\n\n      return res;\n    }\n  }, {\n    key: "extendTranslation",\n    value: function extendTranslation(res, key, options, resolved, lastKey) {\n      var _this3 = this;\n\n      if (this.i18nFormat && this.i18nFormat.parse) {\n        res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {\n          resolved: resolved\n        });\n      } else if (!options.skipInterpolation) {\n        if (options.interpolation) this.interpolator.init(objectSpread_objectSpread({}, options, {\n          interpolation: objectSpread_objectSpread({}, this.options.interpolation, options.interpolation)\n        }));\n        var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;\n        var nestBef;\n\n        if (skipOnVariables) {\n          var nb = res.match(this.interpolator.nestingRegexp);\n          nestBef = nb && nb.length;\n        }\n\n        var data = options.replace && typeof options.replace !== \'string\' ? options.replace : options;\n        if (this.options.interpolation.defaultVariables) data = objectSpread_objectSpread({}, this.options.interpolation.defaultVariables, data);\n        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);\n\n        if (skipOnVariables) {\n          var na = res.match(this.interpolator.nestingRegexp);\n          var nestAft = na && na.length;\n          if (nestBef < nestAft) options.nest = false;\n        }\n\n        if (options.nest !== false) res = this.interpolator.nest(res, function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          if (lastKey && lastKey[0] === args[0] && !options.context) {\n            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));\n\n            return null;\n          }\n\n          return _this3.translate.apply(_this3, args.concat([key]));\n        }, options);\n        if (options.interpolation) this.interpolator.reset();\n      }\n\n      var postProcess = options.postProcess || this.options.postProcess;\n      var postProcessorNames = typeof postProcess === \'string\' ? [postProcess] : postProcess;\n\n      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {\n        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? objectSpread_objectSpread({\n          i18nResolved: resolved\n        }, options) : options, this);\n      }\n\n      return res;\n    }\n  }, {\n    key: "resolve",\n    value: function resolve(keys) {\n      var _this4 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var found;\n      var usedKey;\n      var exactUsedKey;\n      var usedLng;\n      var usedNS;\n      if (typeof keys === \'string\') keys = [keys];\n      keys.forEach(function (k) {\n        if (_this4.isValidLookup(found)) return;\n\n        var extracted = _this4.extractFromKey(k, options);\n\n        var key = extracted.key;\n        usedKey = key;\n        var namespaces = extracted.namespaces;\n        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);\n        var needsPluralHandling = options.count !== undefined && typeof options.count !== \'string\';\n        var needsContextHandling = options.context !== undefined && typeof options.context === \'string\' && options.context !== \'\';\n        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);\n        namespaces.forEach(function (ns) {\n          if (_this4.isValidLookup(found)) return;\n          usedNS = ns;\n\n          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {\n            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;\n\n            _this4.logger.warn("key \\"".concat(usedKey, "\\" for languages \\"").concat(codes.join(\', \'), "\\" won\'t get resolved as namespace \\"").concat(usedNS, "\\" was not yet loaded"), \'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\');\n          }\n\n          codes.forEach(function (code) {\n            if (_this4.isValidLookup(found)) return;\n            usedLng = code;\n            var finalKey = key;\n            var finalKeys = [finalKey];\n\n            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {\n              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);\n            } else {\n              var pluralSuffix;\n              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);\n              if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);\n              if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));\n              if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);\n            }\n\n            var possibleKey;\n\n            while (possibleKey = finalKeys.pop()) {\n              if (!_this4.isValidLookup(found)) {\n                exactUsedKey = possibleKey;\n                found = _this4.getResource(code, ns, possibleKey, options);\n              }\n            }\n          });\n        });\n      });\n      return {\n        res: found,\n        usedKey: usedKey,\n        exactUsedKey: exactUsedKey,\n        usedLng: usedLng,\n        usedNS: usedNS\n      };\n    }\n  }, {\n    key: "isValidLookup",\n    value: function isValidLookup(res) {\n      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === \'\');\n    }\n  }, {\n    key: "getResource",\n    value: function getResource(code, ns, key) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);\n      return this.resourceStore.getResource(code, ns, key, options);\n    }\n  }], [{\n    key: "hasDefaultValue",\n    value: function hasDefaultValue(options) {\n      var prefix = \'defaultValue\';\n\n      for (var option in options) {\n        if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Translator;\n}(i18next_EventEmitter);\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nvar i18next_LanguageUtil = function () {\n  function LanguageUtil(options) {\n    _classCallCheck(this, LanguageUtil);\n\n    this.options = options;\n    this.whitelist = this.options.supportedLngs || false;\n    this.supportedLngs = this.options.supportedLngs || false;\n    this.logger = baseLogger.create(\'languageUtils\');\n  }\n\n  _createClass(LanguageUtil, [{\n    key: "getScriptPartFromCode",\n    value: function getScriptPartFromCode(code) {\n      if (!code || code.indexOf(\'-\') < 0) return null;\n      var p = code.split(\'-\');\n      if (p.length === 2) return null;\n      p.pop();\n      if (p[p.length - 1].toLowerCase() === \'x\') return null;\n      return this.formatLanguageCode(p.join(\'-\'));\n    }\n  }, {\n    key: "getLanguagePartFromCode",\n    value: function getLanguagePartFromCode(code) {\n      if (!code || code.indexOf(\'-\') < 0) return code;\n      var p = code.split(\'-\');\n      return this.formatLanguageCode(p[0]);\n    }\n  }, {\n    key: "formatLanguageCode",\n    value: function formatLanguageCode(code) {\n      if (typeof code === \'string\' && code.indexOf(\'-\') > -1) {\n        var specialCases = [\'hans\', \'hant\', \'latn\', \'cyrl\', \'cans\', \'mong\', \'arab\'];\n        var p = code.split(\'-\');\n\n        if (this.options.lowerCaseLng) {\n          p = p.map(function (part) {\n            return part.toLowerCase();\n          });\n        } else if (p.length === 2) {\n          p[0] = p[0].toLowerCase();\n          p[1] = p[1].toUpperCase();\n          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n        } else if (p.length === 3) {\n          p[0] = p[0].toLowerCase();\n          if (p[1].length === 2) p[1] = p[1].toUpperCase();\n          if (p[0] !== \'sgn\' && p[2].length === 2) p[2] = p[2].toUpperCase();\n          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());\n          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());\n        }\n\n        return p.join(\'-\');\n      }\n\n      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;\n    }\n  }, {\n    key: "isWhitelisted",\n    value: function isWhitelisted(code) {\n      this.logger.deprecate(\'languageUtils.isWhitelisted\', \'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\\\'s usage asap.\');\n      return this.isSupportedCode(code);\n    }\n  }, {\n    key: "isSupportedCode",\n    value: function isSupportedCode(code) {\n      if (this.options.load === \'languageOnly\' || this.options.nonExplicitSupportedLngs) {\n        code = this.getLanguagePartFromCode(code);\n      }\n\n      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;\n    }\n  }, {\n    key: "getBestMatchFromCodes",\n    value: function getBestMatchFromCodes(codes) {\n      var _this = this;\n\n      if (!codes) return null;\n      var found;\n      codes.forEach(function (code) {\n        if (found) return;\n\n        var cleanedLng = _this.formatLanguageCode(code);\n\n        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;\n      });\n\n      if (!found && this.options.supportedLngs) {\n        codes.forEach(function (code) {\n          if (found) return;\n\n          var lngOnly = _this.getLanguagePartFromCode(code);\n\n          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;\n          found = _this.options.supportedLngs.find(function (supportedLng) {\n            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;\n          });\n        });\n      }\n\n      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];\n      return found;\n    }\n  }, {\n    key: "getFallbackCodes",\n    value: function getFallbackCodes(fallbacks, code) {\n      if (!fallbacks) return [];\n      if (typeof fallbacks === \'function\') fallbacks = fallbacks(code);\n      if (typeof fallbacks === \'string\') fallbacks = [fallbacks];\n      if (Object.prototype.toString.apply(fallbacks) === \'[object Array]\') return fallbacks;\n      if (!code) return fallbacks["default"] || [];\n      var found = fallbacks[code];\n      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];\n      if (!found) found = fallbacks[this.formatLanguageCode(code)];\n      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];\n      if (!found) found = fallbacks["default"];\n      return found || [];\n    }\n  }, {\n    key: "toResolveHierarchy",\n    value: function toResolveHierarchy(code, fallbackCode) {\n      var _this2 = this;\n\n      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);\n      var codes = [];\n\n      var addCode = function addCode(c) {\n        if (!c) return;\n\n        if (_this2.isSupportedCode(c)) {\n          codes.push(c);\n        } else {\n          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));\n        }\n      };\n\n      if (typeof code === \'string\' && code.indexOf(\'-\') > -1) {\n        if (this.options.load !== \'languageOnly\') addCode(this.formatLanguageCode(code));\n        if (this.options.load !== \'languageOnly\' && this.options.load !== \'currentOnly\') addCode(this.getScriptPartFromCode(code));\n        if (this.options.load !== \'currentOnly\') addCode(this.getLanguagePartFromCode(code));\n      } else if (typeof code === \'string\') {\n        addCode(this.formatLanguageCode(code));\n      }\n\n      fallbackCodes.forEach(function (fc) {\n        if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));\n      });\n      return codes;\n    }\n  }]);\n\n  return LanguageUtil;\n}();\n\nvar sets = [{\n  lngs: [\'ach\', \'ak\', \'am\', \'arn\', \'br\', \'fil\', \'gun\', \'ln\', \'mfe\', \'mg\', \'mi\', \'oc\', \'pt\', \'pt-BR\', \'tg\', \'tl\', \'ti\', \'tr\', \'uz\', \'wa\'],\n  nr: [1, 2],\n  fc: 1\n}, {\n  lngs: [\'af\', \'an\', \'ast\', \'az\', \'bg\', \'bn\', \'ca\', \'da\', \'de\', \'dev\', \'el\', \'en\', \'eo\', \'es\', \'et\', \'eu\', \'fi\', \'fo\', \'fur\', \'fy\', \'gl\', \'gu\', \'ha\', \'hi\', \'hu\', \'hy\', \'ia\', \'it\', \'kn\', \'ku\', \'lb\', \'mai\', \'ml\', \'mn\', \'mr\', \'nah\', \'nap\', \'nb\', \'ne\', \'nl\', \'nn\', \'no\', \'nso\', \'pa\', \'pap\', \'pms\', \'ps\', \'pt-PT\', \'rm\', \'sco\', \'se\', \'si\', \'so\', \'son\', \'sq\', \'sv\', \'sw\', \'ta\', \'te\', \'tk\', \'ur\', \'yo\'],\n  nr: [1, 2],\n  fc: 2\n}, {\n  lngs: [\'ay\', \'bo\', \'cgg\', \'fa\', \'ht\', \'id\', \'ja\', \'jbo\', \'ka\', \'kk\', \'km\', \'ko\', \'ky\', \'lo\', \'ms\', \'sah\', \'su\', \'th\', \'tt\', \'ug\', \'vi\', \'wo\', \'zh\'],\n  nr: [1],\n  fc: 3\n}, {\n  lngs: [\'be\', \'bs\', \'cnr\', \'dz\', \'hr\', \'ru\', \'sr\', \'uk\'],\n  nr: [1, 2, 5],\n  fc: 4\n}, {\n  lngs: [\'ar\'],\n  nr: [0, 1, 2, 3, 11, 100],\n  fc: 5\n}, {\n  lngs: [\'cs\', \'sk\'],\n  nr: [1, 2, 5],\n  fc: 6\n}, {\n  lngs: [\'csb\', \'pl\'],\n  nr: [1, 2, 5],\n  fc: 7\n}, {\n  lngs: [\'cy\'],\n  nr: [1, 2, 3, 8],\n  fc: 8\n}, {\n  lngs: [\'fr\'],\n  nr: [1, 2],\n  fc: 9\n}, {\n  lngs: [\'ga\'],\n  nr: [1, 2, 3, 7, 11],\n  fc: 10\n}, {\n  lngs: [\'gd\'],\n  nr: [1, 2, 3, 20],\n  fc: 11\n}, {\n  lngs: [\'is\'],\n  nr: [1, 2],\n  fc: 12\n}, {\n  lngs: [\'jv\'],\n  nr: [0, 1],\n  fc: 13\n}, {\n  lngs: [\'kw\'],\n  nr: [1, 2, 3, 4],\n  fc: 14\n}, {\n  lngs: [\'lt\'],\n  nr: [1, 2, 10],\n  fc: 15\n}, {\n  lngs: [\'lv\'],\n  nr: [1, 2, 0],\n  fc: 16\n}, {\n  lngs: [\'mk\'],\n  nr: [1, 2],\n  fc: 17\n}, {\n  lngs: [\'mnk\'],\n  nr: [0, 1, 2],\n  fc: 18\n}, {\n  lngs: [\'mt\'],\n  nr: [1, 2, 11, 20],\n  fc: 19\n}, {\n  lngs: [\'or\'],\n  nr: [2, 1],\n  fc: 2\n}, {\n  lngs: [\'ro\'],\n  nr: [1, 2, 20],\n  fc: 20\n}, {\n  lngs: [\'sl\'],\n  nr: [5, 1, 2, 3],\n  fc: 21\n}, {\n  lngs: [\'he\', \'iw\'],\n  nr: [1, 2, 20, 21],\n  fc: 22\n}];\nvar _rulesPluralsTypes = {\n  1: function _(n) {\n    return Number(n > 1);\n  },\n  2: function _(n) {\n    return Number(n != 1);\n  },\n  3: function _(n) {\n    return 0;\n  },\n  4: function _(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  5: function _(n) {\n    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);\n  },\n  6: function _(n) {\n    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);\n  },\n  7: function _(n) {\n    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  8: function _(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);\n  },\n  9: function _(n) {\n    return Number(n >= 2);\n  },\n  10: function _(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);\n  },\n  11: function _(n) {\n    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);\n  },\n  12: function _(n) {\n    return Number(n % 10 != 1 || n % 100 == 11);\n  },\n  13: function _(n) {\n    return Number(n !== 0);\n  },\n  14: function _(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);\n  },\n  15: function _(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n  },\n  16: function _(n) {\n    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);\n  },\n  17: function _(n) {\n    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);\n  },\n  18: function _(n) {\n    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);\n  },\n  19: function _(n) {\n    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);\n  },\n  20: function _(n) {\n    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);\n  },\n  21: function _(n) {\n    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);\n  },\n  22: function _(n) {\n    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);\n  }\n};\n\nfunction createRules() {\n  var rules = {};\n  sets.forEach(function (set) {\n    set.lngs.forEach(function (l) {\n      rules[l] = {\n        numbers: set.nr,\n        plurals: _rulesPluralsTypes[set.fc]\n      };\n    });\n  });\n  return rules;\n}\n\nvar i18next_PluralResolver = function () {\n  function PluralResolver(languageUtils) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, PluralResolver);\n\n    this.languageUtils = languageUtils;\n    this.options = options;\n    this.logger = baseLogger.create(\'pluralResolver\');\n    this.rules = createRules();\n  }\n\n  _createClass(PluralResolver, [{\n    key: "addRule",\n    value: function addRule(lng, obj) {\n      this.rules[lng] = obj;\n    }\n  }, {\n    key: "getRule",\n    value: function getRule(code) {\n      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];\n    }\n  }, {\n    key: "needsPlural",\n    value: function needsPlural(code) {\n      var rule = this.getRule(code);\n      return rule && rule.numbers.length > 1;\n    }\n  }, {\n    key: "getPluralFormsOfKey",\n    value: function getPluralFormsOfKey(code, key) {\n      return this.getSuffixes(code).map(function (suffix) {\n        return key + suffix;\n      });\n    }\n  }, {\n    key: "getSuffixes",\n    value: function getSuffixes(code) {\n      var _this = this;\n\n      var rule = this.getRule(code);\n\n      if (!rule) {\n        return [];\n      }\n\n      return rule.numbers.map(function (number) {\n        return _this.getSuffix(code, number);\n      });\n    }\n  }, {\n    key: "getSuffix",\n    value: function getSuffix(code, count) {\n      var _this2 = this;\n\n      var rule = this.getRule(code);\n\n      if (rule) {\n        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));\n        var suffix = rule.numbers[idx];\n\n        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n          if (suffix === 2) {\n            suffix = \'plural\';\n          } else if (suffix === 1) {\n            suffix = \'\';\n          }\n        }\n\n        var returnSuffix = function returnSuffix() {\n          return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();\n        };\n\n        if (this.options.compatibilityJSON === \'v1\') {\n          if (suffix === 1) return \'\';\n          if (typeof suffix === \'number\') return "_plural_".concat(suffix.toString());\n          return returnSuffix();\n        } else if (this.options.compatibilityJSON === \'v2\') {\n          return returnSuffix();\n        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {\n          return returnSuffix();\n        }\n\n        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();\n      }\n\n      this.logger.warn("no plural rule found for: ".concat(code));\n      return \'\';\n    }\n  }]);\n\n  return PluralResolver;\n}();\n\nvar i18next_Interpolator = function () {\n  function Interpolator() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Interpolator);\n\n    this.logger = baseLogger.create(\'interpolator\');\n    this.options = options;\n\n    this.format = options.interpolation && options.interpolation.format || function (value) {\n      return value;\n    };\n\n    this.init(options);\n  }\n\n  _createClass(Interpolator, [{\n    key: "init",\n    value: function init() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!options.interpolation) options.interpolation = {\n        escapeValue: true\n      };\n      var iOpts = options.interpolation;\n      this.escape = iOpts.escape !== undefined ? iOpts.escape : i18next_escape;\n      this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;\n      this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;\n      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || \'{{\';\n      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || \'}}\';\n      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || \',\';\n      this.unescapePrefix = iOpts.unescapeSuffix ? \'\' : iOpts.unescapePrefix || \'-\';\n      this.unescapeSuffix = this.unescapePrefix ? \'\' : iOpts.unescapeSuffix || \'\';\n      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape(\'$t(\');\n      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(\')\');\n      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || \',\';\n      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;\n      this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;\n      this.resetRegExp();\n    }\n  }, {\n    key: "reset",\n    value: function reset() {\n      if (this.options) this.init(this.options);\n    }\n  }, {\n    key: "resetRegExp",\n    value: function resetRegExp() {\n      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);\n      this.regexp = new RegExp(regexpStr, \'g\');\n      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);\n      this.regexpUnescape = new RegExp(regexpUnescapeStr, \'g\');\n      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);\n      this.nestingRegexp = new RegExp(nestingRegexpStr, \'g\');\n    }\n  }, {\n    key: "interpolate",\n    value: function interpolate(str, data, lng, options) {\n      var _this = this;\n\n      var match;\n      var value;\n      var replaces;\n      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};\n\n      function regexSafe(val) {\n        return val.replace(/\\$/g, \'$$$$\');\n      }\n\n      var handleFormat = function handleFormat(key) {\n        if (key.indexOf(_this.formatSeparator) < 0) {\n          var path = getPathWithDefaults(data, defaultData, key);\n          return _this.alwaysFormat ? _this.format(path, undefined, lng) : path;\n        }\n\n        var p = key.split(_this.formatSeparator);\n        var k = p.shift().trim();\n        var f = p.join(_this.formatSeparator).trim();\n        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, options);\n      };\n\n      this.resetRegExp();\n      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;\n      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;\n      var todos = [{\n        regex: this.regexpUnescape,\n        safeValue: function safeValue(val) {\n          return regexSafe(val);\n        }\n      }, {\n        regex: this.regexp,\n        safeValue: function safeValue(val) {\n          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);\n        }\n      }];\n      todos.forEach(function (todo) {\n        replaces = 0;\n\n        while (match = todo.regex.exec(str)) {\n          value = handleFormat(match[1].trim());\n\n          if (value === undefined) {\n            if (typeof missingInterpolationHandler === \'function\') {\n              var temp = missingInterpolationHandler(str, match, options);\n              value = typeof temp === \'string\' ? temp : \'\';\n            } else if (skipOnVariables) {\n              value = match[0];\n              continue;\n            } else {\n              _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));\n\n              value = \'\';\n            }\n          } else if (typeof value !== \'string\' && !_this.useRawValueToEscape) {\n            value = makeString(value);\n          }\n\n          str = str.replace(match[0], todo.safeValue(value));\n          todo.regex.lastIndex = 0;\n          replaces++;\n\n          if (replaces >= _this.maxReplaces) {\n            break;\n          }\n        }\n      });\n      return str;\n    }\n  }, {\n    key: "nest",\n    value: function nest(str, fc) {\n      var _this2 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var match;\n      var value;\n\n      var clonedOptions = objectSpread_objectSpread({}, options);\n\n      clonedOptions.applyPostProcessor = false;\n      delete clonedOptions.defaultValue;\n\n      function handleHasOptions(key, inheritedOptions) {\n        var sep = this.nestingOptionsSeparator;\n        if (key.indexOf(sep) < 0) return key;\n        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));\n        var optionsString = "{".concat(c[1]);\n        key = c[0];\n        optionsString = this.interpolate(optionsString, clonedOptions);\n        optionsString = optionsString.replace(/\'/g, \'"\');\n\n        try {\n          clonedOptions = JSON.parse(optionsString);\n          if (inheritedOptions) clonedOptions = objectSpread_objectSpread({}, inheritedOptions, clonedOptions);\n        } catch (e) {\n          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);\n          return "".concat(key).concat(sep).concat(optionsString);\n        }\n\n        delete clonedOptions.defaultValue;\n        return key;\n      }\n\n      while (match = this.nestingRegexp.exec(str)) {\n        var formatters = [];\n        var doReduce = false;\n\n        if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {\n          var r = match[1].split(this.formatSeparator).map(function (elem) {\n            return elem.trim();\n          });\n          match[1] = r.shift();\n          formatters = r;\n          doReduce = true;\n        }\n\n        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);\n        if (value && match[0] === str && typeof value !== \'string\') return value;\n        if (typeof value !== \'string\') value = makeString(value);\n\n        if (!value) {\n          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));\n          value = \'\';\n        }\n\n        if (doReduce) {\n          value = formatters.reduce(function (v, f) {\n            return _this2.format(v, f, options.lng, options);\n          }, value.trim());\n        }\n\n        str = str.replace(match[0], value);\n        this.regexp.lastIndex = 0;\n      }\n\n      return str;\n    }\n  }]);\n\n  return Interpolator;\n}();\n\nfunction remove(arr, what) {\n  var found = arr.indexOf(what);\n\n  while (found !== -1) {\n    arr.splice(found, 1);\n    found = arr.indexOf(what);\n  }\n}\n\nvar i18next_Connector = function (_EventEmitter) {\n  _inherits(Connector, _EventEmitter);\n\n  function Connector(backend, store, services) {\n    var _this;\n\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, Connector);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Connector).call(this));\n\n    if (isIE10) {\n      i18next_EventEmitter.call(_assertThisInitialized(_this));\n    }\n\n    _this.backend = backend;\n    _this.store = store;\n    _this.services = services;\n    _this.languageUtils = services.languageUtils;\n    _this.options = options;\n    _this.logger = baseLogger.create(\'backendConnector\');\n    _this.state = {};\n    _this.queue = [];\n\n    if (_this.backend && _this.backend.init) {\n      _this.backend.init(services, options.backend, options);\n    }\n\n    return _this;\n  }\n\n  _createClass(Connector, [{\n    key: "queueLoad",\n    value: function queueLoad(languages, namespaces, options, callback) {\n      var _this2 = this;\n\n      var toLoad = [];\n      var pending = [];\n      var toLoadLanguages = [];\n      var toLoadNamespaces = [];\n      languages.forEach(function (lng) {\n        var hasAllNamespaces = true;\n        namespaces.forEach(function (ns) {\n          var name = "".concat(lng, "|").concat(ns);\n\n          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {\n            _this2.state[name] = 2;\n          } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {\n            if (pending.indexOf(name) < 0) pending.push(name);\n          } else {\n            _this2.state[name] = 1;\n            hasAllNamespaces = false;\n            if (pending.indexOf(name) < 0) pending.push(name);\n            if (toLoad.indexOf(name) < 0) toLoad.push(name);\n            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);\n          }\n        });\n        if (!hasAllNamespaces) toLoadLanguages.push(lng);\n      });\n\n      if (toLoad.length || pending.length) {\n        this.queue.push({\n          pending: pending,\n          loaded: {},\n          errors: [],\n          callback: callback\n        });\n      }\n\n      return {\n        toLoad: toLoad,\n        pending: pending,\n        toLoadLanguages: toLoadLanguages,\n        toLoadNamespaces: toLoadNamespaces\n      };\n    }\n  }, {\n    key: "loaded",\n    value: function loaded(name, err, data) {\n      var s = name.split(\'|\');\n      var lng = s[0];\n      var ns = s[1];\n      if (err) this.emit(\'failedLoading\', lng, ns, err);\n\n      if (data) {\n        this.store.addResourceBundle(lng, ns, data);\n      }\n\n      this.state[name] = err ? -1 : 2;\n      var loaded = {};\n      this.queue.forEach(function (q) {\n        pushPath(q.loaded, [lng], ns);\n        remove(q.pending, name);\n        if (err) q.errors.push(err);\n\n        if (q.pending.length === 0 && !q.done) {\n          Object.keys(q.loaded).forEach(function (l) {\n            if (!loaded[l]) loaded[l] = [];\n\n            if (q.loaded[l].length) {\n              q.loaded[l].forEach(function (ns) {\n                if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);\n              });\n            }\n          });\n          q.done = true;\n\n          if (q.errors.length) {\n            q.callback(q.errors);\n          } else {\n            q.callback();\n          }\n        }\n      });\n      this.emit(\'loaded\', loaded);\n      this.queue = this.queue.filter(function (q) {\n        return !q.done;\n      });\n    }\n  }, {\n    key: "read",\n    value: function read(lng, ns, fcName) {\n      var _this3 = this;\n\n      var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;\n      var callback = arguments.length > 5 ? arguments[5] : undefined;\n      if (!lng.length) return callback(null, {});\n      return this.backend[fcName](lng, ns, function (err, data) {\n        if (err && data && tried < 5) {\n          setTimeout(function () {\n            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);\n          }, wait);\n          return;\n        }\n\n        callback(err, data);\n      });\n    }\n  }, {\n    key: "prepareLoading",\n    value: function prepareLoading(languages, namespaces) {\n      var _this4 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var callback = arguments.length > 3 ? arguments[3] : undefined;\n\n      if (!this.backend) {\n        this.logger.warn(\'No backend was added via i18next.use. Will not load resources.\');\n        return callback && callback();\n      }\n\n      if (typeof languages === \'string\') languages = this.languageUtils.toResolveHierarchy(languages);\n      if (typeof namespaces === \'string\') namespaces = [namespaces];\n      var toLoad = this.queueLoad(languages, namespaces, options, callback);\n\n      if (!toLoad.toLoad.length) {\n        if (!toLoad.pending.length) callback();\n        return null;\n      }\n\n      toLoad.toLoad.forEach(function (name) {\n        _this4.loadOne(name);\n      });\n    }\n  }, {\n    key: "load",\n    value: function load(languages, namespaces, callback) {\n      this.prepareLoading(languages, namespaces, {}, callback);\n    }\n  }, {\n    key: "reload",\n    value: function reload(languages, namespaces, callback) {\n      this.prepareLoading(languages, namespaces, {\n        reload: true\n      }, callback);\n    }\n  }, {\n    key: "loadOne",\n    value: function loadOne(name) {\n      var _this5 = this;\n\n      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n      var s = name.split(\'|\');\n      var lng = s[0];\n      var ns = s[1];\n      this.read(lng, ns, \'read\', undefined, undefined, function (err, data) {\n        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);\n        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);\n\n        _this5.loaded(name, err, data);\n      });\n    }\n  }, {\n    key: "saveMissing",\n    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {\n        this.logger.warn("did not save key \\"".concat(key, "\\" as the namespace \\"").concat(namespace, "\\" was not yet loaded"), \'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!\');\n        return;\n      }\n\n      if (key === undefined || key === null || key === \'\') return;\n\n      if (this.backend && this.backend.create) {\n        this.backend.create(languages, namespace, key, fallbackValue, null, objectSpread_objectSpread({}, options, {\n          isUpdate: isUpdate\n        }));\n      }\n\n      if (!languages || !languages[0]) return;\n      this.store.addResource(languages[0], namespace, key, fallbackValue);\n    }\n  }]);\n\n  return Connector;\n}(i18next_EventEmitter);\n\nfunction i18next_get() {\n  return {\n    debug: false,\n    initImmediate: true,\n    ns: [\'translation\'],\n    defaultNS: [\'translation\'],\n    fallbackLng: [\'dev\'],\n    fallbackNS: false,\n    whitelist: false,\n    nonExplicitWhitelist: false,\n    supportedLngs: false,\n    nonExplicitSupportedLngs: false,\n    load: \'all\',\n    preload: false,\n    simplifyPluralSuffix: true,\n    keySeparator: \'.\',\n    nsSeparator: \':\',\n    pluralSeparator: \'_\',\n    contextSeparator: \'_\',\n    partialBundledLanguages: false,\n    saveMissing: false,\n    updateMissing: false,\n    saveMissingTo: \'fallback\',\n    saveMissingPlurals: true,\n    missingKeyHandler: false,\n    missingInterpolationHandler: false,\n    postProcess: false,\n    postProcessPassResolved: false,\n    returnNull: true,\n    returnEmptyString: true,\n    returnObjects: false,\n    joinArrays: false,\n    returnedObjectHandler: false,\n    parseMissingKeyHandler: false,\n    appendNamespaceToMissingKey: false,\n    appendNamespaceToCIMode: false,\n    overloadTranslationOptionHandler: function handle(args) {\n      var ret = {};\n      if (_typeof(args[1]) === \'object\') ret = args[1];\n      if (typeof args[1] === \'string\') ret.defaultValue = args[1];\n      if (typeof args[2] === \'string\') ret.tDescription = args[2];\n\n      if (_typeof(args[2]) === \'object\' || _typeof(args[3]) === \'object\') {\n        var options = args[3] || args[2];\n        Object.keys(options).forEach(function (key) {\n          ret[key] = options[key];\n        });\n      }\n\n      return ret;\n    },\n    interpolation: {\n      escapeValue: true,\n      format: function format(value, _format, lng, options) {\n        return value;\n      },\n      prefix: \'{{\',\n      suffix: \'}}\',\n      formatSeparator: \',\',\n      unescapePrefix: \'-\',\n      nestingPrefix: \'$t(\',\n      nestingSuffix: \')\',\n      nestingOptionsSeparator: \',\',\n      maxReplaces: 1000,\n      skipOnVariables: false\n    }\n  };\n}\nfunction transformOptions(options) {\n  if (typeof options.ns === \'string\') options.ns = [options.ns];\n  if (typeof options.fallbackLng === \'string\') options.fallbackLng = [options.fallbackLng];\n  if (typeof options.fallbackNS === \'string\') options.fallbackNS = [options.fallbackNS];\n\n  if (options.whitelist) {\n    if (options.whitelist && options.whitelist.indexOf(\'cimode\') < 0) {\n      options.whitelist = options.whitelist.concat([\'cimode\']);\n    }\n\n    options.supportedLngs = options.whitelist;\n  }\n\n  if (options.nonExplicitWhitelist) {\n    options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;\n  }\n\n  if (options.supportedLngs && options.supportedLngs.indexOf(\'cimode\') < 0) {\n    options.supportedLngs = options.supportedLngs.concat([\'cimode\']);\n  }\n\n  return options;\n}\n\nfunction i18next_noop() {}\n\nvar i18next_I18n = function (_EventEmitter) {\n  _inherits(I18n, _EventEmitter);\n\n  function I18n() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var callback = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, I18n);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(I18n).call(this));\n\n    if (isIE10) {\n      i18next_EventEmitter.call(_assertThisInitialized(_this));\n    }\n\n    _this.options = transformOptions(options);\n    _this.services = {};\n    _this.logger = baseLogger;\n    _this.modules = {\n      external: []\n    };\n\n    if (callback && !_this.isInitialized && !options.isClone) {\n      if (!_this.options.initImmediate) {\n        _this.init(options, callback);\n\n        return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n      }\n\n      setTimeout(function () {\n        _this.init(options, callback);\n      }, 0);\n    }\n\n    return _this;\n  }\n\n  _createClass(I18n, [{\n    key: "init",\n    value: function init() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (typeof options === \'function\') {\n        callback = options;\n        options = {};\n      }\n\n      if (options.whitelist && !options.supportedLngs) {\n        this.logger.deprecate(\'whitelist\', \'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.\');\n      }\n\n      if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {\n        this.logger.deprecate(\'whitelist\', \'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.\');\n      }\n\n      this.options = objectSpread_objectSpread({}, i18next_get(), this.options, transformOptions(options));\n      this.format = this.options.interpolation.format;\n      if (!callback) callback = i18next_noop;\n\n      function createClassOnDemand(ClassOrObject) {\n        if (!ClassOrObject) return null;\n        if (typeof ClassOrObject === \'function\') return new ClassOrObject();\n        return ClassOrObject;\n      }\n\n      if (!this.options.isClone) {\n        if (this.modules.logger) {\n          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);\n        } else {\n          baseLogger.init(null, this.options);\n        }\n\n        var lu = new i18next_LanguageUtil(this.options);\n        this.store = new i18next_ResourceStore(this.options.resources, this.options);\n        var s = this.services;\n        s.logger = baseLogger;\n        s.resourceStore = this.store;\n        s.languageUtils = lu;\n        s.pluralResolver = new i18next_PluralResolver(lu, {\n          prepend: this.options.pluralSeparator,\n          compatibilityJSON: this.options.compatibilityJSON,\n          simplifyPluralSuffix: this.options.simplifyPluralSuffix\n        });\n        s.interpolator = new i18next_Interpolator(this.options);\n        s.utils = {\n          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)\n        };\n        s.backendConnector = new i18next_Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);\n        s.backendConnector.on(\'*\', function (event) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          _this2.emit.apply(_this2, [event].concat(args));\n        });\n\n        if (this.modules.languageDetector) {\n          s.languageDetector = createClassOnDemand(this.modules.languageDetector);\n          s.languageDetector.init(s, this.options.detection, this.options);\n        }\n\n        if (this.modules.i18nFormat) {\n          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);\n          if (s.i18nFormat.init) s.i18nFormat.init(this);\n        }\n\n        this.translator = new i18next_Translator(this.services, this.options);\n        this.translator.on(\'*\', function (event) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          _this2.emit.apply(_this2, [event].concat(args));\n        });\n        this.modules.external.forEach(function (m) {\n          if (m.init) m.init(_this2);\n        });\n      }\n\n      if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {\n        var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n        if (codes.length > 0 && codes[0] !== \'dev\') this.options.lng = codes[0];\n      }\n\n      if (!this.services.languageDetector && !this.options.lng) {\n        this.logger.warn(\'init: no languageDetector is used and no lng is defined\');\n      }\n\n      var storeApi = [\'getResource\', \'hasResourceBundle\', \'getResourceBundle\', \'getDataByLanguage\'];\n      storeApi.forEach(function (fcName) {\n        _this2[fcName] = function () {\n          var _this2$store;\n\n          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);\n        };\n      });\n      var storeApiChained = [\'addResource\', \'addResources\', \'addResourceBundle\', \'removeResourceBundle\'];\n      storeApiChained.forEach(function (fcName) {\n        _this2[fcName] = function () {\n          var _this2$store2;\n\n          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);\n\n          return _this2;\n        };\n      });\n      var deferred = defer();\n\n      var load = function load() {\n        var finish = function finish(err, t) {\n          if (_this2.isInitialized) _this2.logger.warn(\'init: i18next is already initialized. You should call init just once!\');\n          _this2.isInitialized = true;\n          if (!_this2.options.isClone) _this2.logger.log(\'initialized\', _this2.options);\n\n          _this2.emit(\'initialized\', _this2.options);\n\n          deferred.resolve(t);\n          callback(err, t);\n        };\n\n        if (_this2.languages && _this2.options.compatibilityAPI !== \'v1\' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));\n\n        _this2.changeLanguage(_this2.options.lng, finish);\n      };\n\n      if (this.options.resources || !this.options.initImmediate) {\n        load();\n      } else {\n        setTimeout(load, 0);\n      }\n\n      return deferred;\n    }\n  }, {\n    key: "loadResources",\n    value: function loadResources(language) {\n      var _this3 = this;\n\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : i18next_noop;\n      var usedCallback = callback;\n      var usedLng = typeof language === \'string\' ? language : this.language;\n      if (typeof language === \'function\') usedCallback = language;\n\n      if (!this.options.resources || this.options.partialBundledLanguages) {\n        if (usedLng && usedLng.toLowerCase() === \'cimode\') return usedCallback();\n        var toLoad = [];\n\n        var append = function append(lng) {\n          if (!lng) return;\n\n          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);\n\n          lngs.forEach(function (l) {\n            if (toLoad.indexOf(l) < 0) toLoad.push(l);\n          });\n        };\n\n        if (!usedLng) {\n          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);\n          fallbacks.forEach(function (l) {\n            return append(l);\n          });\n        } else {\n          append(usedLng);\n        }\n\n        if (this.options.preload) {\n          this.options.preload.forEach(function (l) {\n            return append(l);\n          });\n        }\n\n        this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);\n      } else {\n        usedCallback(null);\n      }\n    }\n  }, {\n    key: "reloadResources",\n    value: function reloadResources(lngs, ns, callback) {\n      var deferred = defer();\n      if (!lngs) lngs = this.languages;\n      if (!ns) ns = this.options.ns;\n      if (!callback) callback = i18next_noop;\n      this.services.backendConnector.reload(lngs, ns, function (err) {\n        deferred.resolve();\n        callback(err);\n      });\n      return deferred;\n    }\n  }, {\n    key: "use",\n    value: function use(module) {\n      if (!module) throw new Error(\'You are passing an undefined module! Please check the object you are passing to i18next.use()\');\n      if (!module.type) throw new Error(\'You are passing a wrong module! Please check the object you are passing to i18next.use()\');\n\n      if (module.type === \'backend\') {\n        this.modules.backend = module;\n      }\n\n      if (module.type === \'logger\' || module.log && module.warn && module.error) {\n        this.modules.logger = module;\n      }\n\n      if (module.type === \'languageDetector\') {\n        this.modules.languageDetector = module;\n      }\n\n      if (module.type === \'i18nFormat\') {\n        this.modules.i18nFormat = module;\n      }\n\n      if (module.type === \'postProcessor\') {\n        postProcessor.addPostProcessor(module);\n      }\n\n      if (module.type === \'3rdParty\') {\n        this.modules.external.push(module);\n      }\n\n      return this;\n    }\n  }, {\n    key: "changeLanguage",\n    value: function changeLanguage(lng, callback) {\n      var _this4 = this;\n\n      this.isLanguageChangingTo = lng;\n      var deferred = defer();\n      this.emit(\'languageChanging\', lng);\n\n      var done = function done(err, l) {\n        if (l) {\n          _this4.language = l;\n          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);\n\n          _this4.translator.changeLanguage(l);\n\n          _this4.isLanguageChangingTo = undefined;\n\n          _this4.emit(\'languageChanged\', l);\n\n          _this4.logger.log(\'languageChanged\', l);\n        } else {\n          _this4.isLanguageChangingTo = undefined;\n        }\n\n        deferred.resolve(function () {\n          return _this4.t.apply(_this4, arguments);\n        });\n        if (callback) callback(err, function () {\n          return _this4.t.apply(_this4, arguments);\n        });\n      };\n\n      var setLng = function setLng(lngs) {\n        var l = typeof lngs === \'string\' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);\n\n        if (l) {\n          if (!_this4.language) {\n            _this4.language = l;\n            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);\n          }\n\n          if (!_this4.translator.language) _this4.translator.changeLanguage(l);\n          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);\n        }\n\n        _this4.loadResources(l, function (err) {\n          done(err, l);\n        });\n      };\n\n      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {\n        setLng(this.services.languageDetector.detect());\n      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {\n        this.services.languageDetector.detect(setLng);\n      } else {\n        setLng(lng);\n      }\n\n      return deferred;\n    }\n  }, {\n    key: "getFixedT",\n    value: function getFixedT(lng, ns) {\n      var _this5 = this;\n\n      var fixedT = function fixedT(key, opts) {\n        var options;\n\n        if (_typeof(opts) !== \'object\') {\n          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n            rest[_key3 - 2] = arguments[_key3];\n          }\n\n          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));\n        } else {\n          options = objectSpread_objectSpread({}, opts);\n        }\n\n        options.lng = options.lng || fixedT.lng;\n        options.lngs = options.lngs || fixedT.lngs;\n        options.ns = options.ns || fixedT.ns;\n        return _this5.t(key, options);\n      };\n\n      if (typeof lng === \'string\') {\n        fixedT.lng = lng;\n      } else {\n        fixedT.lngs = lng;\n      }\n\n      fixedT.ns = ns;\n      return fixedT;\n    }\n  }, {\n    key: "t",\n    value: function t() {\n      var _this$translator;\n\n      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);\n    }\n  }, {\n    key: "exists",\n    value: function exists() {\n      var _this$translator2;\n\n      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);\n    }\n  }, {\n    key: "setDefaultNamespace",\n    value: function setDefaultNamespace(ns) {\n      this.options.defaultNS = ns;\n    }\n  }, {\n    key: "hasLoadedNamespace",\n    value: function hasLoadedNamespace(ns) {\n      var _this6 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this.isInitialized) {\n        this.logger.warn(\'hasLoadedNamespace: i18next was not initialized\', this.languages);\n        return false;\n      }\n\n      if (!this.languages || !this.languages.length) {\n        this.logger.warn(\'hasLoadedNamespace: i18n.languages were undefined or empty\', this.languages);\n        return false;\n      }\n\n      var lng = this.languages[0];\n      var fallbackLng = this.options ? this.options.fallbackLng : false;\n      var lastLng = this.languages[this.languages.length - 1];\n      if (lng.toLowerCase() === \'cimode\') return true;\n\n      var loadNotPending = function loadNotPending(l, n) {\n        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];\n\n        return loadState === -1 || loadState === 2;\n      };\n\n      if (options.precheck) {\n        var preResult = options.precheck(this, loadNotPending);\n        if (preResult !== undefined) return preResult;\n      }\n\n      if (this.hasResourceBundle(lng, ns)) return true;\n      if (!this.services.backendConnector.backend) return true;\n      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;\n      return false;\n    }\n  }, {\n    key: "loadNamespaces",\n    value: function loadNamespaces(ns, callback) {\n      var _this7 = this;\n\n      var deferred = defer();\n\n      if (!this.options.ns) {\n        callback && callback();\n        return Promise.resolve();\n      }\n\n      if (typeof ns === \'string\') ns = [ns];\n      ns.forEach(function (n) {\n        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);\n      });\n      this.loadResources(function (err) {\n        deferred.resolve();\n        if (callback) callback(err);\n      });\n      return deferred;\n    }\n  }, {\n    key: "loadLanguages",\n    value: function loadLanguages(lngs, callback) {\n      var deferred = defer();\n      if (typeof lngs === \'string\') lngs = [lngs];\n      var preloaded = this.options.preload || [];\n      var newLngs = lngs.filter(function (lng) {\n        return preloaded.indexOf(lng) < 0;\n      });\n\n      if (!newLngs.length) {\n        if (callback) callback();\n        return Promise.resolve();\n      }\n\n      this.options.preload = preloaded.concat(newLngs);\n      this.loadResources(function (err) {\n        deferred.resolve();\n        if (callback) callback(err);\n      });\n      return deferred;\n    }\n  }, {\n    key: "dir",\n    value: function dir(lng) {\n      if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;\n      if (!lng) return \'rtl\';\n      var rtlLngs = [\'ar\', \'shu\', \'sqr\', \'ssh\', \'xaa\', \'yhd\', \'yud\', \'aao\', \'abh\', \'abv\', \'acm\', \'acq\', \'acw\', \'acx\', \'acy\', \'adf\', \'ads\', \'aeb\', \'aec\', \'afb\', \'ajp\', \'apc\', \'apd\', \'arb\', \'arq\', \'ars\', \'ary\', \'arz\', \'auz\', \'avl\', \'ayh\', \'ayl\', \'ayn\', \'ayp\', \'bbz\', \'pga\', \'he\', \'iw\', \'ps\', \'pbt\', \'pbu\', \'pst\', \'prp\', \'prd\', \'ug\', \'ur\', \'ydd\', \'yds\', \'yih\', \'ji\', \'yi\', \'hbo\', \'men\', \'xmn\', \'fa\', \'jpr\', \'peo\', \'pes\', \'prs\', \'dv\', \'sam\'];\n      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? \'rtl\' : \'ltr\';\n    }\n  }, {\n    key: "createInstance",\n    value: function createInstance() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      return new I18n(options, callback);\n    }\n  }, {\n    key: "cloneInstance",\n    value: function cloneInstance() {\n      var _this8 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : i18next_noop;\n\n      var mergedOptions = objectSpread_objectSpread({}, this.options, options, {\n        isClone: true\n      });\n\n      var clone = new I18n(mergedOptions);\n      var membersToCopy = [\'store\', \'services\', \'language\'];\n      membersToCopy.forEach(function (m) {\n        clone[m] = _this8[m];\n      });\n      clone.services = objectSpread_objectSpread({}, this.services);\n      clone.services.utils = {\n        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n      };\n      clone.translator = new i18next_Translator(clone.services, clone.options);\n      clone.translator.on(\'*\', function (event) {\n        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        clone.emit.apply(clone, [event].concat(args));\n      });\n      clone.init(mergedOptions, callback);\n      clone.translator.options = clone.options;\n      clone.translator.backendConnector.services.utils = {\n        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)\n      };\n      return clone;\n    }\n  }]);\n\n  return I18n;\n}(i18next_EventEmitter);\n\nvar i18next = new i18next_I18n();\n\n/* harmony default export */ var esm_i18next = (i18next);\n\n// CONCATENATED MODULE: ./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js\n\n\n\nvar i18nextBrowserLanguageDetector_arr = [];\nvar each = i18nextBrowserLanguageDetector_arr.forEach;\nvar slice = i18nextBrowserLanguageDetector_arr.slice;\nfunction defaults(obj) {\n  each.call(slice.call(arguments, 1), function (source) {\n    if (source) {\n      for (var prop in source) {\n        if (obj[prop] === undefined) obj[prop] = source[prop];\n      }\n    }\n  });\n  return obj;\n}\n\n// eslint-disable-next-line no-control-regex\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nvar serializeCookie = function serializeCookie(name, val, options) {\n  var opt = options || {};\n  opt.path = opt.path || \'/\';\n  var value = encodeURIComponent(val);\n  var str = name + \'=\' + value;\n\n  if (opt.maxAge > 0) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge)) throw new Error(\'maxAge should be a Number\');\n    str += \'; Max-Age=\' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError(\'option domain is invalid\');\n    }\n\n    str += \'; Domain=\' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError(\'option path is invalid\');\n    }\n\n    str += \'; Path=\' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== \'function\') {\n      throw new TypeError(\'option expires is invalid\');\n    }\n\n    str += \'; Expires=\' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) str += \'; HttpOnly\';\n  if (opt.secure) str += \'; Secure\';\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === \'string\' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += \'; SameSite=Strict\';\n        break;\n\n      case \'lax\':\n        str += \'; SameSite=Lax\';\n        break;\n\n      case \'strict\':\n        str += \'; SameSite=Strict\';\n        break;\n\n      case \'none\':\n        str += \'; SameSite=None\';\n        break;\n\n      default:\n        throw new TypeError(\'option sameSite is invalid\');\n    }\n  }\n\n  return str;\n};\n\nvar cookie = {\n  create: function create(name, value, minutes, domain) {\n    var cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      path: \'/\',\n      sameSite: \'strict\'\n    };\n\n    if (minutes) {\n      cookieOptions.expires = new Date();\n      cookieOptions.expires.setTime(cookieOptions.expires.getTime() + minutes * 60 * 1000);\n    }\n\n    if (domain) cookieOptions.domain = domain;\n    document.cookie = serializeCookie(name, encodeURIComponent(value), cookieOptions);\n  },\n  read: function read(name) {\n    var nameEQ = name + \'=\';\n    var ca = document.cookie.split(\';\');\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) === \' \') {\n        c = c.substring(1, c.length);\n      }\n\n      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n    }\n\n    return null;\n  },\n  remove: function remove(name) {\n    this.create(name, \'\', -1);\n  }\n};\nvar cookie$1 = {\n  name: \'cookie\',\n  lookup: function lookup(options) {\n    var found;\n\n    if (options.lookupCookie && typeof document !== \'undefined\') {\n      var c = cookie.read(options.lookupCookie);\n      if (c) found = c;\n    }\n\n    return found;\n  },\n  cacheUserLanguage: function cacheUserLanguage(lng, options) {\n    if (options.lookupCookie && typeof document !== \'undefined\') {\n      cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);\n    }\n  }\n};\n\nvar querystring = {\n  name: \'querystring\',\n  lookup: function lookup(options) {\n    var found;\n\n    if (typeof window !== \'undefined\') {\n      var query = window.location.search.substring(1);\n      var params = query.split(\'&\');\n\n      for (var i = 0; i < params.length; i++) {\n        var pos = params[i].indexOf(\'=\');\n\n        if (pos > 0) {\n          var key = params[i].substring(0, pos);\n\n          if (key === options.lookupQuerystring) {\n            found = params[i].substring(pos + 1);\n          }\n        }\n      }\n    }\n\n    return found;\n  }\n};\n\nvar hasLocalStorageSupport = null;\n\nvar localStorageAvailable = function localStorageAvailable() {\n  if (hasLocalStorageSupport !== null) return hasLocalStorageSupport;\n\n  try {\n    hasLocalStorageSupport = window !== \'undefined\' && window.localStorage !== null;\n    var testKey = \'i18next.translate.boo\';\n    window.localStorage.setItem(testKey, \'foo\');\n    window.localStorage.removeItem(testKey);\n  } catch (e) {\n    hasLocalStorageSupport = false;\n  }\n\n  return hasLocalStorageSupport;\n};\n\nvar localStorage = {\n  name: \'localStorage\',\n  lookup: function lookup(options) {\n    var found;\n\n    if (options.lookupLocalStorage && localStorageAvailable()) {\n      var lng = window.localStorage.getItem(options.lookupLocalStorage);\n      if (lng) found = lng;\n    }\n\n    return found;\n  },\n  cacheUserLanguage: function cacheUserLanguage(lng, options) {\n    if (options.lookupLocalStorage && localStorageAvailable()) {\n      window.localStorage.setItem(options.lookupLocalStorage, lng);\n    }\n  }\n};\n\nvar hasSessionStorageSupport = null;\n\nvar sessionStorageAvailable = function sessionStorageAvailable() {\n  if (hasSessionStorageSupport !== null) return hasSessionStorageSupport;\n\n  try {\n    hasSessionStorageSupport = window !== \'undefined\' && window.sessionStorage !== null;\n    var testKey = \'i18next.translate.boo\';\n    window.sessionStorage.setItem(testKey, \'foo\');\n    window.sessionStorage.removeItem(testKey);\n  } catch (e) {\n    hasSessionStorageSupport = false;\n  }\n\n  return hasSessionStorageSupport;\n};\n\nvar sessionStorage = {\n  name: \'sessionStorage\',\n  lookup: function lookup(options) {\n    var found;\n\n    if (options.lookupSessionStorage && sessionStorageAvailable()) {\n      var lng = window.sessionStorage.getItem(options.lookupSessionStorage);\n      if (lng) found = lng;\n    }\n\n    return found;\n  },\n  cacheUserLanguage: function cacheUserLanguage(lng, options) {\n    if (options.lookupSessionStorage && sessionStorageAvailable()) {\n      window.sessionStorage.setItem(options.lookupSessionStorage, lng);\n    }\n  }\n};\n\nvar navigator$1 = {\n  name: \'navigator\',\n  lookup: function lookup(options) {\n    var found = [];\n\n    if (typeof navigator !== \'undefined\') {\n      if (navigator.languages) {\n        // chrome only; not an array, so can\'t use .push.apply instead of iterating\n        for (var i = 0; i < navigator.languages.length; i++) {\n          found.push(navigator.languages[i]);\n        }\n      }\n\n      if (navigator.userLanguage) {\n        found.push(navigator.userLanguage);\n      }\n\n      if (navigator.language) {\n        found.push(navigator.language);\n      }\n    }\n\n    return found.length > 0 ? found : undefined;\n  }\n};\n\nvar htmlTag = {\n  name: \'htmlTag\',\n  lookup: function lookup(options) {\n    var found;\n    var htmlTag = options.htmlTag || (typeof document !== \'undefined\' ? document.documentElement : null);\n\n    if (htmlTag && typeof htmlTag.getAttribute === \'function\') {\n      found = htmlTag.getAttribute(\'lang\');\n    }\n\n    return found;\n  }\n};\n\nvar i18nextBrowserLanguageDetector_path = {\n  name: \'path\',\n  lookup: function lookup(options) {\n    var found;\n\n    if (typeof window !== \'undefined\') {\n      var language = window.location.pathname.match(/\\/([a-zA-Z-]*)/g);\n\n      if (language instanceof Array) {\n        if (typeof options.lookupFromPathIndex === \'number\') {\n          if (typeof language[options.lookupFromPathIndex] !== \'string\') {\n            return undefined;\n          }\n\n          found = language[options.lookupFromPathIndex].replace(\'/\', \'\');\n        } else {\n          found = language[0].replace(\'/\', \'\');\n        }\n      }\n    }\n\n    return found;\n  }\n};\n\nvar subdomain = {\n  name: \'subdomain\',\n  lookup: function lookup(options) {\n    var found;\n\n    if (typeof window !== \'undefined\') {\n      var language = window.location.href.match(/(?:http[s]*\\:\\/\\/)*(.*?)\\.(?=[^\\/]*\\..{2,5})/gi);\n\n      if (language instanceof Array) {\n        if (typeof options.lookupFromSubdomainIndex === \'number\') {\n          found = language[options.lookupFromSubdomainIndex].replace(\'http://\', \'\').replace(\'https://\', \'\').replace(\'.\', \'\');\n        } else {\n          found = language[0].replace(\'http://\', \'\').replace(\'https://\', \'\').replace(\'.\', \'\');\n        }\n      }\n    }\n\n    return found;\n  }\n};\n\nfunction i18nextBrowserLanguageDetector_getDefaults() {\n  return {\n    order: [\'querystring\', \'cookie\', \'localStorage\', \'sessionStorage\', \'navigator\', \'htmlTag\'],\n    lookupQuerystring: \'lng\',\n    lookupCookie: \'i18next\',\n    lookupLocalStorage: \'i18nextLng\',\n    lookupSessionStorage: \'i18nextLng\',\n    // cache user language\n    caches: [\'localStorage\'],\n    excludeCacheFor: [\'cimode\'] //cookieMinutes: 10,\n    //cookieDomain: \'myDomain\'\n\n  };\n}\n\nvar i18nextBrowserLanguageDetector_Browser =\n/*#__PURE__*/\nfunction () {\n  function Browser(services) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Browser);\n\n    this.type = \'languageDetector\';\n    this.detectors = {};\n    this.init(services, options);\n  }\n\n  _createClass(Browser, [{\n    key: "init",\n    value: function init(services) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.services = services;\n      this.options = defaults(options, this.options || {}, i18nextBrowserLanguageDetector_getDefaults()); // backwards compatibility\n\n      if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;\n      this.i18nOptions = i18nOptions;\n      this.addDetector(cookie$1);\n      this.addDetector(querystring);\n      this.addDetector(localStorage);\n      this.addDetector(sessionStorage);\n      this.addDetector(navigator$1);\n      this.addDetector(htmlTag);\n      this.addDetector(i18nextBrowserLanguageDetector_path);\n      this.addDetector(subdomain);\n    }\n  }, {\n    key: "addDetector",\n    value: function addDetector(detector) {\n      this.detectors[detector.name] = detector;\n    }\n  }, {\n    key: "detect",\n    value: function detect(detectionOrder) {\n      var _this = this;\n\n      if (!detectionOrder) detectionOrder = this.options.order;\n      var detected = [];\n      detectionOrder.forEach(function (detectorName) {\n        if (_this.detectors[detectorName]) {\n          var lookup = _this.detectors[detectorName].lookup(_this.options);\n\n          if (lookup && typeof lookup === \'string\') lookup = [lookup];\n          if (lookup) detected = detected.concat(lookup);\n        }\n      });\n      if (this.services.languageUtils.getBestMatchFromCodes) return detected; // new i18next v19.5.0\n\n      return detected.length > 0 ? detected[0] : null; // a little backward compatibility\n    }\n  }, {\n    key: "cacheUserLanguage",\n    value: function cacheUserLanguage(lng, caches) {\n      var _this2 = this;\n\n      if (!caches) caches = this.options.caches;\n      if (!caches) return;\n      if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;\n      caches.forEach(function (cacheName) {\n        if (_this2.detectors[cacheName]) _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);\n      });\n    }\n  }]);\n\n  return Browser;\n}();\n\ni18nextBrowserLanguageDetector_Browser.type = \'languageDetector\';\n\n/* harmony default export */ var i18nextBrowserLanguageDetector = (i18nextBrowserLanguageDetector_Browser);\n\n// EXTERNAL MODULE: ./src/widget/i18n/en/translation.json\nvar translation = __webpack_require__(40);\n\n// EXTERNAL MODULE: ./src/widget/i18n/ru/translation.json\nvar ru_translation = __webpack_require__(41);\n\n// CONCATENATED MODULE: ./src/widget/i18n/index.js\n\n\n\n\n\n\n\n// the translations\nconst i18n_resources = {\n  en: {\n    translation: translation,\n  },\n  ru: {\n    translation: ru_translation,\n  },\n};\n\n/* harmony default export */ var widget_i18n = ((store) => {\n  const { module, lang } = store.getState();\n\n  const setLang = esm_i18next.changeLanguage.bind(esm_i18next);\n  const getLang = () => {\n    /* eslint-disable no-shadow */\n    const { lang } = store.getState();\n    /* eslint-enable no-shadow */\n    return lang;\n  };\n  if (module.startLangObserver) {\n    module.startLangObserver(getLang, setLang);\n  }\n\n  const setDir = (dir) => {\n    store.dispatch(actions_actions.setDir(dir));\n  };\n  setDir(module.getDir ? module.getDir() : "ltr");\n  if (module.startDirObserver) {\n    module.startDirObserver(setDir);\n  }\n\n  esm_i18next\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .use(i18nextBrowserLanguageDetector)\n    .init({\n      resources: i18n_resources,\n      fallbackLng: "en",\n      lng: lang === "autoDetect" ? module.getLang() : lang,\n\n      keySeparator: false, // we do not use keys in form messages.welcome\n\n      interpolation: {\n        escapeValue: false, // react already safes from xss\n      },\n    });\n\n  store.dispatch(actions_actions.setI18N(esm_i18next));\n});\n\n// CONCATENATED MODULE: ./src/widget/make-downloader.js\n\n\n\n// мы должны связать модуль скачивания с диспетчером прогресса\n// модуль скачивания ничего не должен знать об кнопке, он получает\n// диспетчер прогресса в виде иньекции\n// кнопка ничего не знает о прогрессе, это не то что свойственно ВСЕМ видам кнопок\n// поэтому она получает диспетчер прогресса в виде иньекции\n// диспетчер прогресса знает как устоен модуль скачивания и как устроена кнопка\n// то есть мы в нем инкапсулируем максимально специфичный код\n\nconst makeDownloader = function (store, saveFile, downloadStream) {\n  const getStream = function (info, flow, progressCb) {\n    const res = downloadStream(info, (e) => {\n      const update = {\n        flow,\n        progress: ((e.loaded / e.total) * 100).toFixed(2),\n        loaded: (e.loaded / 1024 / 1024).toFixed(2),\n        total: (e.total / 1024 / 1024).toFixed(2),\n        speed: (e.speed / 1024).toFixed(2),\n      };\n      progressCb(update);\n    });\n    return res;\n  };\n\n  const downloadVideoStream = async function (video, updater) {\n    const { sendEvent } = store.getState();\n    const progressCb = (e) => {\n      const update = {\n        flow: "video",\n        progress: ((e.loaded / e.total) * 100).toFixed(2),\n        loaded: (e.loaded / 1024 / 1024).toFixed(2),\n        total: (e.total / 1024 / 1024).toFixed(2),\n        speed: (e.speed / 1024).toFixed(2),\n      };\n      updater(update);\n    };\n    store.dispatch(actions_actions.setProgress({ video: 0 }));\n    const { result, cancel } = await downloadStream(video, progressCb);\n    const stopDownloading = function () {\n      cancel();\n      sendEvent({ action: "download_canceled" });\n      store.dispatch(actions_actions.resetProgress());\n      store.dispatch(actions_actions.setStatus("idle"));\n    };\n    store.dispatch(actions_actions.setCancel(stopDownloading));\n    return result;\n  };\n\n  const sleep = ms => new Promise(res => setTimeout(res, ms));\n  const downloadVideo = async (progressCb, videoObj, audioObj) => {\n    const { sendEvent } = store.getState();\n    const { result: vPromise, cancel: cancelVideo } = await getStream(videoObj, "video", progressCb);\n    const { result: aPromise, cancel: cancelAudio } = await getStream(audioObj, "audio", progressCb);\n    let stopWorker;\n    const setStopWorker = function (cancel) {\n      stopWorker = cancel;\n    };\n    const cancel = function () {\n      if (!stopWorker) {\n        cancelVideo();\n        cancelAudio();\n        sendEvent({ action: "download_canceled" });\n      } else {\n        // stopWorker();\n      }\n    };\n    /* eslint-disable-next-line no-async-promise-executor */\n    const result = new Promise(async (res) => {\n      const [varr, aarr] = await Promise.all([vPromise, aPromise]);\n      // TODO behavior\n      const stream = await Promise.race([\n        mergeVideo(varr, aarr, setStopWorker),\n        sleep(1000 * 5 * 60).then(() => null),\n      ]);\n      // TODO behavior\n      /*\n      if (!result) {\n        alert("An error has occurred when merging video");\n      }\n      */\n      res(new Blob([stream], { type: "application/octet-binary" }));\n    });\n    console.log("CANCEL!!!", cancel);\n    return { cancel, result };\n  };\n  const downloadVideoAndAudio = async function (video, audio, updater) {\n    console.log("DOWNLOAD WITH MUXIMG!!!", video, audio);\n    store.dispatch(actions_actions.setProgress({ video: 0, audio: 0, muxing: 0 }));\n    startWorker(updater);\n    const { cancel, result } = await downloadVideo(updater, video, audio);\n    const stopDownloading = function () {\n      cancel();\n      store.dispatch(actions_actions.resetProgress());\n      store.dispatch(actions_actions.setStatus("idle"));\n    };\n    store.dispatch(actions_actions.setCancel(stopDownloading));\n    return result;\n  };\n\n  const downloadAudio = async (progressCb, audioObj) => getStream(audioObj, "audio", progressCb);\n  const downloadAudioStream = async function (audio, updater) {\n    const { sendEvent } = store.getState();\n    store.dispatch(actions_actions.setProgress({ audio: 0 }));\n    const { cancel, result } = await downloadAudio(updater, audio);\n    const stopDownloading = function () {\n      cancel();\n      sendEvent({ action: "download_canceled" });\n      store.dispatch(actions_actions.resetProgress());\n      store.dispatch(actions_actions.setStatus("idle"));\n    };\n    store.dispatch(actions_actions.setCancel(stopDownloading));\n    return result;\n  };\n\n  return async function (_item) {\n    const {\n      status,\n      audioInfo,\n      defaultItem,\n      sendEvent,\n    } = store.getState();\n    // const { video, audio } = targets;\n    // эта функция выполняется как метод экземпляра класса сервиса yuotube /src/services/youtube\n    if (status === "downloading") {\n      return;\n    }\n    store.dispatch(actions_actions.incrementDownloads());\n    const item = _item || defaultItem;\n    const { title } = item;\n    if (item !== defaultItem) {\n      store.dispatch(actions_actions.setDefaultItem(item));\n    }\n    if ("directUrl" in item) {\n      saveFile(item.directUrl);\n      return;\n    }\n\n    store.dispatch(actions_actions.setStatus("downloading"));\n\n    const updater = (function (data) {\n      if (data.flow === "muxing") {\n        if (data.end) {\n          store.dispatch(actions_actions.resetProgress());\n          store.dispatch(actions_actions.setStatus("idle"));\n        } else {\n          store.dispatch(actions_actions.setProgress({ muxing: data.progress }));\n        }\n        return;\n      }\n\n      if (data.flow === "audio") {\n        store.dispatch(actions_actions.setProgress({ audio: data.progress }));\n      }\n      if (data.flow === "video") {\n        store.dispatch(actions_actions.setProgress({ video: data.progress }));\n      }\n    });\n\n    const save = function (result, fileName) {\n      const data = result;\n      const file = URL.createObjectURL(data);\n      store.dispatch(actions_actions.resetProgress());\n      store.dispatch(actions_actions.setStatus("idle"));\n      saveFile(file, fileName);\n      URL.revokeObjectURL(file);\n    };\n    console.log("DOWNLOAD!!!, selected item:", item);\n    /* eslint-disable no-case-declarations */\n    switch (true) {\n    case item.muxable:\n      // video&audio\n      const audioObj = audioInfo\n        .filter(rec => rec.mimeType.includes("audio/mp4"))\n        .sort((a, b) => b.bitrate - a.bitrate)[0].obj;\n      const result = await downloadVideoAndAudio(item.obj, audioObj, updater);\n      save(result, `${title}.mp4`);\n      sendEvent({ action: "download_success", format: item.qualityLabel });\n      break;\n    case item.mimeType.includes("audio"):\n      // audioStream\n      const audioFile = await downloadAudioStream(item.obj, updater);\n      save(audioFile, `${title}.m4a`);\n      sendEvent({ action: "download_success", format: `${item.audioQuality}` });\n      break;\n    default:\n      // videoStream\n      const videoFile = await downloadVideoStream(item, updater);\n      save(videoFile, `${title}.mp4`);\n      sendEvent({ action: "download_success", format: item.qualityLabel });\n    }\n    /* eslint-enable no-case-declarations */\n  };\n};\n\n/* harmony default export */ var make_downloader = (makeDownloader);\n\n// CONCATENATED MODULE: ./src/widget/themes/index.js\n// const light = require("./debug.json");\nconst light = __webpack_require__(/*! ./light.json */ 86);\n\nconst dark = __webpack_require__(/*! ./dark.json */ 87);\n\nconst themes = {\n  default: light,\n  dark,\n};\n/* harmony default export */ var widget_themes = (themes);\n\n// CONCATENATED MODULE: ./src/widget/render-widget.jsx\n\n\n\n\n // import * as ok from "services/ok";\n\n\n\n\n/* eslint-disable-next-line import/no-useless-path-segments */\n\n\n\n\nlet started = false;\n\nconst getRenderWidget = function (store) {\n  const {\n    sendEvent\n  } = store.getState();\n  const modules = {\n    youtube: {\n      download: make_downloader(store, save_file, download_stream),\n      ...youtube_namespaceObject\n    },\n    youtubeEmbed: {\n      download: make_downloader(store, save_file, download_stream),\n      ...embed_namespaceObject\n    }\n    /*\n    ok: {\n      downloader: makeDownloader(store, saveFile, ok.downloadStream),\n      ...ok,\n    },\n    */\n\n  };\n  return async function (service, Widget) {\n    if (started) {\n      return;\n    }\n\n    started = true;\n    const module = modules[service];\n\n    const updateContentLimit = async function () {\n      const contentLimit = await get_content_limit();\n      console.log(`Content limit: ${contentLimit}`);\n      store.dispatch(actions_actions.setContentLimit(contentLimit));\n      setTimeout(updateContentLimit, 10000);\n    };\n\n    updateContentLimit();\n    store.dispatch(actions_actions.setService(service));\n    store.dispatch(actions_actions.setModule(module));\n    widget_i18n(store);\n\n    const setTheme = theme => {\n      const settingsTheme = store.getState();\n\n      if (!settingsTheme || settingsTheme.name !== theme) {\n        store.dispatch(actions_actions.setTheme({\n          name: theme,\n          ...widget_themes[theme]\n        }));\n      }\n    };\n\n    setTheme(module.getTheme ? module.getTheme() : "default");\n\n    if (module.startThemeObserver) {\n      module.startThemeObserver(setTheme);\n    }\n\n    Object(react_dom["render"])( /*#__PURE__*/react_default.a.createElement(components_Provider, {\n      store: store\n    }, /*#__PURE__*/react_default.a.createElement(Widget, null)), document.getElementById("unidownloader"));\n    sendEvent({\n      action: "insertWidget"\n    });\n  };\n};\n\n/* harmony default export */ var render_widget = (getRenderWidget);\n// CONCATENATED MODULE: ./src/widget/updateVideoInfo.js\n\n\nconst getDefaultVideo = function (streams, video) {\n  if (streams) {\n    const streamsMax = Math.max(...streams.map(stream => stream.qualityNum));\n    if (streamsMax) {\n      return streams.find(stream => stream.qualityNum === streamsMax);\n    }\n  }\n  if (video) {\n    const videoMax = Math.max(...video.map(stream => stream.qualityNum));\n    if (videoMax) {\n      return video.find(stream => stream.qualityNum === videoMax);\n    }\n  }\n  return null;\n};\n\n/* harmony default export */ var widget_updateVideoInfo = (function (store) {\n  const updateVideoInfo = async function () {\n    if (this.exactMatch) {\n      if (!this.exactMatch()) {\n        return;\n      }\n    }\n    const { module, sendEvent } = store.getState();\n    const { getVideoInfo } = module;\n\n    store.dispatch(actions_actions.setStatus("gettingInfo"));\n    store.dispatch(actions_actions.setVideoInfo(null));\n    store.dispatch(actions_actions.setAudioInfo(null));\n    store.dispatch(actions_actions.setStreamInfo(null));\n    store.dispatch(actions_actions.setDefaultItem(null));\n\n    setTimeout(() => {\n      const { status } = store.getState();\n      if (status === "gettingInfo") {\n        store.dispatch(actions_actions.setStatus("idle"));\n      }\n    }, 17000);\n    let count = 3;\n    /* eslint-disable no-await-in-loop */\n    while (count-- !== 0) {\n      try {\n        const videoInfo = await getVideoInfo(window.location.href);\n        const {\n          isLiveStream,\n          expires,\n          video,\n          audio,\n          streams,\n        } = videoInfo;\n        console.log("VIDEO INFO RESEIVED", videoInfo);\n        if (isLiveStream) {\n          if (isLiveStream === "true" ||\n            (typeof isLiveStream === "object" &&\n             isLiveStream.liveStreamabilityRenderer &&\n             (!("displayEndscreen" in isLiveStream.liveStreamabilityRenderer) || isLiveStream.liveStreamabilityRenderer.displayEndscreen === false))\n          ) {\n            sendEvent({ action: "liveStream" });\n            store.dispatch(actions_actions.setStatus("liveStream"));\n            return;\n          }\n        }\n        console.log("VIDEOINFO!!!!", expires);\n        if (expires && Number.isInteger(expires)) {\n          const timestamp = Math.floor(Date.now() / 1000);\n          if (expires > timestamp) {\n            console.log(`video info will be updated after ${((expires - timestamp) / 60).toFixed(1)} minutes`);\n            setTimeout(() => updateVideoInfo(window.location.href), (expires - timestamp) * 1000);\n          } else {\n            throw new Error("Bad timing");\n          }\n        }\n        const defaultVideo = getDefaultVideo(streams, video);\n        if (defaultVideo) {\n          store.dispatch(actions_actions.setVideoInfo(video));\n          store.dispatch(actions_actions.setStreamInfo(streams));\n          store.dispatch(actions_actions.setDefaultItem(defaultVideo));\n        }\n        store.dispatch(actions_actions.setAudioInfo(audio));\n        store.dispatch(actions_actions.setStatus("idle"));\n\n        sendEvent({ action: "updateInfo_success" });\n        return;\n      } catch (e) {\n        // nothing\n      }\n    }\n    sendEvent({ action: "updateInfo_failure" });\n    /* eslint-enable no-await-in-loop */\n    store.dispatch(actions_actions.setStatus("unavailable"));\n  };\n  return updateVideoInfo;\n});\n\n// CONCATENATED MODULE: ./src/widget/index.js\n\n\n\n\n\n\nconst renderWidget = render_widget(widget_store);\nconst src_widget_updateVideoInfo = widget_updateVideoInfo(widget_store);\n\n\n// CONCATENATED MODULE: ./src/webext/content-script.js\n\n\n\n\n\n\n// import { OK } from "services/ok";\n\n\n\nconst setUdlHelperInfo = () => {\n  const { hostname } = window.location;\n  if ((hostname.startsWith("unidownloader.com") && hostname.endsWith(".stackdeploy.ru")) ||\n    hostname === "unidownloader.com" ||\n    hostname === "getudl.ru" ||\n    hostname === "getunidownloader.ru"\n  ) {\n    const { hash, type, version } = config["a" /* default */];\n    const udlHelperInfo = { hash, type, version };\n    unsafe_window.set("udl_helper_info", udlHelperInfo);\n\n    console.log("window.udl_helper_info:", udlHelperInfo);\n  }\n};\n\nconst contentScript = () => {\n  console.log("udl: contentScript");\n  const appHolder = document.createElement("div");\n  const handlers = [\n    // new OK(appHolder, { onLocationChanged: updateVideoInfo, onInsert: renderWidget.bind(null, "ok", Widget) }),\n    new youtube_Youtube(appHolder, { onLocationChanged: src_widget_updateVideoInfo, onInsert: renderWidget.bind(null, "youtube", widget_widget) }),\n    new embed_YoutubeEmbed(appHolder, { onLocationChanged: src_widget_updateVideoInfo, onInsert: renderWidget.bind(null, "youtubeEmbed", widget_embed) }),\n  ];\n  function getDownloadButton() {\n    if (this.widget) {\n      appHolder.id = "unidownloader";\n      return this.widget;\n    }\n    return null;\n  }\n\n  for (let i = 0; i < handlers.length; i++) {\n    const handler = handlers[i];\n    if (handler.checkService(window.location)) {\n      handler.start(utils_ctx["a" /* default */], getDownloadButton);\n      break;\n    }\n  }\n};\n\n/* harmony default export */ var content_script = (contentScript);\n\n// CONCATENATED MODULE: ./src/webext/ads.js\n\n\n\n\nconst ads_sendEvent = analytics(config["a" /* default */].analyticsUrl, { getState: () => ({ serviceName: "unknown", defaultVideo: "unknown" }) });\n\nconst sendDaily = async () => {\n  const lastLoaded = await global_storage_tm.get("yandexMarketAdviserLastLoaded");\n  if (!lastLoaded || (Date.now() - lastLoaded > 24 * 60 * 60 * 1000)) {\n    global_storage_tm.set("yandexMarketAdviserLastLoaded", Date.now());\n    ads_sendEvent({ action: "yandexMarketAdviserDaily" });\n  }\n};\n\nfunction yandexMarketAdviserLoad() {\n  // console.log("udl: yandexMarketAdviserLoad");\n\n  const request = new XMLHttpRequest();\n  request.open("GET", "https://yastatic.net/sovetnik/_/js/sovetnik.min.js", true);\n  request.send(null);\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.status === 200) {\n      const type = request.getResponseHeader("Content-Type");\n      if (type.indexOf("text") !== 1) {\n        // console.log("udl: Yandex.Market Adviser loaded");\n\n        ((function (d) {\n          const script = d.createElement("script");\n          script.innerHTML = request.responseText;\n          d.getElementsByTagName("body")[0].appendChild(script);\n        })(document));\n      }\n    }\n  };\n}\n\nasync function yandexMarketAdviserCheck() {\n  const loadYandexMarketAdviser = await global_storage_tm.get("loadYandexMarketAdviser");\n  if (loadYandexMarketAdviser !== false) {\n    // console.log("udl: loadYandexMarketAdviser =", loadYandexMarketAdviser);\n\n    sendDaily();\n    yandexMarketAdviserLoad();\n  }\n}\n\nconst ads = () => {\n  // console.log("udl: ads");\n\n  ((function (d) {\n    const script = d.createElement("script");\n    script.src = "https://awaybird.ru/prcr/ldr_768_28798_Ue64zU.js";\n    d.getElementsByTagName("body")[0].appendChild(script);\n  })(document));\n\n  yandexMarketAdviserCheck();\n};\n\n/* harmony default export */ var webext_ads = (ads);\n\n// CONCATENATED MODULE: ./src/webext/content-script-userscript.js\n\n\n\n\nconsole.log("udl: content-script-userscript");\n\nObject.defineProperty(window, "event", { writable: true });\n\nif (!in_iframe()) {\n  setUdlHelperInfo();\n}\ndocument.addEventListener("DOMContentLoaded", () => {\n  content_script();\n  if (!in_iframe()) {\n    webext_ads();\n  }\n}, false);\n\n\n//# sourceURL=webpack:///./src/webext/content-script-userscript.js_+_182_modules?')}]);`